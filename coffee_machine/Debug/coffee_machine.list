
coffee_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800b318  0800b318  0001b318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b480  0800b480  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b480  0800b480  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b480  0800b480  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  20000078  0800b500  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001240  0800b500  00021240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020de1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004065  00000000  00000000  00040e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00044ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00046968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbf4  00000000  00000000  00048238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b08d  00000000  00000000  00074e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116f1f  00000000  00000000  0008feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a6dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000786c  00000000  00000000  001a6e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2fc 	.word	0x0800b2fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b2fc 	.word	0x0800b2fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <vApplicationGetIdleTaskMemory+0x30>)
 8000bae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000094 	.word	0x20000094
 8000bc8:	20000148 	.word	0x20000148

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	2b20      	cmp	r3, #32
 8000d3c:	d101      	bne.n	8000d42 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d60:	2b80      	cmp	r3, #128	; 0x80
 8000d62:	d101      	bne.n	8000d68 <LL_USART_IsActiveFlag_TXE+0x18>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <LL_USART_IsActiveFlag_TXE+0x1a>
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b089      	sub	sp, #36	; 0x24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	e853 3f00 	ldrex	r3, [r3]
 8000d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	61ba      	str	r2, [r7, #24]
 8000d98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d9a:	6979      	ldr	r1, [r7, #20]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	e841 2300 	strex	r3, r2, [r1]
 8000da2:	613b      	str	r3, [r7, #16]
   return(result);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1e9      	bne.n	8000d7e <LL_USART_EnableIT_RXNE+0x8>
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	3724      	adds	r7, #36	; 0x24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	e853 3f00 	ldrex	r3, [r3]
 8000dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	61ba      	str	r2, [r7, #24]
 8000dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ddc:	6979      	ldr	r1, [r7, #20]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	e841 2300 	strex	r3, r2, [r1]
 8000de4:	613b      	str	r3, [r7, #16]
   return(result);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e9      	bne.n	8000dc0 <LL_USART_EnableIT_TXE+0x8>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b089      	sub	sp, #36	; 0x24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	e853 3f00 	ldrex	r3, [r3]
 8000e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	61ba      	str	r2, [r7, #24]
 8000e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e1e:	6979      	ldr	r1, [r7, #20]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	e841 2300 	strex	r3, r2, [r1]
 8000e26:	613b      	str	r3, [r7, #16]
   return(result);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1e9      	bne.n	8000e02 <LL_USART_DisableIT_TXE+0x8>
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3724      	adds	r7, #36	; 0x24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ebe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ee2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000

08000f08 <USART_1_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Rotina de trtaamento da ISR da UART 1
void USART_1_IRQHandler(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
	if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000f0e:	482a      	ldr	r0, [pc, #168]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f10:	f7ff ff1e 	bl	8000d50 <LL_USART_IsActiveFlag_TXE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d026      	beq.n	8000f68 <USART_1_IRQHandler+0x60>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000f1a:	e014      	b.n	8000f46 <USART_1_IRQHandler+0x3e>
			uint8_t byte;
			//Desinfileira um byte para tranmistir
			if (xQueueReceiveFromISR(tx_queue_1, &byte,
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <USART_1_IRQHandler+0xb4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f107 020c 	add.w	r2, r7, #12
 8000f24:	f107 010b 	add.w	r1, r7, #11
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 f8b8 	bl	800809e <xQueueReceiveFromISR>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <USART_1_IRQHandler+0x34>
					&contextSwitch) == pdFAIL) {
				//Se a fila de transmissao esta vazia, encerra a transmissao
				LL_USART_DisableIT_TXE(USART1);
 8000f34:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f36:	f7ff ff60 	bl	8000dfa <LL_USART_DisableIT_TXE>
 8000f3a:	e00a      	b.n	8000f52 <USART_1_IRQHandler+0x4a>
				break;
			}
			//Envia o byte retirado da fila de transmisao
			LL_USART_TransmitData8(USART1, byte);
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f42:	f7ff ff89 	bl	8000e58 <LL_USART_TransmitData8>
		while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f48:	f7ff ff02 	bl	8000d50 <LL_USART_IsActiveFlag_TXE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1e4      	bne.n	8000f1c <USART_1_IRQHandler+0x14>
		}
		portYIELD_FROM_ISR(contextSwitch);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <USART_1_IRQHandler+0x60>
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <USART_1_IRQHandler+0xb8>)
 8000f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	f3bf 8f6f 	isb	sy
	}
	//Se for interrupcao de recepcao
	if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f6a:	f7ff fede 	bl	8000d2a <LL_USART_IsActiveFlag_RXNE>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01d      	beq.n	8000fb0 <USART_1_IRQHandler+0xa8>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f74:	e00b      	b.n	8000f8e <USART_1_IRQHandler+0x86>
			//Copia o byte do regstrador de recepcao
			uint8_t byte = LL_USART_ReceiveData8(USART1);
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f78:	f7ff ff60 	bl	8000e3c <LL_USART_ReceiveData8>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	70fb      	strb	r3, [r7, #3]
			//Enfileira o byte recebido na fila de recepcao
			xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <USART_1_IRQHandler+0xbc>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	1d3a      	adds	r2, r7, #4
 8000f86:	1cf9      	adds	r1, r7, #3
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f006 ffed 	bl	8007f68 <xQueueGenericSendFromISR>
		while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <USART_1_IRQHandler+0xb0>)
 8000f90:	f7ff fecb 	bl	8000d2a <LL_USART_IsActiveFlag_RXNE>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1ed      	bne.n	8000f76 <USART_1_IRQHandler+0x6e>
			// xQueueSendFromISR can return errQUEUE_FULL
		}
		portYIELD_FROM_ISR(contextSwitch);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <USART_1_IRQHandler+0xa8>
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <USART_1_IRQHandler+0xb8>)
 8000fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	f3bf 8f4f 	dsb	sy
 8000fac:	f3bf 8f6f 	isb	sy
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	200011dc 	.word	0x200011dc
 8000fc0:	e000ed04 	.word	0xe000ed04
 8000fc4:	20001070 	.word	0x20001070

08000fc8 <USART_2_IRQHandler>:

//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
	if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8000fd0:	f7ff febe 	bl	8000d50 <LL_USART_IsActiveFlag_TXE>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d026      	beq.n	8001028 <USART_2_IRQHandler+0x60>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000fda:	e014      	b.n	8001006 <USART_2_IRQHandler+0x3e>
			uint8_t byte;
			//Desinfileira um byte para tranmistir
			if (xQueueReceiveFromISR(tx_queue_2, &byte,
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <USART_2_IRQHandler+0xb4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f107 010b 	add.w	r1, r7, #11
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 f858 	bl	800809e <xQueueReceiveFromISR>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d103      	bne.n	8000ffc <USART_2_IRQHandler+0x34>
					&contextSwitch) == pdFAIL) {
				//Se a fila de transmissao esta vazia, encerra a transmissao
				LL_USART_DisableIT_TXE(USART2);
 8000ff4:	4820      	ldr	r0, [pc, #128]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8000ff6:	f7ff ff00 	bl	8000dfa <LL_USART_DisableIT_TXE>
 8000ffa:	e00a      	b.n	8001012 <USART_2_IRQHandler+0x4a>
				break;
			}
			//Envia o byte retirado da fila de transmisao
			LL_USART_TransmitData8(USART2, byte);
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	4619      	mov	r1, r3
 8001000:	481d      	ldr	r0, [pc, #116]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8001002:	f7ff ff29 	bl	8000e58 <LL_USART_TransmitData8>
		while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8001008:	f7ff fea2 	bl	8000d50 <LL_USART_IsActiveFlag_TXE>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1e4      	bne.n	8000fdc <USART_2_IRQHandler+0x14>
		}
		portYIELD_FROM_ISR(contextSwitch);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <USART_2_IRQHandler+0x60>
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <USART_2_IRQHandler+0xb8>)
 800101a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	f3bf 8f4f 	dsb	sy
 8001024:	f3bf 8f6f 	isb	sy
	}
	//Se for interrupcao de recepcao
	if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <USART_2_IRQHandler+0xb0>)
 800102a:	f7ff fe7e 	bl	8000d2a <LL_USART_IsActiveFlag_RXNE>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01d      	beq.n	8001070 <USART_2_IRQHandler+0xa8>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001034:	e00b      	b.n	800104e <USART_2_IRQHandler+0x86>
			//Copia o byte do regstrador de recepcao
			uint8_t byte = LL_USART_ReceiveData8(USART2);
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8001038:	f7ff ff00 	bl	8000e3c <LL_USART_ReceiveData8>
 800103c:	4603      	mov	r3, r0
 800103e:	70fb      	strb	r3, [r7, #3]
			//Enfileira o byte recebido na fila de recepcao
			xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <USART_2_IRQHandler+0xbc>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	1d3a      	adds	r2, r7, #4
 8001046:	1cf9      	adds	r1, r7, #3
 8001048:	2300      	movs	r3, #0
 800104a:	f006 ff8d 	bl	8007f68 <xQueueGenericSendFromISR>
		while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <USART_2_IRQHandler+0xb0>)
 8001050:	f7ff fe6b 	bl	8000d2a <LL_USART_IsActiveFlag_RXNE>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ed      	bne.n	8001036 <USART_2_IRQHandler+0x6e>
			// xQueueSendFromISR can return errQUEUE_FULL
		}
		portYIELD_FROM_ISR(contextSwitch);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <USART_2_IRQHandler+0xa8>
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <USART_2_IRQHandler+0xb8>)
 8001062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	f3bf 8f4f 	dsb	sy
 800106c:	f3bf 8f6f 	isb	sy
	}
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	20001188 	.word	0x20001188
 8001080:	e000ed04 	.word	0xe000ed04
 8001084:	2000118c 	.word	0x2000118c

08001088 <sendchar>:

void sendchar(char c, char usart) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	if (usart == USART_1) {
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10b      	bne.n	80010b6 <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <sendchar+0x54>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	2300      	movs	r3, #0
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	f006 fe5f 	bl	8007d6c <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <sendchar+0x58>)
 80010b0:	f7ff fe82 	bl	8000db8 <LL_USART_EnableIT_TXE>
	} else if (usart == USART_2) {
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 80010b4:	e00d      	b.n	80010d2 <sendchar+0x4a>
	} else if (usart == USART_2) {
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d10a      	bne.n	80010d2 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <sendchar+0x5c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	1df9      	adds	r1, r7, #7
 80010c2:	2300      	movs	r3, #0
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	f006 fe50 	bl	8007d6c <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <sendchar+0x60>)
 80010ce:	f7ff fe73 	bl	8000db8 <LL_USART_EnableIT_TXE>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200011dc 	.word	0x200011dc
 80010e0:	40013800 	.word	0x40013800
 80010e4:	20001188 	.word	0x20001188
 80010e8:	40004400 	.word	0x40004400

080010ec <sendString>:
void sendString(char *str, char usart) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
	while (*str != 0) {
 80010f8:	e009      	b.n	800110e <sendString+0x22>
		sendchar(*str, usart);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	78fa      	ldrb	r2, [r7, #3]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffc0 	bl	8001088 <sendchar>
		str++;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
	while (*str != 0) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f1      	bne.n	80010fa <sendString+0xe>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <readVoltageLdr>:
	else if (usart == USART_2)
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
	return caracter;
}

int16_t readVoltageLdr(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <readVoltageLdr+0x24>)
 8001126:	f001 fb39 	bl	800279c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800112a:	f04f 31ff 	mov.w	r1, #4294967295
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <readVoltageLdr+0x24>)
 8001130:	f001 fbee 	bl	8002910 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <readVoltageLdr+0x24>)
 8001136:	f001 fcc3 	bl	8002ac0 <HAL_ADC_GetValue>
 800113a:	4603      	mov	r3, r0
 800113c:	b21b      	sxth	r3, r3
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20001124 	.word	0x20001124

08001148 <readVoltagePotenciometro>:

int16_t readVoltagePotenciometro(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <readVoltagePotenciometro+0x24>)
 800114e:	f001 fb25 	bl	800279c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001152:	f04f 31ff 	mov.w	r1, #4294967295
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <readVoltagePotenciometro+0x24>)
 8001158:	f001 fbda 	bl	8002910 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc2);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <readVoltagePotenciometro+0x24>)
 800115e:	f001 fcaf 	bl	8002ac0 <HAL_ADC_GetValue>
 8001162:	4603      	mov	r3, r0
 8001164:	b21b      	sxth	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001074 	.word	0x20001074

08001170 <piscarLed>:

void piscarLed (void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <piscarLed+0x28>)
 8001176:	f004 facf 	bl	8005718 <HAL_TIM_Base_Start_IT>
	HAL_Delay(10000);
 800117a:	f242 7010 	movw	r0, #10000	; 0x2710
 800117e:	f000 ff9d 	bl	80020bc <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim3);
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <piscarLed+0x28>)
 8001184:	f004 fb38 	bl	80057f8 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2120      	movs	r1, #32
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <piscarLed+0x2c>)
 800118e:	f002 feff 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200010d8 	.word	0x200010d8
 800119c:	48000400 	.word	0x48000400

080011a0 <ldr>:

void ldr(void *vParam) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	while (1) {
		int intensity = readVoltageLdr() * MAX_INTENSITY / MAX_VOLTAGE;
 80011a8:	f7ff ffba 	bl	8001120 <readVoltageLdr>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80011b4:	fb03 f302 	mul.w	r3, r3, r2
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <ldr+0x90>)
 80011ba:	fb82 1203 	smull	r1, r2, r2, r3
 80011be:	441a      	add	r2, r3
 80011c0:	12d2      	asrs	r2, r2, #11
 80011c2:	17db      	asrs	r3, r3, #31
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	60fb      	str	r3, [r7, #12]
		intensity = MAX_INTENSITY - (pow(intensity, EXP_CONST) / pow(MAX_INTENSITY, EXP_CONST - 1));
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff f9a3 	bl	8000514 <__aeabi_i2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001220 <ldr+0x80>
 80011d6:	ec43 2b10 	vmov	d0, r2, r3
 80011da:	f009 f8d9 	bl	800a390 <pow>
 80011de:	ec51 0b10 	vmov	r0, r1, d0
 80011e2:	a311      	add	r3, pc, #68	; (adr r3, 8001228 <ldr+0x88>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fb28 	bl	800083c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	490f      	ldr	r1, [pc, #60]	; (8001234 <ldr+0x94>)
 80011f6:	f7ff f83f 	bl	8000278 <__aeabi_dsub>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fca1 	bl	8000b48 <__aeabi_d2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]
//		int intensity = MAX_INTENSITY - (readVoltageLdr() * MAX_INTENSITY / MAX_VOLTAGE);
		user_pwm_setvalue(intensity);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc94 	bl	8001b3c <user_pwm_setvalue>
		vTaskDelay(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f007 fa67 	bl	80086e8 <vTaskDelay>
	while (1) {
 800121a:	e7c5      	b.n	80011a8 <ldr+0x8>
 800121c:	f3af 8000 	nop.w
 8001220:	33333333 	.word	0x33333333
 8001224:	3fd33333 	.word	0x3fd33333
 8001228:	71573707 	.word	0x71573707
 800122c:	3f7ca32a 	.word	0x3f7ca32a
 8001230:	80080081 	.word	0x80080081
 8001234:	4092c000 	.word	0x4092c000

08001238 <potenciometro>:
	}
}

void potenciometro(void *vParam) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	while (1) {
		char str[8];
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) {
 8001240:	2110      	movs	r1, #16
 8001242:	4821      	ldr	r0, [pc, #132]	; (80012c8 <potenciometro+0x90>)
 8001244:	f002 fe8c 	bl	8003f60 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f8      	bne.n	8001240 <potenciometro+0x8>
			int temperature = MAX_TEMPERATURE - (readVoltagePotenciometro() * MAX_TEMPERATURE / MAX_VOLTAGE);
 800124e:	f7ff ff7b 	bl	8001148 <readVoltagePotenciometro>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	fb03 f302 	mul.w	r3, r3, r2
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <potenciometro+0x94>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	441a      	add	r2, r3
 8001264:	12d2      	asrs	r2, r2, #11
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	3364      	adds	r3, #100	; 0x64
 800126c:	617b      	str	r3, [r7, #20]
			sprintf(str, "%d\r\n", temperature);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <potenciometro+0x98>)
 8001276:	4618      	mov	r0, r3
 8001278:	f008 fcd6 	bl	8009c28 <siprintf>
			sendString(str, USART_1);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2101      	movs	r1, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff32 	bl	80010ec <sendString>
			sendString(str, USART_2);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff2c 	bl	80010ec <sendString>
			if (temperature >= 75) {
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b4a      	cmp	r3, #74	; 0x4a
 8001298:	dd02      	ble.n	80012a0 <potenciometro+0x68>
				// Pisca luz por 3 segundos
				piscarLed();
 800129a:	f7ff ff69 	bl	8001170 <piscarLed>
 800129e:	e7cf      	b.n	8001240 <potenciometro+0x8>
			} else {
				// Liga luz por 2 segundos
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f002 fe71 	bl	8003f90 <HAL_GPIO_WritePin>
				vTaskDelay(2000);
 80012ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b2:	f007 fa19 	bl	80086e8 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f002 fe66 	bl	8003f90 <HAL_GPIO_WritePin>
	while (1) {
 80012c4:	e7bc      	b.n	8001240 <potenciometro+0x8>
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400
 80012cc:	80080081 	.word	0x80080081
 80012d0:	0800b324 	.word	0x0800b324

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f000 feaf 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f855 	bl	800138c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012e2:	f000 f8a4 	bl	800142e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f000 fb9f 	bl	8001a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ea:	f000 fb05 	bl	80018f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012ee:	f000 fa69 	bl	80017c4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80012f2:	f000 f9a1 	bl	8001638 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012f6:	f000 fa15 	bl	8001724 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012fa:	f000 f8c3 	bl	8001484 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012fe:	f000 f937 	bl	8001570 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uart_1_mutex = xSemaphoreCreateMutex();
 8001302:	2001      	movs	r0, #1
 8001304:	f006 fd19 	bl	8007d3a <xQueueCreateMutex>
 8001308:	4603      	mov	r3, r0
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <main+0x98>)
 800130c:	6013      	str	r3, [r2, #0]
  uart_2_mutex = xSemaphoreCreateMutex();
 800130e:	2001      	movs	r0, #1
 8001310:	f006 fd13 	bl	8007d3a <xQueueCreateMutex>
 8001314:	4603      	mov	r3, r0
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <main+0x9c>)
 8001318:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <main+0xa0>)
 800131c:	1d3c      	adds	r4, r7, #4
 800131e:	461d      	mov	r5, r3
 8001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001324:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f006 fb12 	bl	800795a <osThreadCreate>
 8001336:	4603      	mov	r3, r0
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <main+0xa4>)
 800133a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //xTaskCreate(cli, "cli", configMINIMAL_STACK_SIZE, NULL, 1 , NULL);
  xTaskCreate(potenciometro, "potenciometro", configMINIMAL_STACK_SIZE, NULL, 1 , NULL);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2301      	movs	r3, #1
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <main+0xa8>)
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <main+0xac>)
 800134c:	f007 f87e 	bl	800844c <xTaskCreate>
  xTaskCreate(ldr, "ldr", configMINIMAL_STACK_SIZE, NULL, 1 , NULL);
 8001350:	2300      	movs	r3, #0
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	2301      	movs	r3, #1
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	4909      	ldr	r1, [pc, #36]	; (8001384 <main+0xb0>)
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <main+0xb4>)
 8001360:	f007 f874 	bl	800844c <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001364:	f006 faf2 	bl	800794c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001368:	e7fe      	b.n	8001368 <main+0x94>
 800136a:	bf00      	nop
 800136c:	20000348 	.word	0x20000348
 8001370:	2000034c 	.word	0x2000034c
 8001374:	0800b340 	.word	0x0800b340
 8001378:	2000106c 	.word	0x2000106c
 800137c:	0800b32c 	.word	0x0800b32c
 8001380:	08001239 	.word	0x08001239
 8001384:	0800b33c 	.word	0x0800b33c
 8001388:	080011a1 	.word	0x080011a1

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2244      	movs	r2, #68	; 0x44
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f008 fb68 	bl	8009a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b2:	f002 fe2d 	bl	8004010 <HAL_PWREx_ControlVoltageScaling>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013bc:	f000 fc08 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2310      	movs	r3, #16
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d2:	2302      	movs	r3, #2
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013da:	230a      	movs	r3, #10
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013de:	2307      	movs	r3, #7
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fe64 	bl	80040bc <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013fa:	f000 fbe9 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2303      	movs	r3, #3
 8001404:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2104      	movs	r1, #4
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fa2a 	bl	8004870 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001422:	f000 fbd5 	bl	8001bd0 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3758      	adds	r7, #88	; 0x58
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b0a2      	sub	sp, #136	; 0x88
 8001432:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2288      	movs	r2, #136	; 0x88
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f008 fb18 	bl	8009a70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001444:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800144a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001454:	2308      	movs	r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001458:	2307      	movs	r3, #7
 800145a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001468:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fc3f 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001478:	f000 fbaa 	bl	8001bd0 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3788      	adds	r7, #136	; 0x88
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <MX_ADC1_Init+0xe4>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014d8:	2201      	movs	r2, #1
 80014da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001508:	f000 fff2 	bl	80024f0 <HAL_ADC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001512:	f000 fb5d 	bl	8001bd0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <MX_ADC1_Init+0xe0>)
 8001522:	f002 f9e1 	bl	80038e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800152c:	f000 fb50 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_ADC1_Init+0xe8>)
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001534:	2306      	movs	r3, #6
 8001536:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800153c:	237f      	movs	r3, #127	; 0x7f
 800153e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001540:	2304      	movs	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0xe0>)
 800154e:	f001 fcfd 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001558:	f000 fb3a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20001124 	.word	0x20001124
 8001568:	50040000 	.word	0x50040000
 800156c:	19200040 	.word	0x19200040

08001570 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_ADC2_Init+0xbc>)
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <MX_ADC2_Init+0xc0>)
 800158a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <MX_ADC2_Init+0xbc>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_ADC2_Init+0xbc>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_ADC2_Init+0xbc>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <MX_ADC2_Init+0xbc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_ADC2_Init+0xbc>)
 80015a6:	2204      	movs	r2, #4
 80015a8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <MX_ADC2_Init+0xbc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_ADC2_Init+0xbc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_ADC2_Init+0xbc>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_ADC2_Init+0xbc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_ADC2_Init+0xbc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_ADC2_Init+0xbc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_ADC2_Init+0xbc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_ADC2_Init+0xbc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_ADC2_Init+0xbc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_ADC2_Init+0xbc>)
 80015e8:	f000 ff82 	bl	80024f0 <HAL_ADC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80015f2:	f000 faed 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_ADC2_Init+0xc4>)
 80015f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fa:	2306      	movs	r3, #6
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001602:	237f      	movs	r3, #127	; 0x7f
 8001604:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001606:	2304      	movs	r3, #4
 8001608:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_ADC2_Init+0xbc>)
 8001614:	f001 fc9a 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800161e:	f000 fad7 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20001074 	.word	0x20001074
 8001630:	50040100 	.word	0x50040100
 8001634:	25b00200 	.word	0x25b00200

08001638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <MX_TIM2_Init+0xe8>)
 800166c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127-1;
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001674:	227e      	movs	r2, #126	; 0x7e
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <MX_TIM2_Init+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001680:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <MX_TIM2_Init+0xe8>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001692:	4823      	ldr	r0, [pc, #140]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001694:	f003 ffe8 	bl	8005668 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800169e:	f000 fa97 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ac:	4619      	mov	r1, r3
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <MX_TIM2_Init+0xe8>)
 80016b0:	f004 fd02 	bl	80060b8 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016ba:	f000 fa89 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <MX_TIM2_Init+0xe8>)
 80016c0:	f004 f8c9 	bl	8005856 <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016ca:	f000 fa81 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <MX_TIM2_Init+0xe8>)
 80016de:	f005 fa0d 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016e8:	f000 fa72 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001704:	f004 fbc4 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800170e:	f000 fa5f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_TIM2_Init+0xe8>)
 8001714:	f000 fb52 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 8001718:	bf00      	nop
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20001190 	.word	0x20001190

08001724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM3_Init+0x98>)
 8001744:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <MX_TIM3_Init+0x9c>)
 8001746:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM3_Init+0x98>)
 800174a:	f240 128f 	movw	r2, #399	; 0x18f
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM3_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM3_Init+0x98>)
 8001758:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM3_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM3_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM3_Init+0x98>)
 800176c:	f003 ff7c 	bl	8005668 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001776:	f000 fa2b 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM3_Init+0x98>)
 8001788:	f004 fc96 	bl	80060b8 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001792:	f000 fa1d 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM3_Init+0x98>)
 80017a4:	f005 f9aa 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80017ae:	f000 fa0f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200010d8 	.word	0x200010d8
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0b0      	sub	sp, #192	; 0xc0
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80017ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	615a      	str	r2, [r3, #20]
 80017dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2288      	movs	r2, #136	; 0x88
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 f93a 	bl	8009a70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fa72 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001812:	f000 f9dd 	bl	8001bd0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001816:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800181a:	f7ff fb5d 	bl	8000ed8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fb2a 	bl	8000e78 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001824:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001844:	2307      	movs	r3, #7
 8001846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f005 fb43 	bl	8006ede <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001858:	f7ff f9b8 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 800185c:	4603      	mov	r3, r0
 800185e:	2200      	movs	r2, #0
 8001860:	2105      	movs	r1, #5
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fa08 	bl	8000c78 <NVIC_EncodePriority>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	2025      	movs	r0, #37	; 0x25
 800186e:	f7ff f9d9 	bl	8000c24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001872:	2025      	movs	r0, #37	; 0x25
 8001874:	f7ff f9b8 	bl	8000be8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001878:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001892:	230c      	movs	r3, #12
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 80018a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x128>)
 80018ac:	f005 ffba 	bl	8007824 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80018b0:	480e      	ldr	r0, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x128>)
 80018b2:	f7ff fa24 	bl	8000cfe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_USART1_UART_Init+0x128>)
 80018b8:	f7ff fa11 	bl	8000cde <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  //Inicializa as filas de transmissao e recepcao
	tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 80018bc:	2200      	movs	r2, #0
 80018be:	2101      	movs	r1, #1
 80018c0:	2080      	movs	r0, #128	; 0x80
 80018c2:	f006 f9c7 	bl	8007c54 <xQueueGenericCreate>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <MX_USART1_UART_Init+0x12c>)
 80018ca:	6013      	str	r3, [r2, #0]
	rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	2005      	movs	r0, #5
 80018d2:	f006 f9bf 	bl	8007c54 <xQueueGenericCreate>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <MX_USART1_UART_Init+0x130>)
 80018da:	6013      	str	r3, [r2, #0]
	//Habilita a interrupcao de recepcao pela USART2
	LL_USART_EnableIT_RXNE(USART1);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_USART1_UART_Init+0x128>)
 80018de:	f7ff fa4a 	bl	8000d76 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	37c0      	adds	r7, #192	; 0xc0
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013800 	.word	0x40013800
 80018f0:	200011dc 	.word	0x200011dc
 80018f4:	20001070 	.word	0x20001070

080018f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0b0      	sub	sp, #192	; 0xc0
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2288      	movs	r2, #136	; 0x88
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f008 f8a0 	bl	8009a70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f9d8 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f000 f943 	bl	8001bd0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800194a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800194e:	f7ff faab 	bl	8000ea8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff fa90 	bl	8000e78 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001958:	230c      	movs	r3, #12
 800195a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001976:	2307      	movs	r3, #7
 8001978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f005 faaa 	bl	8006ede <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800198a:	f7ff f91f 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 800198e:	4603      	mov	r3, r0
 8001990:	2200      	movs	r2, #0
 8001992:	2105      	movs	r1, #5
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f96f 	bl	8000c78 <NVIC_EncodePriority>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	2026      	movs	r0, #38	; 0x26
 80019a0:	f7ff f940 	bl	8000c24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80019a4:	2026      	movs	r0, #38	; 0x26
 80019a6:	f7ff f91f 	bl	8000be8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80019aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019c4:	230c      	movs	r3, #12
 80019c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 80019d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019da:	4619      	mov	r1, r3
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <MX_USART2_UART_Init+0x124>)
 80019de:	f005 ff21 	bl	8007824 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <MX_USART2_UART_Init+0x124>)
 80019e4:	f7ff f98b 	bl	8000cfe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_USART2_UART_Init+0x124>)
 80019ea:	f7ff f978 	bl	8000cde <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
    tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 80019ee:	2200      	movs	r2, #0
 80019f0:	2101      	movs	r1, #1
 80019f2:	2080      	movs	r0, #128	; 0x80
 80019f4:	f006 f92e 	bl	8007c54 <xQueueGenericCreate>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <MX_USART2_UART_Init+0x128>)
 80019fc:	6013      	str	r3, [r2, #0]
    rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 80019fe:	2200      	movs	r2, #0
 8001a00:	2101      	movs	r1, #1
 8001a02:	2005      	movs	r0, #5
 8001a04:	f006 f926 	bl	8007c54 <xQueueGenericCreate>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <MX_USART2_UART_Init+0x12c>)
 8001a0c:	6013      	str	r3, [r2, #0]
    //Habilita a interrupcao de recepcao pela USART2
    LL_USART_EnableIT_RXNE(USART2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_USART2_UART_Init+0x124>)
 8001a10:	f7ff f9b1 	bl	8000d76 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	37c0      	adds	r7, #192	; 0xc0
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	20001188 	.word	0x20001188
 8001a24:	2000118c 	.word	0x2000118c

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a35      	ldr	r2, [pc, #212]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <MX_GPIO_Init+0x108>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa8:	f002 fa72 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	4820      	ldr	r0, [pc, #128]	; (8001b34 <MX_GPIO_Init+0x10c>)
 8001ab2:	f002 fa6d 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001abc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	481a      	ldr	r0, [pc, #104]	; (8001b38 <MX_GPIO_Init+0x110>)
 8001ace:	f002 f89d 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001ad2:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f002 f88d 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001af2:	2310      	movs	r3, #16
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <MX_GPIO_Init+0x10c>)
 8001b06:	f002 f881 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_GPIO_Init+0x10c>)
 8001b22:	f002 f873 	bl	8003c0c <HAL_GPIO_Init>

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800

08001b3c <user_pwm_setvalue>:

/* USER CODE BEGIN 4 */
void user_pwm_setvalue(uint16_t value)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <user_pwm_setvalue+0x40>)
 8001b4a:	f003 ffeb 	bl	8005b24 <HAL_TIM_PWM_Stop>
   TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4e:	2360      	movs	r3, #96	; 0x60
 8001b50:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <user_pwm_setvalue+0x40>)
 8001b68:	f004 f992 	bl	8005e90 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <user_pwm_setvalue+0x40>)
 8001b70:	f003 fed2 	bl	8005918 <HAL_TIM_PWM_Start>
}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20001190 	.word	0x20001190

08001b80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f005 ff32 	bl	80079f2 <osDelay>
 8001b8e:	e7fb      	b.n	8001b88 <StartDefaultTask+0x8>

08001b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ba2:	f000 fa6b 	bl	800207c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == htim3.Instance) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d103      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x2a>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bb6:	f002 fa03 	bl	8003fc0 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END Callback 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	200010d8 	.word	0x200010d8
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6613      	str	r3, [r2, #96]	; 0x60
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f001 ffcd 	bl	8003bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <HAL_ADC_MspInit+0x110>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d136      	bne.n	8001cbc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001c56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c94:	230b      	movs	r3, #11
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca6:	f001 ffb1 	bl	8003c0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2105      	movs	r1, #5
 8001cae:	2012      	movs	r0, #18
 8001cb0:	f001 ff82 	bl	8003bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cb4:	2012      	movs	r0, #18
 8001cb6:	f001 ff9b 	bl	8003bf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cba:	e03a      	b.n	8001d32 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <HAL_ADC_MspInit+0x11c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d135      	bne.n	8001d32 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001cce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_ADC_MspInit+0x114>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_ADC_MspInit+0x118>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f001 ff75 	bl	8003c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	2012      	movs	r0, #18
 8001d28:	f001 ff46 	bl	8003bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d2c:	2012      	movs	r0, #18
 8001d2e:	f001 ff5f 	bl	8003bf0 <HAL_NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3730      	adds	r7, #48	; 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	50040000 	.word	0x50040000
 8001d40:	20000350 	.word	0x20000350
 8001d44:	40021000 	.word	0x40021000
 8001d48:	50040100 	.word	0x50040100

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d76:	e018      	b.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d113      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	201d      	movs	r0, #29
 8001da0:	f001 ff0a 	bl	8003bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001da4:	201d      	movs	r0, #29
 8001da6:	f001 ff23 	bl	8003bf0 <HAL_NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40000400 	.word	0x40000400

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d11c      	bne.n	8001e18 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_TIM_MspPostInit+0x64>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_TIM_MspPostInit+0x64>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_MspPostInit+0x64>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df6:	2301      	movs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f001 fefa 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	2019      	movs	r0, #25
 8001e3a:	f001 febd 	bl	8003bb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e3e:	2019      	movs	r0, #25
 8001e40:	f001 fed6 	bl	8003bf0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_InitTick+0x9c>)
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_InitTick+0x9c>)
 8001e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_InitTick+0x9c>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e5c:	f107 0210 	add.w	r2, r7, #16
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 feb0 	bl	8004bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e6c:	f002 fe98 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 8001e70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_InitTick+0xa0>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_InitTick+0xa8>)
 8001e84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001ea2:	f003 fbe1 	bl	8005668 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_InitTick+0xa4>)
 8001eae:	f003 fc33 	bl	8005718 <HAL_TIM_Base_Start_IT>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	200011e0 	.word	0x200011e0
 8001ecc:	40012c00 	.word	0x40012c00

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <ADC1_2_IRQHandler+0x14>)
 8001f02:	f000 fdeb 	bl	8002adc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f06:	4803      	ldr	r0, [pc, #12]	; (8001f14 <ADC1_2_IRQHandler+0x18>)
 8001f08:	f000 fde8 	bl	8002adc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20001124 	.word	0x20001124
 8001f14:	20001074 	.word	0x20001074

08001f18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f1e:	f003 fe97 	bl	8005c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200011e0 	.word	0x200011e0

08001f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM3_IRQHandler+0x10>)
 8001f32:	f003 fe8d 	bl	8005c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200010d8 	.word	0x200010d8

08001f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001f44:	f7fe ffe0 	bl	8000f08 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8001f50:	f7ff f83a 	bl	8000fc8 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f007 fd38 	bl	80099fc <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20018000 	.word	0x20018000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000354 	.word	0x20000354
 8001fc0:	20001240 	.word	0x20001240

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fec:	f7ff ffea 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopForever+0xe>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopForever+0x16>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f007 fcf7 	bl	8009a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201a:	f7ff f95b 	bl	80012d4 <main>

0800201e <LoopForever>:

LoopForever:
    b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800202c:	0800b488 	.word	0x0800b488
  ldr r2, =_sbss
 8002030:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002034:	20001240 	.word	0x20001240

08002038 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC3_IRQHandler>
	...

0800203c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_Init+0x3c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <HAL_Init+0x3c>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002052:	2003      	movs	r0, #3
 8002054:	f001 fda5 	bl	8003ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002058:	200f      	movs	r0, #15
 800205a:	f7ff fee3 	bl	8001e24 <HAL_InitTick>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	e001      	b.n	800206e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800206a:	f7ff fdb7 	bl	8001bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800206e:	79fb      	ldrb	r3, [r7, #7]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x20>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x24>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_IncTick+0x24>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000008 	.word	0x20000008
 80020a0:	2000122c 	.word	0x2000122c

080020a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_GetTick+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	2000122c 	.word	0x2000122c

080020bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff ffee 	bl	80020a4 <HAL_GetTick>
 80020c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d005      	beq.n	80020e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_Delay+0x44>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e2:	bf00      	nop
 80020e4:	f7ff ffde 	bl	80020a4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d8f7      	bhi.n	80020e4 <HAL_Delay+0x28>
  {
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008

08002104 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3360      	adds	r3, #96	; 0x60
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <LL_ADC_SetOffset+0x44>)
 800218e:	4013      	ands	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	4313      	orrs	r3, r2
 800219c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	03fff000 	.word	0x03fff000

080021b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	461a      	mov	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3360      	adds	r3, #96	; 0x60
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3330      	adds	r3, #48	; 0x30
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	4413      	add	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	211f      	movs	r1, #31
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 011f 	and.w	r1, r3, #31
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3314      	adds	r3, #20
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	0e5b      	lsrs	r3, r3, #25
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	0d1b      	lsrs	r3, r3, #20
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2107      	movs	r1, #7
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0d1b      	lsrs	r3, r3, #20
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	431a      	orrs	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0318 	and.w	r3, r3, #24
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002334:	40d9      	lsrs	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	400b      	ands	r3, r1
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	0007ffff 	.word	0x0007ffff

08002358 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 031f 	and.w	r3, r3, #31
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c8:	d101      	bne.n	80023ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002418:	d101      	bne.n	800241e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800243c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <LL_ADC_IsEnabled+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_ADC_IsEnabled+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800248a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248e:	f043 0204 	orr.w	r2, r3, #4
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d101      	bne.n	80024ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d101      	bne.n	80024e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e136      	b.n	8002778 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fb87 	bl	8001c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff3f 	bl	80023b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff25 	bl	8002390 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff5a 	bl	8002404 <LL_ADC_IsInternalRegulatorEnabled>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff3e 	bl	80023dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002560:	4b87      	ldr	r3, [pc, #540]	; (8002780 <HAL_ADC_Init+0x290>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	4a87      	ldr	r2, [pc, #540]	; (8002784 <HAL_ADC_Init+0x294>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002574:	e002      	b.n	800257c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff3c 	bl	8002404 <LL_ADC_IsInternalRegulatorEnabled>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10d      	bne.n	80025ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff75 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 80cf 	bne.w	8002766 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80cb 	bne.w	8002766 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025d8:	f043 0202 	orr.w	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff35 	bl	8002454 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d115      	bne.n	800261c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f0:	4865      	ldr	r0, [pc, #404]	; (8002788 <HAL_ADC_Init+0x298>)
 80025f2:	f7ff ff2f 	bl	8002454 <LL_ADC_IsEnabled>
 80025f6:	4604      	mov	r4, r0
 80025f8:	4864      	ldr	r0, [pc, #400]	; (800278c <HAL_ADC_Init+0x29c>)
 80025fa:	f7ff ff2b 	bl	8002454 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	431c      	orrs	r4, r3
 8002602:	4863      	ldr	r0, [pc, #396]	; (8002790 <HAL_ADC_Init+0x2a0>)
 8002604:	f7ff ff26 	bl	8002454 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	485f      	ldr	r0, [pc, #380]	; (8002794 <HAL_ADC_Init+0x2a4>)
 8002618:	f7ff fd74 	bl	8002104 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e5b      	ldrb	r3, [r3, #25]
 8002620:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002626:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800262c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002632:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d106      	bne.n	8002658 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	3b01      	subs	r3, #1
 8002650:	045b      	lsls	r3, r3, #17
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_ADC_Init+0x2a8>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	430b      	orrs	r3, r1
 8002686:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff08 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002692:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff15 	bl	80024c8 <LL_ADC_INJ_IsConversionOngoing>
 800269e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d13d      	bne.n	8002722 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d13a      	bne.n	8002722 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	69b9      	ldr	r1, [r7, #24]
 80026d2:	430b      	orrs	r3, r1
 80026d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d118      	bne.n	8002712 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002702:	430a      	orrs	r2, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	e007      	b.n	8002722 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10c      	bne.n	8002744 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f023 010f 	bic.w	r1, r3, #15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
 8002742:	e007      	b.n	8002754 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020f 	bic.w	r2, r2, #15
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f023 0303 	bic.w	r3, r3, #3
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
 8002764:	e007      	b.n	8002776 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002776:	7ffb      	ldrb	r3, [r7, #31]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	20000000 	.word	0x20000000
 8002784:	053e2d63 	.word	0x053e2d63
 8002788:	50040000 	.word	0x50040000
 800278c:	50040100 	.word	0x50040100
 8002790:	50040200 	.word	0x50040200
 8002794:	50040300 	.word	0x50040300
 8002798:	fff0c007 	.word	0xfff0c007

0800279c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a4:	4857      	ldr	r0, [pc, #348]	; (8002904 <HAL_ADC_Start+0x168>)
 80027a6:	f7ff fdd7 	bl	8002358 <LL_ADC_GetMultimode>
 80027aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fe76 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 809c 	bne.w	80028f6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_Start+0x30>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e097      	b.n	80028fc <HAL_ADC_Start+0x160>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 ffa9 	bl	800372c <ADC_Enable>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 8083 	bne.w	80028ec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_ADC_Start+0x16c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d002      	beq.n	800280a <HAL_ADC_Start+0x6e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	e000      	b.n	800280c <HAL_ADC_Start+0x70>
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_ADC_Start+0x170>)
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4293      	cmp	r3, r2
 8002812:	d002      	beq.n	800281a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d106      	bne.n	8002842 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f023 0206 	bic.w	r2, r3, #6
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	; 0x58
 8002840:	e002      	b.n	8002848 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	221c      	movs	r2, #28
 800284e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_ADC_Start+0x16c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d002      	beq.n	8002868 <HAL_ADC_Start+0xcc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	e000      	b.n	800286a <HAL_ADC_Start+0xce>
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_ADC_Start+0x170>)
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4293      	cmp	r3, r2
 8002870:	d008      	beq.n	8002884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d002      	beq.n	8002884 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d114      	bne.n	80028ae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800289a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fde7 	bl	800247a <LL_ADC_REG_StartConversion>
 80028ac:	e025      	b.n	80028fa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_ADC_Start+0x16c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d002      	beq.n	80028ca <HAL_ADC_Start+0x12e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e000      	b.n	80028cc <HAL_ADC_Start+0x130>
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_ADC_Start+0x170>)
 80028cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00f      	beq.n	80028fa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
 80028ea:	e006      	b.n	80028fa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028f4:	e001      	b.n	80028fa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	50040300 	.word	0x50040300
 8002908:	50040100 	.word	0x50040100
 800290c:	50040000 	.word	0x50040000

08002910 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800291a:	4866      	ldr	r0, [pc, #408]	; (8002ab4 <HAL_ADC_PollForConversion+0x1a4>)
 800291c:	f7ff fd1c 	bl	8002358 <LL_ADC_GetMultimode>
 8002920:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d102      	bne.n	8002930 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800292a:	2308      	movs	r3, #8
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e02a      	b.n	8002986 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d002      	beq.n	8002942 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b09      	cmp	r3, #9
 8002940:	d111      	bne.n	8002966 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0a4      	b.n	8002aaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002960:	2304      	movs	r3, #4
 8002962:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002964:	e00f      	b.n	8002986 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002966:	4853      	ldr	r0, [pc, #332]	; (8002ab4 <HAL_ADC_PollForConversion+0x1a4>)
 8002968:	f7ff fd04 	bl	8002374 <LL_ADC_GetMultiDMATransfer>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e093      	b.n	8002aaa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002982:	2304      	movs	r3, #4
 8002984:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002986:	f7ff fb8d 	bl	80020a4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800298c:	e021      	b.n	80029d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d01d      	beq.n	80029d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002996:	f7ff fb85 	bl	80020a4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <HAL_ADC_PollForConversion+0x9c>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d112      	bne.n	80029d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10b      	bne.n	80029d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e06b      	b.n	8002aaa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0d6      	beq.n	800298e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fc10 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01c      	beq.n	8002a36 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e5b      	ldrb	r3, [r3, #25]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d118      	bne.n	8002a36 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d111      	bne.n	8002a36 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_ADC_PollForConversion+0x1a8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d002      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x136>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_PollForConversion+0x138>
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_ADC_PollForConversion+0x1ac>)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d008      	beq.n	8002a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d002      	beq.n	8002a62 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	d104      	bne.n	8002a6c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e00c      	b.n	8002a86 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_ADC_PollForConversion+0x1a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d002      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x16c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_PollForConversion+0x16e>
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_ADC_PollForConversion+0x1ac>)
 8002a7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d104      	bne.n	8002a96 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e008      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	220c      	movs	r2, #12
 8002aa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	50040300 	.word	0x50040300
 8002ab8:	50040100 	.word	0x50040100
 8002abc:	50040000 	.word	0x50040000

08002ac0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af8:	4882      	ldr	r0, [pc, #520]	; (8002d04 <HAL_ADC_IRQHandler+0x228>)
 8002afa:	f7ff fc2d 	bl	8002358 <LL_ADC_GetMultimode>
 8002afe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x5e>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fed1 	bl	80038d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x72>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8083 	beq.w	8002c60 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d07d      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb48 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d062      	beq.n	8002c52 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_ADC_IRQHandler+0x22c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d002      	beq.n	8002b9c <HAL_ADC_IRQHandler+0xc0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_IRQHandler+0xc2>
 8002b9c:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_ADC_IRQHandler+0x230>)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d008      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d002      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d104      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	e00c      	b.n	8002bdc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_ADC_IRQHandler+0x22c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_ADC_IRQHandler+0xf6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e000      	b.n	8002bd4 <HAL_ADC_IRQHandler+0xf8>
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <HAL_ADC_IRQHandler+0x230>)
 8002bd4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d135      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d12e      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fc52 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11a      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 020c 	bic.w	r2, r2, #12
 8002c12:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d112      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
 8002c38:	e00b      	b.n	8002c52 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f95c 	bl	8002f10 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x198>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 809f 	beq.w	8002dbe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8099 	beq.w	8002dbe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff faf3 	bl	8002294 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002cae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff faae 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_ADC_IRQHandler+0x22c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d002      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x1f0>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e000      	b.n	8002cce <HAL_ADC_IRQHandler+0x1f2>
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_ADC_IRQHandler+0x230>)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d008      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d002      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d104      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	e013      	b.n	8002d1a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_ADC_IRQHandler+0x22c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x234>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_ADC_IRQHandler+0x236>
 8002d02:	bf00      	nop
 8002d04:	50040300 	.word	0x50040300
 8002d08:	50040100 	.word	0x50040100
 8002d0c:	50040000 	.word	0x50040000
 8002d10:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_ADC_IRQHandler+0x42c>)
 8002d12:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d047      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x25e>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d03f      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d13a      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d133      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12e      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fbb6 	bl	80024c8 <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11a      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d70:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d112      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
 8002d96:	e00b      	b.n	8002db0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fd67 	bl	8003884 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2260      	movs	r2, #96	; 0x60
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d011      	beq.n	8002dec <HAL_ADC_IRQHandler+0x310>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f8a0 	bl	8002f24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x340>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fd4d 	bl	80038ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x370>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fd3f 	bl	80038c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x3e8>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d031      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e014      	b.n	8002e98 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e74:	4825      	ldr	r0, [pc, #148]	; (8002f0c <HAL_ADC_IRQHandler+0x430>)
 8002e76:	f7ff fa7d 	bl	8002374 <LL_ADC_GetMultiDMATransfer>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	e008      	b.n	8002e98 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e94:	2301      	movs	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10e      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f043 0202 	orr.w	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f83e 	bl	8002f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x424>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f043 0208 	orr.w	r2, r3, #8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fccc 	bl	8003898 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f00:	bf00      	nop
 8002f02:	3728      	adds	r7, #40	; 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	50040000 	.word	0x50040000
 8002f0c:	50040300 	.word	0x50040300

08002f10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0b6      	sub	sp, #216	; 0xd8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x22>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e3c7      	b.n	80036fe <HAL_ADC_ConfigChannel+0x7b2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fa91 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 83a8 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d824      	bhi.n	8002fda <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	3b02      	subs	r3, #2
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d81b      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0x86>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_ADC_ConfigChannel+0x54>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fb9 	.word	0x08002fb9
 8002fa8:	08002fc1 	.word	0x08002fc1
 8002fac:	08002fc9 	.word	0x08002fc9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	605a      	str	r2, [r3, #4]
          break;
 8002fb6:	e011      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2212      	movs	r2, #18
 8002fbc:	605a      	str	r2, [r3, #4]
          break;
 8002fbe:	e00d      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2218      	movs	r2, #24
 8002fc4:	605a      	str	r2, [r3, #4]
          break;
 8002fc6:	e009      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	605a      	str	r2, [r3, #4]
          break;
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	605a      	str	r2, [r3, #4]
          break;
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002fda:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f7ff f927 	bl	800223c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa55 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fa61 	bl	80024c8 <LL_ADC_INJ_IsConversionOngoing>
 8003006:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 81a6 	bne.w	8003360 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 81a1 	bne.w	8003360 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	461a      	mov	r2, r3
 800302c:	f7ff f945 	bl	80022ba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00a      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6919      	ldr	r1, [r3, #16]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003062:	f7ff f883 	bl	800216c <LL_ADC_SetOffset>
 8003066:	e17b      	b.n	8003360 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f8a0 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x148>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f895 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	e01e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x186>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f88a 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80030b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80030ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e004      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 80030c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x19e>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	e018      	b.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800310e:	2320      	movs	r3, #32
 8003110:	e004      	b.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800311c:	429a      	cmp	r2, r3
 800311e:	d106      	bne.n	800312e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f859 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f83d 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_ADC_ConfigChannel+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f832 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	e01e      	b.n	8003198 <HAL_ADC_ConfigChannel+0x24c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f827 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800317c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e004      	b.n	8003196 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800318c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x264>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	e018      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x296>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80031d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d106      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fff6 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ffda 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x2d4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe ffcf 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 021f 	and.w	r2, r3, #31
 800321e:	e01e      	b.n	800325e <HAL_ADC_ConfigChannel+0x312>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe ffc4 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800323e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e004      	b.n	800325c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x32a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	e016      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x358>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800328a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800328e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e004      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800329a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2102      	movs	r1, #2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ff95 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2103      	movs	r1, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ff79 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x396>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2103      	movs	r1, #3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe ff6e 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	e017      	b.n	8003312 <HAL_ADC_ConfigChannel+0x3c6>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2103      	movs	r1, #3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe ff63 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d105      	bne.n	800332a <HAL_ADC_ConfigChannel+0x3de>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	e011      	b.n	800334e <HAL_ADC_ConfigChannel+0x402>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800333a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e003      	b.n	800334e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800334e:	429a      	cmp	r2, r3
 8003350:	d106      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	2103      	movs	r1, #3
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe ff40 	bl	80021e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f875 	bl	8002454 <LL_ADC_IsEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 813f 	bne.w	80035f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fe ffc6 	bl	8002310 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a8e      	ldr	r2, [pc, #568]	; (80035c4 <HAL_ADC_ConfigChannel+0x678>)
 800338a:	4293      	cmp	r3, r2
 800338c:	f040 8130 	bne.w	80035f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x46c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	3301      	adds	r3, #1
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	bf94      	ite	ls
 80033b0:	2301      	movls	r3, #1
 80033b2:	2300      	movhi	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e019      	b.n	80033ec <HAL_ADC_ConfigChannel+0x4a0>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80033d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	bf94      	ite	ls
 80033e6:	2301      	movls	r3, #1
 80033e8:	2300      	movhi	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d079      	beq.n	80034e4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x4c0>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	3301      	adds	r3, #1
 8003404:	069b      	lsls	r3, r3, #26
 8003406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340a:	e015      	b.n	8003438 <HAL_ADC_ConfigChannel+0x4ec>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800341e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003424:	2320      	movs	r3, #32
 8003426:	e003      	b.n	8003430 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x50c>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	e017      	b.n	8003488 <HAL_ADC_ConfigChannel+0x53c>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800346a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	ea42 0103 	orr.w	r1, r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x562>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	e018      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x594>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e003      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e0:	430b      	orrs	r3, r1
 80034e2:	e080      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x5b4>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fe:	e015      	b.n	800352c <HAL_ADC_ConfigChannel+0x5e0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	069b      	lsls	r3, r3, #26
 8003528:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_ADC_ConfigChannel+0x600>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	e017      	b.n	800357c <HAL_ADC_ConfigChannel+0x630>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	61fb      	str	r3, [r7, #28]
  return result;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	ea42 0103 	orr.w	r1, r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x65c>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	3301      	adds	r3, #1
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	3b1e      	subs	r3, #30
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a6:	e01d      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x698>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	613b      	str	r3, [r7, #16]
  return result;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e005      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x684>
 80035c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 021f 	and.w	r2, r3, #31
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	3b1e      	subs	r3, #30
 80035de:	051b      	lsls	r3, r3, #20
 80035e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e4:	430b      	orrs	r3, r1
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fe fe65 	bl	80022ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b44      	ldr	r3, [pc, #272]	; (8003708 <HAL_ADC_ConfigChannel+0x7bc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07a      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035fc:	4843      	ldr	r0, [pc, #268]	; (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 80035fe:	f7fe fda7 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8003602:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <HAL_ADC_ConfigChannel+0x7c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d12c      	bne.n	800366a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d126      	bne.n	800366a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <HAL_ADC_ConfigChannel+0x7c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x6e4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <HAL_ADC_ConfigChannel+0x7cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d15d      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003638:	4619      	mov	r1, r3
 800363a:	4834      	ldr	r0, [pc, #208]	; (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 800363c:	f7fe fd75 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_ADC_ConfigChannel+0x7d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	4a36      	ldr	r2, [pc, #216]	; (8003720 <HAL_ADC_ConfigChannel+0x7d4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003668:	e040      	b.n	80036ec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_ADC_ConfigChannel+0x7d8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d118      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x75a>
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d112      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <HAL_ADC_ConfigChannel+0x7c8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_ADC_ConfigChannel+0x748>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_ADC_ConfigChannel+0x7cc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d12d      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369c:	4619      	mov	r1, r3
 800369e:	481b      	ldr	r0, [pc, #108]	; (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 80036a0:	f7fe fd43 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036a4:	e024      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_ADC_ConfigChannel+0x7dc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d120      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11a      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_ADC_ConfigChannel+0x7c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d115      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ce:	4619      	mov	r1, r3
 80036d0:	480e      	ldr	r0, [pc, #56]	; (800370c <HAL_ADC_ConfigChannel+0x7c0>)
 80036d2:	f7fe fd2a 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e00c      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	37d8      	adds	r7, #216	; 0xd8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	80080000 	.word	0x80080000
 800370c:	50040300 	.word	0x50040300
 8003710:	c7520000 	.word	0xc7520000
 8003714:	50040000 	.word	0x50040000
 8003718:	50040200 	.word	0x50040200
 800371c:	20000000 	.word	0x20000000
 8003720:	053e2d63 	.word	0x053e2d63
 8003724:	cb840000 	.word	0xcb840000
 8003728:	80000001 	.word	0x80000001

0800372c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fe89 	bl	8002454 <LL_ADC_IsEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d169      	bne.n	800381c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	4b36      	ldr	r3, [pc, #216]	; (8003828 <ADC_Enable+0xfc>)
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e055      	b.n	800381e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fe58 	bl	800242c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800377c:	482b      	ldr	r0, [pc, #172]	; (800382c <ADC_Enable+0x100>)
 800377e:	f7fe fce7 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 8003782:	4603      	mov	r3, r0
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800378c:	4b28      	ldr	r3, [pc, #160]	; (8003830 <ADC_Enable+0x104>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	4a28      	ldr	r2, [pc, #160]	; (8003834 <ADC_Enable+0x108>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037a6:	e002      	b.n	80037ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f9      	bne.n	80037a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fc76 	bl	80020a4 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ba:	e028      	b.n	800380e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fe47 	bl	8002454 <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fe2b 	bl	800242c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037d6:	f7fe fc65 	bl	80020a4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d914      	bls.n	800380e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d00d      	beq.n	800380e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e007      	b.n	800381e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d1cf      	bne.n	80037bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	8000003f 	.word	0x8000003f
 800382c:	50040300 	.word	0x50040300
 8003830:	20000000 	.word	0x20000000
 8003834:	053e2d63 	.word	0x053e2d63

08003838 <LL_ADC_IsEnabled>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <LL_ADC_IsEnabled+0x18>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <LL_ADC_IsEnabled+0x1a>
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_ADC_REG_IsConversionOngoing>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d101      	bne.n	8003876 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b09f      	sub	sp, #124	; 0x7c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003902:	2302      	movs	r3, #2
 8003904:	e093      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800390e:	2300      	movs	r3, #0
 8003910:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003912:	2300      	movs	r3, #0
 8003914:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003920:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e001      	b.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e072      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff87 	bl	800385e <LL_ADC_REG_IsConversionOngoing>
 8003950:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff81 	bl	800385e <LL_ADC_REG_IsConversionOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d154      	bne.n	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	2b00      	cmp	r3, #0
 8003966:	d151      	bne.n	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800396a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02c      	beq.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003986:	035b      	lsls	r3, r3, #13
 8003988:	430b      	orrs	r3, r1
 800398a:	431a      	orrs	r2, r3
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003990:	4829      	ldr	r0, [pc, #164]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003992:	f7ff ff51 	bl	8003838 <LL_ADC_IsEnabled>
 8003996:	4604      	mov	r4, r0
 8003998:	4828      	ldr	r0, [pc, #160]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800399a:	f7ff ff4d 	bl	8003838 <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	431c      	orrs	r4, r3
 80039a2:	4828      	ldr	r0, [pc, #160]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80039a4:	f7ff ff48 	bl	8003838 <LL_ADC_IsEnabled>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4323      	orrs	r3, r4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d137      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039b8:	f023 030f 	bic.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	6811      	ldr	r1, [r2, #0]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	431a      	orrs	r2, r3
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039cc:	e028      	b.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039da:	4817      	ldr	r0, [pc, #92]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039dc:	f7ff ff2c 	bl	8003838 <LL_ADC_IsEnabled>
 80039e0:	4604      	mov	r4, r0
 80039e2:	4816      	ldr	r0, [pc, #88]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039e4:	f7ff ff28 	bl	8003838 <LL_ADC_IsEnabled>
 80039e8:	4603      	mov	r3, r0
 80039ea:	431c      	orrs	r4, r3
 80039ec:	4815      	ldr	r0, [pc, #84]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80039ee:	f7ff ff23 	bl	8003838 <LL_ADC_IsEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4323      	orrs	r3, r4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a02:	f023 030f 	bic.w	r3, r3, #15
 8003a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a08:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0a:	e009      	b.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a1e:	e000      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	377c      	adds	r7, #124	; 0x7c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	50040000 	.word	0x50040000
 8003a3c:	50040100 	.word	0x50040100
 8003a40:	50040300 	.word	0x50040300
 8003a44:	50040200 	.word	0x50040200

08003a48 <__NVIC_SetPriorityGrouping>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a64:	4013      	ands	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	60d3      	str	r3, [r2, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <__NVIC_GetPriorityGrouping>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	f003 0307 	and.w	r3, r3, #7
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_EnableIRQ>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	db0b      	blt.n	8003ad6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	4907      	ldr	r1, [pc, #28]	; (8003ae4 <__NVIC_EnableIRQ+0x38>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2001      	movs	r0, #1
 8003ace:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000e100 	.word	0xe000e100

08003ae8 <__NVIC_SetPriority>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	db0a      	blt.n	8003b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	490c      	ldr	r1, [pc, #48]	; (8003b34 <__NVIC_SetPriority+0x4c>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	0112      	lsls	r2, r2, #4
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b10:	e00a      	b.n	8003b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4908      	ldr	r1, [pc, #32]	; (8003b38 <__NVIC_SetPriority+0x50>)
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	3b04      	subs	r3, #4
 8003b20:	0112      	lsls	r2, r2, #4
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	440b      	add	r3, r1
 8003b26:	761a      	strb	r2, [r3, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000e100 	.word	0xe000e100
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <NVIC_EncodePriority>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f1c3 0307 	rsb	r3, r3, #7
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf28      	it	cs
 8003b5a:	2304      	movcs	r3, #4
 8003b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d902      	bls.n	8003b6c <NVIC_EncodePriority+0x30>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3b03      	subs	r3, #3
 8003b6a:	e000      	b.n	8003b6e <NVIC_EncodePriority+0x32>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	f04f 32ff 	mov.w	r2, #4294967295
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	401a      	ands	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b84:	f04f 31ff 	mov.w	r1, #4294967295
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43d9      	mvns	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b94:	4313      	orrs	r3, r2
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3724      	adds	r7, #36	; 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff4c 	bl	8003a48 <__NVIC_SetPriorityGrouping>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bca:	f7ff ff61 	bl	8003a90 <__NVIC_GetPriorityGrouping>
 8003bce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f7ff ffb1 	bl	8003b3c <NVIC_EncodePriority>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff80 	bl	8003ae8 <__NVIC_SetPriority>
}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff54 	bl	8003aac <__NVIC_EnableIRQ>
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1a:	e17f      	b.n	8003f1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8171 	beq.w	8003f16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d005      	beq.n	8003c4c <HAL_GPIO_Init+0x40>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d130      	bne.n	8003cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c82:	2201      	movs	r2, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0201 	and.w	r2, r3, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d118      	bne.n	8003cec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f003 0201 	and.w	r2, r3, #1
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d017      	beq.n	8003d28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d123      	bne.n	8003d7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	08da      	lsrs	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3208      	adds	r2, #8
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	08da      	lsrs	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3208      	adds	r2, #8
 8003d76:	6939      	ldr	r1, [r7, #16]
 8003d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0203 	and.w	r2, r3, #3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80ac 	beq.w	8003f16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbe:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <HAL_GPIO_Init+0x330>)
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	4a5e      	ldr	r2, [pc, #376]	; (8003f3c <HAL_GPIO_Init+0x330>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8003dca:	4b5c      	ldr	r3, [pc, #368]	; (8003f3c <HAL_GPIO_Init+0x330>)
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd6:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e00:	d025      	beq.n	8003e4e <HAL_GPIO_Init+0x242>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_GPIO_Init+0x338>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01f      	beq.n	8003e4a <HAL_GPIO_Init+0x23e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <HAL_GPIO_Init+0x33c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d019      	beq.n	8003e46 <HAL_GPIO_Init+0x23a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4d      	ldr	r2, [pc, #308]	; (8003f4c <HAL_GPIO_Init+0x340>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_GPIO_Init+0x236>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4c      	ldr	r2, [pc, #304]	; (8003f50 <HAL_GPIO_Init+0x344>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00d      	beq.n	8003e3e <HAL_GPIO_Init+0x232>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4b      	ldr	r2, [pc, #300]	; (8003f54 <HAL_GPIO_Init+0x348>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <HAL_GPIO_Init+0x22e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4a      	ldr	r2, [pc, #296]	; (8003f58 <HAL_GPIO_Init+0x34c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_GPIO_Init+0x22a>
 8003e32:	2306      	movs	r3, #6
 8003e34:	e00c      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e36:	2307      	movs	r3, #7
 8003e38:	e00a      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	e008      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e006      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e42:	2303      	movs	r3, #3
 8003e44:	e004      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e002      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_GPIO_Init+0x244>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	f002 0203 	and.w	r2, r2, #3
 8003e56:	0092      	lsls	r2, r2, #2
 8003e58:	4093      	lsls	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e60:	4937      	ldr	r1, [pc, #220]	; (8003f40 <HAL_GPIO_Init+0x334>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3302      	adds	r3, #2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e92:	4a32      	ldr	r2, [pc, #200]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e98:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ebc:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f10:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <HAL_GPIO_Init+0x350>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f47f ae78 	bne.w	8003c1c <HAL_GPIO_Init+0x10>
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010000 	.word	0x40010000
 8003f44:	48000400 	.word	0x48000400
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	48000c00 	.word	0x48000c00
 8003f50:	48001000 	.word	0x48001000
 8003f54:	48001400 	.word	0x48001400
 8003f58:	48001800 	.word	0x48001800
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e001      	b.n	8003f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fac:	e002      	b.n	8003fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fd2:	887a      	ldrh	r2, [r7, #2]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	041a      	lsls	r2, r3, #16
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43d9      	mvns	r1, r3
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_PWREx_GetVoltageRange+0x18>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40007000 	.word	0x40007000

08004010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401e:	d130      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004020:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d038      	beq.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004036:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2232      	movs	r2, #50	; 0x32
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0c9b      	lsrs	r3, r3, #18
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004054:	e002      	b.n	800405c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b01      	subs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d102      	bne.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x60>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f2      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d110      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d007      	beq.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004098:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800409e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40007000 	.word	0x40007000
 80040b4:	20000000 	.word	0x20000000
 80040b8:	431bde83 	.word	0x431bde83

080040bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e3c6      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ce:	4ba1      	ldr	r3, [pc, #644]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d8:	4b9e      	ldr	r3, [pc, #632]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80e4 	beq.w	80042b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_RCC_OscConfig+0x4a>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	f040 808b 	bne.w	8004214 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 8087 	bne.w	8004214 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004106:	4b93      	ldr	r3, [pc, #588]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x62>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e39e      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1a      	ldr	r2, [r3, #32]
 8004122:	4b8c      	ldr	r3, [pc, #560]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <HAL_RCC_OscConfig+0x7c>
 800412e:	4b89      	ldr	r3, [pc, #548]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004136:	e005      	b.n	8004144 <HAL_RCC_OscConfig+0x88>
 8004138:	4b86      	ldr	r3, [pc, #536]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004144:	4293      	cmp	r3, r2
 8004146:	d223      	bcs.n	8004190 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd6f 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e37f      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415c:	4b7d      	ldr	r3, [pc, #500]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7c      	ldr	r2, [pc, #496]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4977      	ldr	r1, [pc, #476]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800417a:	4b76      	ldr	r3, [pc, #472]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4972      	ldr	r1, [pc, #456]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]
 800418e:	e025      	b.n	80041dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004190:	4b70      	ldr	r3, [pc, #448]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6f      	ldr	r2, [pc, #444]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004196:	f043 0308 	orr.w	r3, r3, #8
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b6d      	ldr	r3, [pc, #436]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	496a      	ldr	r1, [pc, #424]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ae:	4b69      	ldr	r3, [pc, #420]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	4965      	ldr	r1, [pc, #404]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd2f 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e33f      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041dc:	f000 fc48 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	495a      	ldr	r1, [pc, #360]	; (8004358 <HAL_RCC_OscConfig+0x29c>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	4a58      	ldr	r2, [pc, #352]	; (800435c <HAL_RCC_OscConfig+0x2a0>)
 80041fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041fc:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_RCC_OscConfig+0x2a4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fe0f 	bl	8001e24 <HAL_InitTick>
 8004206:	4603      	mov	r3, r0
 8004208:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d052      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	e323      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d032      	beq.n	8004282 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800421c:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004228:	f7fd ff3c 	bl	80020a4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004230:	f7fd ff38 	bl	80020a4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e30c      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a40      	ldr	r2, [pc, #256]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004254:	f043 0308 	orr.w	r3, r3, #8
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	493b      	ldr	r1, [pc, #236]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426c:	4b39      	ldr	r3, [pc, #228]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	4936      	ldr	r1, [pc, #216]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	e01a      	b.n	80042b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a33      	ldr	r2, [pc, #204]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800428e:	f7fd ff09 	bl	80020a4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004296:	f7fd ff05 	bl	80020a4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e2d9      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042a8:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x1da>
 80042b4:	e000      	b.n	80042b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d074      	beq.n	80043ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x21a>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d10e      	bne.n	80042ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d10b      	bne.n	80042ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d6:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d064      	beq.n	80043ac <HAL_RCC_OscConfig+0x2f0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d160      	bne.n	80043ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e2b6      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x24a>
 80042f8:	4b16      	ldr	r3, [pc, #88]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e01d      	b.n	8004342 <HAL_RCC_OscConfig+0x286>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430e:	d10c      	bne.n	800432a <HAL_RCC_OscConfig+0x26e>
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0f      	ldr	r2, [pc, #60]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e00b      	b.n	8004342 <HAL_RCC_OscConfig+0x286>
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a06      	ldr	r2, [pc, #24]	; (8004354 <HAL_RCC_OscConfig+0x298>)
 800433c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004340:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01c      	beq.n	8004384 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd feab 	bl	80020a4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004350:	e011      	b.n	8004376 <HAL_RCC_OscConfig+0x2ba>
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	0800b364 	.word	0x0800b364
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fd fe9e 	bl	80020a4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e272      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004376:	4baf      	ldr	r3, [pc, #700]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x2a8>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fe8e 	bl	80020a4 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fd fe8a 	bl	80020a4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e25e      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800439e:	4ba5      	ldr	r3, [pc, #660]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x2d0>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d060      	beq.n	800447c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x310>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d119      	bne.n	80043fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d116      	bne.n	80043fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043cc:	4b99      	ldr	r3, [pc, #612]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_OscConfig+0x328>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e23b      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b93      	ldr	r3, [pc, #588]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	4990      	ldr	r1, [pc, #576]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f8:	e040      	b.n	800447c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d023      	beq.n	800444a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004402:	4b8c      	ldr	r3, [pc, #560]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a8b      	ldr	r2, [pc, #556]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fd fe49 	bl	80020a4 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7fd fe45 	bl	80020a4 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e219      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004428:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	497c      	ldr	r1, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	e018      	b.n	800447c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a79      	ldr	r2, [pc, #484]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fe25 	bl	80020a4 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd fe21 	bl	80020a4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1f5      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004470:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d03c      	beq.n	8004502 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004490:	4b68      	ldr	r3, [pc, #416]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	4a67      	ldr	r2, [pc, #412]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd fe00 	bl	80020a4 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fd fdfc 	bl	80020a4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1d0      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ba:	4b5e      	ldr	r3, [pc, #376]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <HAL_RCC_OscConfig+0x3ec>
 80044c8:	e01b      	b.n	8004502 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ca:	4b5a      	ldr	r3, [pc, #360]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80044cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d0:	4a58      	ldr	r2, [pc, #352]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fd fde3 	bl	80020a4 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fd fddf 	bl	80020a4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1b3      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f4:	4b4f      	ldr	r3, [pc, #316]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ef      	bne.n	80044e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80a6 	beq.w	800465c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004510:	2300      	movs	r3, #0
 8004512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004514:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10d      	bne.n	800453c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	4a43      	ldr	r2, [pc, #268]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6593      	str	r3, [r2, #88]	; 0x58
 800452c:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453c:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <HAL_RCC_OscConfig+0x57c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d118      	bne.n	800457a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_OscConfig+0x57c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_RCC_OscConfig+0x57c>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004554:	f7fd fda6 	bl	80020a4 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fd fda2 	bl	80020a4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e176      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <HAL_RCC_OscConfig+0x57c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <HAL_RCC_OscConfig+0x4d8>
 8004582:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004592:	e024      	b.n	80045de <HAL_RCC_OscConfig+0x522>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b05      	cmp	r3, #5
 800459a:	d110      	bne.n	80045be <HAL_RCC_OscConfig+0x502>
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ac:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045bc:	e00f      	b.n	80045de <HAL_RCC_OscConfig+0x522>
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	4a17      	ldr	r2, [pc, #92]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fd fd5d 	bl	80020a4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fd fd59 	bl	80020a4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e12b      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x578>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ed      	beq.n	80045ee <HAL_RCC_OscConfig+0x532>
 8004612:	e01a      	b.n	800464a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd fd46 	bl	80020a4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800461a:	e00f      	b.n	800463c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd fd42 	bl	80020a4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d906      	bls.n	800463c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e114      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800463c:	4b89      	ldr	r3, [pc, #548]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e8      	bne.n	800461c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464a:	7ffb      	ldrb	r3, [r7, #31]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b84      	ldr	r3, [pc, #528]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	4a83      	ldr	r2, [pc, #524]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80fa 	beq.w	800485a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	2b02      	cmp	r3, #2
 800466c:	f040 80d0 	bne.w	8004810 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004670:	4b7c      	ldr	r3, [pc, #496]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 0203 	and.w	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	429a      	cmp	r2, r3
 8004682:	d130      	bne.n	80046e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	3b01      	subs	r3, #1
 8004690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d127      	bne.n	80046e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d11f      	bne.n	80046e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b0:	2a07      	cmp	r2, #7
 80046b2:	bf14      	ite	ne
 80046b4:	2201      	movne	r2, #1
 80046b6:	2200      	moveq	r2, #0
 80046b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d113      	bne.n	80046e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	3b01      	subs	r3, #1
 80046cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	3b01      	subs	r3, #1
 80046e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d06e      	beq.n	80047c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d069      	beq.n	80047c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ec:	4b5d      	ldr	r3, [pc, #372]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046f8:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0a9      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004708:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a55      	ldr	r2, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800470e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004714:	f7fd fcc6 	bl	80020a4 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fd fcc2 	bl	80020a4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e096      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472e:	4b4d      	ldr	r3, [pc, #308]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473a:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_RCC_OscConfig+0x7ac>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800474a:	3a01      	subs	r2, #1
 800474c:	0112      	lsls	r2, r2, #4
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004754:	0212      	lsls	r2, r2, #8
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800475c:	0852      	lsrs	r2, r2, #1
 800475e:	3a01      	subs	r2, #1
 8004760:	0552      	lsls	r2, r2, #21
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0652      	lsls	r2, r2, #25
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004774:	0912      	lsrs	r2, r2, #4
 8004776:	0452      	lsls	r2, r2, #17
 8004778:	430a      	orrs	r2, r1
 800477a:	493a      	ldr	r1, [pc, #232]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004780:	4b38      	ldr	r3, [pc, #224]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800478c:	4b35      	ldr	r3, [pc, #212]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a34      	ldr	r2, [pc, #208]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004798:	f7fd fc84 	bl	80020a4 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fc80 	bl	80020a4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e054      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047be:	e04c      	b.n	800485a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04b      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d144      	bne.n	800485a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 80047e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047e8:	f7fd fc5c 	bl	80020a4 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fd fc58 	bl	80020a4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e02c      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x734>
 800480e:	e024      	b.n	800485a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d01f      	beq.n	8004856 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800481c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fd fc3f 	bl	80020a4 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fd fc3b 	bl	80020a4 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e00f      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	4905      	ldr	r1, [pc, #20]	; (8004864 <HAL_RCC_OscConfig+0x7a8>)
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <HAL_RCC_OscConfig+0x7b0>)
 8004850:	4013      	ands	r3, r2
 8004852:	60cb      	str	r3, [r1, #12]
 8004854:	e001      	b.n	800485a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	f99d808c 	.word	0xf99d808c
 800486c:	feeefffc 	.word	0xfeeefffc

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0e7      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004884:	4b75      	ldr	r3, [pc, #468]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d910      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b72      	ldr	r3, [pc, #456]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 0207 	bic.w	r2, r3, #7
 800489a:	4970      	ldr	r1, [pc, #448]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b6e      	ldr	r3, [pc, #440]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cf      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b66      	ldr	r3, [pc, #408]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d908      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4960      	ldr	r1, [pc, #384]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04c      	beq.n	8004988 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f6:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d121      	bne.n	8004946 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0a6      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800490e:	4b54      	ldr	r3, [pc, #336]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d115      	bne.n	8004946 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e09a      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e08e      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004936:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e086      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4943      	ldr	r1, [pc, #268]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd fba4 	bl	80020a4 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fd fba0 	bl	80020a4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e06e      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d208      	bcs.n	80049b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	492b      	ldr	r1, [pc, #172]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d210      	bcs.n	80049e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c4:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 0207 	bic.w	r2, r3, #7
 80049cc:	4923      	ldr	r1, [pc, #140]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCC_ClockConfig+0x1ec>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d001      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e036      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4918      	ldr	r1, [pc, #96]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a10:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4910      	ldr	r1, [pc, #64]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a24:	f000 f824 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	490b      	ldr	r1, [pc, #44]	; (8004a64 <HAL_RCC_ClockConfig+0x1f4>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <HAL_RCC_ClockConfig+0x1f8>)
 8004a42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCC_ClockConfig+0x1fc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fd f9eb 	bl	8001e24 <HAL_InitTick>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a52:	7afb      	ldrb	r3, [r7, #11]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40021000 	.word	0x40021000
 8004a64:	0800b364 	.word	0x0800b364
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	20000004 	.word	0x20000004

08004a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d11e      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ab0:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e005      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e004      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004af6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d134      	bne.n	8004b68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d003      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0xac>
 8004b14:	e005      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b18:	617b      	str	r3, [r7, #20]
      break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b1e:	617b      	str	r3, [r7, #20]
      break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	617b      	str	r3, [r7, #20]
      break;
 8004b26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	3301      	adds	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	fb02 f203 	mul.w	r2, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	0e5b      	lsrs	r3, r3, #25
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b68:	69bb      	ldr	r3, [r7, #24]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	; 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800b37c 	.word	0x0800b37c
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0adb      	lsrs	r3, r3, #11
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	0800b374 	.word	0x0800b374

08004bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	220f      	movs	r2, #15
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetClockConfig+0x60>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0207 	and.w	r2, r3, #7
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f9d4 	bl	8003ff4 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6178      	str	r0, [r7, #20]
 8004c4e:	e014      	b.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff f9c4 	bl	8003ff4 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d10b      	bne.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d919      	bls.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8004c8c:	d902      	bls.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c8e:	2302      	movs	r3, #2
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e013      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c94:	2301      	movs	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e010      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d902      	bls.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e00a      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d102      	bne.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cac:	2302      	movs	r3, #2
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e004      	b.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d101      	bne.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb8:	2301      	movs	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0207 	bic.w	r2, r3, #7
 8004cc4:	4909      	ldr	r1, [pc, #36]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40022000 	.word	0x40022000

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d041      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d14:	d02a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d1a:	d824      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d20:	d008      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d26:	d81e      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d30:	d010      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d32:	e018      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d34:	4b86      	ldr	r3, [pc, #536]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a85      	ldr	r2, [pc, #532]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d40:	e015      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fabb 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d52:	e00c      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3320      	adds	r3, #32
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fba6 	bl	80054ac <RCCEx_PLLSAI2_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	74fb      	strb	r3, [r7, #19]
      break;
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d74:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	4973      	ldr	r1, [pc, #460]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d8a:	e001      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d041      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004da4:	d02a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004daa:	d824      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db6:	d81e      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dc0:	d010      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dc2:	e018      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dc4:	4b62      	ldr	r3, [pc, #392]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a61      	ldr	r2, [pc, #388]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd0:	e015      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fa73 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de2:	e00c      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3320      	adds	r3, #32
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fb5e 	bl	80054ac <RCCEx_PLLSAI2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e04:	4b52      	ldr	r3, [pc, #328]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e12:	494f      	ldr	r1, [pc, #316]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e1a:	e001      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a0 	beq.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e48:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	4a40      	ldr	r2, [pc, #256]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	; 0x58
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e60:	2301      	movs	r3, #1
 8004e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e64:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3a      	ldr	r2, [pc, #232]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e70:	f7fd f918 	bl	80020a4 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e76:	e009      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e78:	f7fd f914 	bl	80020a4 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	74fb      	strb	r3, [r7, #19]
        break;
 8004e8a:	e005      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e8c:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ef      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e98:	7cfb      	ldrb	r3, [r7, #19]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d15c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e9e:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01f      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d019      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd f8d3 	bl	80020a4 <HAL_GetTick>
 8004efe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f00:	e00b      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd f8cf 	bl	80020a4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d902      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	74fb      	strb	r3, [r7, #19]
            break;
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ec      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2e:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f46:	e009      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f5c:	7c7b      	ldrb	r3, [r7, #17]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f62:	4b9e      	ldr	r3, [pc, #632]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	4a9d      	ldr	r2, [pc, #628]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f7a:	4b98      	ldr	r3, [pc, #608]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f023 0203 	bic.w	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	4994      	ldr	r1, [pc, #592]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f9c:	4b8f      	ldr	r3, [pc, #572]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 020c 	bic.w	r2, r3, #12
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	498c      	ldr	r1, [pc, #560]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fbe:	4b87      	ldr	r3, [pc, #540]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	4983      	ldr	r1, [pc, #524]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fe0:	4b7e      	ldr	r3, [pc, #504]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	497b      	ldr	r1, [pc, #492]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005002:	4b76      	ldr	r3, [pc, #472]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	4972      	ldr	r1, [pc, #456]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005024:	4b6d      	ldr	r3, [pc, #436]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	496a      	ldr	r1, [pc, #424]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005046:	4b65      	ldr	r3, [pc, #404]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	4961      	ldr	r1, [pc, #388]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005068:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005076:	4959      	ldr	r1, [pc, #356]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800508a:	4b54      	ldr	r3, [pc, #336]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	4950      	ldr	r1, [pc, #320]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ac:	4b4b      	ldr	r3, [pc, #300]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	4948      	ldr	r1, [pc, #288]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ce:	4b43      	ldr	r3, [pc, #268]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	493f      	ldr	r1, [pc, #252]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d028      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050f0:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	4937      	ldr	r1, [pc, #220]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800510e:	d106      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b32      	ldr	r3, [pc, #200]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a31      	ldr	r2, [pc, #196]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800511a:	60d3      	str	r3, [r2, #12]
 800511c:	e011      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005126:	d10c      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f8c8 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d028      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	491f      	ldr	r1, [pc, #124]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516c:	d106      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005178:	60d3      	str	r3, [r2, #12]
 800517a:	e011      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2101      	movs	r1, #1
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f899 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d02b      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ba:	4908      	ldr	r1, [pc, #32]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a02      	ldr	r2, [pc, #8]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	e014      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e8:	d10c      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	2101      	movs	r1, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f867 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800521e:	4928      	ldr	r1, [pc, #160]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800522e:	d10d      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	2102      	movs	r1, #2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f844 	bl	80052c4 <RCCEx_PLLSAI1_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	74bb      	strb	r3, [r7, #18]
 800524a:	e011      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3320      	adds	r3, #32
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f925 	bl	80054ac <RCCEx_PLLSAI2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800527c:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528a:	490d      	ldr	r1, [pc, #52]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ae:	4904      	ldr	r1, [pc, #16]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000

080052c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052d2:	4b75      	ldr	r3, [pc, #468]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052de:	4b72      	ldr	r3, [pc, #456]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0203 	and.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d10d      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
       ||
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052f6:	4b6c      	ldr	r3, [pc, #432]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
       ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d047      	beq.n	800539a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e044      	b.n	800539a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d018      	beq.n	800534a <RCCEx_PLLSAI1_Config+0x86>
 8005318:	2b03      	cmp	r3, #3
 800531a:	d825      	bhi.n	8005368 <RCCEx_PLLSAI1_Config+0xa4>
 800531c:	2b01      	cmp	r3, #1
 800531e:	d002      	beq.n	8005326 <RCCEx_PLLSAI1_Config+0x62>
 8005320:	2b02      	cmp	r3, #2
 8005322:	d009      	beq.n	8005338 <RCCEx_PLLSAI1_Config+0x74>
 8005324:	e020      	b.n	8005368 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005326:	4b60      	ldr	r3, [pc, #384]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11d      	bne.n	800536e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005336:	e01a      	b.n	800536e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005338:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d116      	bne.n	8005372 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005348:	e013      	b.n	8005372 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800534a:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005356:	4b54      	ldr	r3, [pc, #336]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005366:	e006      	b.n	8005376 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e004      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005376:	bf00      	nop
    }

    if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	430b      	orrs	r3, r1
 8005394:	4944      	ldr	r1, [pc, #272]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d17d      	bne.n	800549c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053a0:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a40      	ldr	r2, [pc, #256]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fc fe7a 	bl	80020a4 <HAL_GetTick>
 80053b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053b2:	e009      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b4:	f7fc fe76 	bl	80020a4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d902      	bls.n	80053c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	73fb      	strb	r3, [r7, #15]
        break;
 80053c6:	e005      	b.n	80053d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c8:	4b37      	ldr	r3, [pc, #220]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ef      	bne.n	80053b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d160      	bne.n	800549c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d111      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053e0:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6892      	ldr	r2, [r2, #8]
 80053f0:	0211      	lsls	r1, r2, #8
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68d2      	ldr	r2, [r2, #12]
 80053f6:	0912      	lsrs	r2, r2, #4
 80053f8:	0452      	lsls	r2, r2, #17
 80053fa:	430a      	orrs	r2, r1
 80053fc:	492a      	ldr	r1, [pc, #168]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
 8005402:	e027      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d112      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005412:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6892      	ldr	r2, [r2, #8]
 800541a:	0211      	lsls	r1, r2, #8
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6912      	ldr	r2, [r2, #16]
 8005420:	0852      	lsrs	r2, r2, #1
 8005422:	3a01      	subs	r2, #1
 8005424:	0552      	lsls	r2, r2, #21
 8005426:	430a      	orrs	r2, r1
 8005428:	491f      	ldr	r1, [pc, #124]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	610b      	str	r3, [r1, #16]
 800542e:	e011      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005438:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	0211      	lsls	r1, r2, #8
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6952      	ldr	r2, [r2, #20]
 8005446:	0852      	lsrs	r2, r2, #1
 8005448:	3a01      	subs	r2, #1
 800544a:	0652      	lsls	r2, r2, #25
 800544c:	430a      	orrs	r2, r1
 800544e:	4916      	ldr	r1, [pc, #88]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800545e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fc fe20 	bl	80020a4 <HAL_GetTick>
 8005464:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005466:	e009      	b.n	800547c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005468:	f7fc fe1c 	bl	80020a4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d902      	bls.n	800547c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	73fb      	strb	r3, [r7, #15]
          break;
 800547a:	e005      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ef      	beq.n	8005468 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	4904      	ldr	r1, [pc, #16]	; (80054a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	4313      	orrs	r3, r2
 800549a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000

080054ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ba:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054c6:	4b67      	ldr	r3, [pc, #412]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0203 	and.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d10d      	bne.n	80054f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
       ||
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054de:	4b61      	ldr	r3, [pc, #388]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
       ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d047      	beq.n	8005582 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e044      	b.n	8005582 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d018      	beq.n	8005532 <RCCEx_PLLSAI2_Config+0x86>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d825      	bhi.n	8005550 <RCCEx_PLLSAI2_Config+0xa4>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d002      	beq.n	800550e <RCCEx_PLLSAI2_Config+0x62>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d009      	beq.n	8005520 <RCCEx_PLLSAI2_Config+0x74>
 800550c:	e020      	b.n	8005550 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550e:	4b55      	ldr	r3, [pc, #340]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e01a      	b.n	8005556 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005520:	4b50      	ldr	r3, [pc, #320]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e013      	b.n	800555a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005532:	4b4c      	ldr	r3, [pc, #304]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553e:	4b49      	ldr	r3, [pc, #292]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554e:	e006      	b.n	800555e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800555e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005566:	4b3f      	ldr	r3, [pc, #252]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	430b      	orrs	r3, r1
 800557c:	4939      	ldr	r1, [pc, #228]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557e:	4313      	orrs	r3, r2
 8005580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d167      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005588:	4b36      	ldr	r3, [pc, #216]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a35      	ldr	r2, [pc, #212]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fc fd86 	bl	80020a4 <HAL_GetTick>
 8005598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800559a:	e009      	b.n	80055b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800559c:	f7fc fd82 	bl	80020a4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d902      	bls.n	80055b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	73fb      	strb	r3, [r7, #15]
        break;
 80055ae:	e005      	b.n	80055bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055b0:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ef      	bne.n	800559c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14a      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d111      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055c8:	4b26      	ldr	r3, [pc, #152]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6892      	ldr	r2, [r2, #8]
 80055d8:	0211      	lsls	r1, r2, #8
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68d2      	ldr	r2, [r2, #12]
 80055de:	0912      	lsrs	r2, r2, #4
 80055e0:	0452      	lsls	r2, r2, #17
 80055e2:	430a      	orrs	r2, r1
 80055e4:	491f      	ldr	r1, [pc, #124]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	614b      	str	r3, [r1, #20]
 80055ea:	e011      	b.n	8005610 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6892      	ldr	r2, [r2, #8]
 80055fc:	0211      	lsls	r1, r2, #8
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6912      	ldr	r2, [r2, #16]
 8005602:	0852      	lsrs	r2, r2, #1
 8005604:	3a01      	subs	r2, #1
 8005606:	0652      	lsls	r2, r2, #25
 8005608:	430a      	orrs	r2, r1
 800560a:	4916      	ldr	r1, [pc, #88]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560c:	4313      	orrs	r3, r2
 800560e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fc fd42 	bl	80020a4 <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005624:	f7fc fd3e 	bl	80020a4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
          break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ef      	beq.n	8005624 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4904      	ldr	r1, [pc, #16]	; (8005664 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005654:	4313      	orrs	r3, r2
 8005656:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e049      	b.n	800570e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fc fb5c 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 fdf8 	bl	800629c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d001      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_TIM_Base_Start_IT+0xc4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01d      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d018      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a19      	ldr	r2, [pc, #100]	; (80057f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d115      	bne.n	80057ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005796:	4013      	ands	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b06      	cmp	r3, #6
 800579e:	d015      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d011      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b8:	e008      	b.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e000      	b.n	80057ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	00010007 	.word	0x00010007

080057f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f241 1311 	movw	r3, #4369	; 0x1111
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10f      	bne.n	8005840 <HAL_TIM_Base_Stop_IT+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	f240 4344 	movw	r3, #1092	; 0x444
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_TIM_Base_Stop_IT+0x48>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e049      	b.n	80058fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f841 	bl	8005904 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f000 fd01 	bl	800629c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <HAL_TIM_PWM_Start+0x24>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e03c      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d109      	bne.n	8005956 <HAL_TIM_PWM_Start+0x3e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e02f      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d109      	bne.n	8005970 <HAL_TIM_PWM_Start+0x58>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e022      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d109      	bne.n	800598a <HAL_TIM_PWM_Start+0x72>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e015      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b10      	cmp	r3, #16
 800598e:	d109      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x8c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e008      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e09c      	b.n	8005af8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0xb6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	e023      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0xc6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059dc:	e01b      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0xd6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	e013      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xe6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059fc:	e00b      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0xf6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0c:	e003      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f846 	bl	8006ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <HAL_TIM_PWM_Start+0x1e8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x13e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a34      	ldr	r2, [pc, #208]	; (8005b04 <HAL_TIM_PWM_Start+0x1ec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x13e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a32      	ldr	r2, [pc, #200]	; (8005b08 <HAL_TIM_PWM_Start+0x1f0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x13e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a31      	ldr	r2, [pc, #196]	; (8005b0c <HAL_TIM_PWM_Start+0x1f4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x13e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_TIM_PWM_Start+0x1f8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x142>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <HAL_TIM_PWM_Start+0x144>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <HAL_TIM_PWM_Start+0x1e8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d018      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <HAL_TIM_PWM_Start+0x1fc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_TIM_PWM_Start+0x200>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <HAL_TIM_PWM_Start+0x204>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <HAL_TIM_PWM_Start+0x1ec>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0x19e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <HAL_TIM_PWM_Start+0x1f0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d115      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <HAL_TIM_PWM_Start+0x208>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b06      	cmp	r3, #6
 8005ac6:	d015      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x1dc>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ace:	d011      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	e008      	b.n	8005af4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	00010007 	.word	0x00010007

08005b24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 ffba 	bl	8006ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3e      	ldr	r2, [pc, #248]	; (8005c3c <HAL_TIM_PWM_Stop+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_TIM_PWM_Stop+0x4a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3d      	ldr	r2, [pc, #244]	; (8005c40 <HAL_TIM_PWM_Stop+0x11c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <HAL_TIM_PWM_Stop+0x4a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a3b      	ldr	r2, [pc, #236]	; (8005c44 <HAL_TIM_PWM_Stop+0x120>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_TIM_PWM_Stop+0x4a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a3a      	ldr	r2, [pc, #232]	; (8005c48 <HAL_TIM_PWM_Stop+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_TIM_PWM_Stop+0x4a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a38      	ldr	r2, [pc, #224]	; (8005c4c <HAL_TIM_PWM_Stop+0x128>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_Stop+0x4e>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_PWM_Stop+0x50>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10f      	bne.n	8005ba8 <HAL_TIM_PWM_Stop+0x84>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	f240 4344 	movw	r3, #1092	; 0x444
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_PWM_Stop+0x84>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_TIM_PWM_Stop+0xb4>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIM_PWM_Stop+0xb4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <HAL_TIM_PWM_Stop+0xc4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be6:	e023      	b.n	8005c30 <HAL_TIM_PWM_Stop+0x10c>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d104      	bne.n	8005bf8 <HAL_TIM_PWM_Stop+0xd4>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf6:	e01b      	b.n	8005c30 <HAL_TIM_PWM_Stop+0x10c>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d104      	bne.n	8005c08 <HAL_TIM_PWM_Stop+0xe4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c06:	e013      	b.n	8005c30 <HAL_TIM_PWM_Stop+0x10c>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_PWM_Stop+0xf4>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c16:	e00b      	b.n	8005c30 <HAL_TIM_PWM_Stop+0x10c>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_PWM_Stop+0x104>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c26:	e003      	b.n	8005c30 <HAL_TIM_PWM_Stop+0x10c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40013400 	.word	0x40013400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40014400 	.word	0x40014400
 8005c4c:	40014800 	.word	0x40014800

08005c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d122      	bne.n	8005cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d11b      	bne.n	8005cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0202 	mvn.w	r2, #2
 8005c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fae3 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fad5 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fae6 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0204 	mvn.w	r2, #4
 8005cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fab9 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 faab 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fabc 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0208 	mvn.w	r2, #8
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa8f 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa81 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa92 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0210 	mvn.w	r2, #16
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa65 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa57 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa68 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0201 	mvn.w	r2, #1
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fb fede 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d10e      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d107      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 ff10 	bl	8006c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0e:	d10e      	bne.n	8005e2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d107      	bne.n	8005e2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 ff03 	bl	8006c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d10e      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d107      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fa16 	bl	8006286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d10e      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d107      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f06f 0220 	mvn.w	r2, #32
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fec3 	bl	8006c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0ff      	b.n	80060ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b14      	cmp	r3, #20
 8005eba:	f200 80f0 	bhi.w	800609e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	0800609f 	.word	0x0800609f
 8005ecc:	0800609f 	.word	0x0800609f
 8005ed0:	0800609f 	.word	0x0800609f
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	0800609f 	.word	0x0800609f
 8005edc:	0800609f 	.word	0x0800609f
 8005ee0:	0800609f 	.word	0x0800609f
 8005ee4:	08005f9b 	.word	0x08005f9b
 8005ee8:	0800609f 	.word	0x0800609f
 8005eec:	0800609f 	.word	0x0800609f
 8005ef0:	0800609f 	.word	0x0800609f
 8005ef4:	08005fdb 	.word	0x08005fdb
 8005ef8:	0800609f 	.word	0x0800609f
 8005efc:	0800609f 	.word	0x0800609f
 8005f00:	0800609f 	.word	0x0800609f
 8005f04:	0800601d 	.word	0x0800601d
 8005f08:	0800609f 	.word	0x0800609f
 8005f0c:	0800609f 	.word	0x0800609f
 8005f10:	0800609f 	.word	0x0800609f
 8005f14:	0800605d 	.word	0x0800605d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fa56 	bl	80063d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	619a      	str	r2, [r3, #24]
      break;
 8005f56:	e0a5      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fac6 	bl	80064f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	619a      	str	r2, [r3, #24]
      break;
 8005f98:	e084      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fb2f 	bl	8006604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0204 	bic.w	r2, r2, #4
 8005fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	61da      	str	r2, [r3, #28]
      break;
 8005fd8:	e064      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fb97 	bl	8006714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	021a      	lsls	r2, r3, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
      break;
 800601a:	e043      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fbe0 	bl	80067e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0208 	orr.w	r2, r2, #8
 8006036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0204 	bic.w	r2, r2, #4
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800605a:	e023      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fc24 	bl	80068b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	021a      	lsls	r2, r3, #8
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800609c:	e002      	b.n	80060a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
      break;
 80060a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop

080060b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_ConfigClockSource+0x1c>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0b6      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x18a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d03e      	beq.n	8006190 <HAL_TIM_ConfigClockSource+0xd8>
 8006112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006116:	f200 8087 	bhi.w	8006228 <HAL_TIM_ConfigClockSource+0x170>
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	f000 8086 	beq.w	800622e <HAL_TIM_ConfigClockSource+0x176>
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d87f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006128:	2b70      	cmp	r3, #112	; 0x70
 800612a:	d01a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xaa>
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d87b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006130:	2b60      	cmp	r3, #96	; 0x60
 8006132:	d050      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d877      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d03c      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xfe>
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d873      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d058      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d86f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d064      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d86b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d060      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d867      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05c      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d05a      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 8006160:	e062      	b.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f000 fc7d 	bl	8006a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	609a      	str	r2, [r3, #8]
      break;
 800618e:	e04f      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6899      	ldr	r1, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f000 fc66 	bl	8006a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b2:	609a      	str	r2, [r3, #8]
      break;
 80061b4:	e03c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fbda 	bl	800697c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2150      	movs	r1, #80	; 0x50
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fc33 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 80061d4:	e02c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 fbf9 	bl	80069da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2160      	movs	r1, #96	; 0x60
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fc23 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 80061f4:	e01c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	461a      	mov	r2, r3
 8006204:	f000 fbba 	bl	800697c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2140      	movs	r1, #64	; 0x40
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fc13 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8006214:	e00c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 fc0a 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8006226:	e003      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e000      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800622e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a40      	ldr	r2, [pc, #256]	; (80063b0 <TIM_Base_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a3d      	ldr	r2, [pc, #244]	; (80063b4 <TIM_Base_SetConfig+0x118>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a3c      	ldr	r2, [pc, #240]	; (80063b8 <TIM_Base_SetConfig+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a3b      	ldr	r2, [pc, #236]	; (80063bc <TIM_Base_SetConfig+0x120>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a3a      	ldr	r2, [pc, #232]	; (80063c0 <TIM_Base_SetConfig+0x124>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2f      	ldr	r2, [pc, #188]	; (80063b0 <TIM_Base_SetConfig+0x114>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2c      	ldr	r2, [pc, #176]	; (80063b4 <TIM_Base_SetConfig+0x118>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a2b      	ldr	r2, [pc, #172]	; (80063b8 <TIM_Base_SetConfig+0x11c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a2a      	ldr	r2, [pc, #168]	; (80063bc <TIM_Base_SetConfig+0x120>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a29      	ldr	r2, [pc, #164]	; (80063c0 <TIM_Base_SetConfig+0x124>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a28      	ldr	r2, [pc, #160]	; (80063c4 <TIM_Base_SetConfig+0x128>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <TIM_Base_SetConfig+0x12c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a26      	ldr	r2, [pc, #152]	; (80063cc <TIM_Base_SetConfig+0x130>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <TIM_Base_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <TIM_Base_SetConfig+0x124>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00b      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <TIM_Base_SetConfig+0x128>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <TIM_Base_SetConfig+0x12c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <TIM_Base_SetConfig+0x130>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d103      	bne.n	800639c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	615a      	str	r2, [r3, #20]
}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800
 80063bc:	40000c00 	.word	0x40000c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 0302 	bic.w	r3, r3, #2
 800641c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a2c      	ldr	r2, [pc, #176]	; (80064dc <TIM_OC1_SetConfig+0x10c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00f      	beq.n	8006450 <TIM_OC1_SetConfig+0x80>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2b      	ldr	r2, [pc, #172]	; (80064e0 <TIM_OC1_SetConfig+0x110>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_OC1_SetConfig+0x80>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <TIM_OC1_SetConfig+0x114>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_OC1_SetConfig+0x80>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <TIM_OC1_SetConfig+0x118>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC1_SetConfig+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a28      	ldr	r2, [pc, #160]	; (80064ec <TIM_OC1_SetConfig+0x11c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10c      	bne.n	800646a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0308 	bic.w	r3, r3, #8
 8006456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <TIM_OC1_SetConfig+0x10c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00f      	beq.n	8006492 <TIM_OC1_SetConfig+0xc2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <TIM_OC1_SetConfig+0x110>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_OC1_SetConfig+0xc2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <TIM_OC1_SetConfig+0x114>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_OC1_SetConfig+0xc2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <TIM_OC1_SetConfig+0x118>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC1_SetConfig+0xc2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <TIM_OC1_SetConfig+0x11c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d111      	bne.n	80064b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40013400 	.word	0x40013400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f023 0210 	bic.w	r2, r3, #16
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0320 	bic.w	r3, r3, #32
 800653e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <TIM_OC2_SetConfig+0x100>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC2_SetConfig+0x6c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <TIM_OC2_SetConfig+0x104>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d10d      	bne.n	8006578 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <TIM_OC2_SetConfig+0x100>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00f      	beq.n	80065a0 <TIM_OC2_SetConfig+0xb0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <TIM_OC2_SetConfig+0x104>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC2_SetConfig+0xb0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <TIM_OC2_SetConfig+0x108>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC2_SetConfig+0xb0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <TIM_OC2_SetConfig+0x10c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC2_SetConfig+0xb0>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a19      	ldr	r2, [pc, #100]	; (8006600 <TIM_OC2_SetConfig+0x110>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d113      	bne.n	80065c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800

08006604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a27      	ldr	r2, [pc, #156]	; (8006700 <TIM_OC3_SetConfig+0xfc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <TIM_OC3_SetConfig+0x6a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a26      	ldr	r2, [pc, #152]	; (8006704 <TIM_OC3_SetConfig+0x100>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d10d      	bne.n	800668a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a1c      	ldr	r2, [pc, #112]	; (8006700 <TIM_OC3_SetConfig+0xfc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00f      	beq.n	80066b2 <TIM_OC3_SetConfig+0xae>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <TIM_OC3_SetConfig+0x100>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00b      	beq.n	80066b2 <TIM_OC3_SetConfig+0xae>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <TIM_OC3_SetConfig+0x104>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d007      	beq.n	80066b2 <TIM_OC3_SetConfig+0xae>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a19      	ldr	r2, [pc, #100]	; (800670c <TIM_OC3_SetConfig+0x108>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_OC3_SetConfig+0xae>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <TIM_OC3_SetConfig+0x10c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <TIM_OC4_SetConfig+0xc0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00f      	beq.n	8006798 <TIM_OC4_SetConfig+0x84>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <TIM_OC4_SetConfig+0xc4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_OC4_SetConfig+0x84>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <TIM_OC4_SetConfig+0xc8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC4_SetConfig+0x84>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <TIM_OC4_SetConfig+0xcc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC4_SetConfig+0x84>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <TIM_OC4_SetConfig+0xd0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d109      	bne.n	80067ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800682c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <TIM_OC5_SetConfig+0xb4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_OC5_SetConfig+0x7a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <TIM_OC5_SetConfig+0xb8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_OC5_SetConfig+0x7a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <TIM_OC5_SetConfig+0xbc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_OC5_SetConfig+0x7a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <TIM_OC5_SetConfig+0xc0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC5_SetConfig+0x7a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a13      	ldr	r2, [pc, #76]	; (80068ac <TIM_OC5_SetConfig+0xc4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d109      	bne.n	8006876 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40013400 	.word	0x40013400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800

080068b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	051b      	lsls	r3, r3, #20
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <TIM_OC6_SetConfig+0xb8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00f      	beq.n	800692c <TIM_OC6_SetConfig+0x7c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a17      	ldr	r2, [pc, #92]	; (800696c <TIM_OC6_SetConfig+0xbc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_OC6_SetConfig+0x7c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a16      	ldr	r2, [pc, #88]	; (8006970 <TIM_OC6_SetConfig+0xc0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_OC6_SetConfig+0x7c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a15      	ldr	r2, [pc, #84]	; (8006974 <TIM_OC6_SetConfig+0xc4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC6_SetConfig+0x7c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a14      	ldr	r2, [pc, #80]	; (8006978 <TIM_OC6_SetConfig+0xc8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40013400 	.word	0x40013400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 030a 	bic.w	r3, r3, #10
 80069b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069da:	b480      	push	{r7}
 80069dc:	b087      	sub	sp, #28
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0210 	bic.w	r2, r3, #16
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	031b      	lsls	r3, r3, #12
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f043 0307 	orr.w	r3, r3, #7
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	021a      	lsls	r2, r3, #8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1a      	ldr	r2, [r3, #32]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e068      	b.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b86:	d018      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40014000 	.word	0x40014000

08006c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b08b      	sub	sp, #44	; 0x2c
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	fa93 f3a3 	rbit	r3, r3
 8006c62:	613b      	str	r3, [r7, #16]
  return result;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006c6e:	2320      	movs	r3, #32
 8006c70:	e003      	b.n	8006c7a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	2103      	movs	r1, #3
 8006c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	401a      	ands	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	fa93 f3a3 	rbit	r3, r3
 8006c90:	61fb      	str	r3, [r7, #28]
  return result;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	e003      	b.n	8006ca8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	fab3 f383 	clz	r3, r3
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	372c      	adds	r7, #44	; 0x2c
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b08b      	sub	sp, #44	; 0x2c
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	fa93 f3a3 	rbit	r3, r3
 8006d0c:	613b      	str	r3, [r7, #16]
  return result;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006d18:	2320      	movs	r3, #32
 8006d1a:	e003      	b.n	8006d24 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	fab3 f383 	clz	r3, r3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	2103      	movs	r1, #3
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	401a      	ands	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	61fb      	str	r3, [r7, #28]
  return result;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006d46:	2320      	movs	r3, #32
 8006d48:	e003      	b.n	8006d52 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	fab3 f383 	clz	r3, r3
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006d60:	bf00      	nop
 8006d62:	372c      	adds	r7, #44	; 0x2c
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b08b      	sub	sp, #44	; 0x2c
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	fa93 f3a3 	rbit	r3, r3
 8006d86:	613b      	str	r3, [r7, #16]
  return result;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d92:	2320      	movs	r3, #32
 8006d94:	e003      	b.n	8006d9e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	fab3 f383 	clz	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	2103      	movs	r1, #3
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	401a      	ands	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	fa93 f3a3 	rbit	r3, r3
 8006db4:	61fb      	str	r3, [r7, #28]
  return result;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	e003      	b.n	8006dcc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	fab3 f383 	clz	r3, r3
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60da      	str	r2, [r3, #12]
}
 8006dda:	bf00      	nop
 8006ddc:	372c      	adds	r7, #44	; 0x2c
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b08b      	sub	sp, #44	; 0x2c
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	fa93 f3a3 	rbit	r3, r3
 8006e00:	613b      	str	r3, [r7, #16]
  return result;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	e003      	b.n	8006e18 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	fab3 f383 	clz	r3, r3
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	210f      	movs	r1, #15
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	fa93 f3a3 	rbit	r3, r3
 8006e2e:	61fb      	str	r3, [r7, #28]
  return result;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	e003      	b.n	8006e46 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	fab3 f383 	clz	r3, r3
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006e54:	bf00      	nop
 8006e56:	372c      	adds	r7, #44	; 0x2c
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b08b      	sub	sp, #44	; 0x2c
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	fa93 f3a3 	rbit	r3, r3
 8006e7c:	613b      	str	r3, [r7, #16]
  return result;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e88:	2320      	movs	r3, #32
 8006e8a:	e003      	b.n	8006e94 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	fab3 f383 	clz	r3, r3
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	210f      	movs	r1, #15
 8006e98:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	fa93 f3a3 	rbit	r3, r3
 8006eac:	61fb      	str	r3, [r7, #28]
  return result;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006eb8:	2320      	movs	r3, #32
 8006eba:	e003      	b.n	8006ec4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	fab3 f383 	clz	r3, r3
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006ed2:	bf00      	nop
 8006ed4:	372c      	adds	r7, #44	; 0x2c
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b088      	sub	sp, #32
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	fa93 f3a3 	rbit	r3, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
  return result;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <LL_GPIO_Init+0x26>
    return 32U;
 8006f00:	2320      	movs	r3, #32
 8006f02:	e003      	b.n	8006f0c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	fab3 f383 	clz	r3, r3
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006f0e:	e048      	b.n	8006fa2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	2101      	movs	r1, #1
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d03a      	beq.n	8006f9c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d003      	beq.n	8006f36 <LL_GPIO_Init+0x58>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d10e      	bne.n	8006f54 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fed7 	bl	8006cf2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6819      	ldr	r1, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff feb7 	bl	8006cc2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	69b9      	ldr	r1, [r7, #24]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff05 	bl	8006d6c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d111      	bne.n	8006f8e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2bff      	cmp	r3, #255	; 0xff
 8006f6e:	d807      	bhi.n	8006f80 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	461a      	mov	r2, r3
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff ff34 	bl	8006de6 <LL_GPIO_SetAFPin_0_7>
 8006f7e:	e006      	b.n	8006f8e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	461a      	mov	r2, r3
 8006f86:	69b9      	ldr	r1, [r7, #24]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ff69 	bl	8006e60 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	461a      	mov	r2, r3
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fe56 	bl	8006c48 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1af      	bne.n	8006f10 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <LL_RCC_HSI_IsReady+0x24>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fcc:	d101      	bne.n	8006fd2 <LL_RCC_HSI_IsReady+0x16>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <LL_RCC_HSI_IsReady+0x18>
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000

08006fe4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <LL_RCC_LSE_IsReady+0x24>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d101      	bne.n	8006ffa <LL_RCC_LSE_IsReady+0x16>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <LL_RCC_LSE_IsReady+0x18>
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000

0800700c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b08      	cmp	r3, #8
 800701a:	d101      	bne.n	8007020 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	40021000 	.word	0x40021000

08007030 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <LL_RCC_MSI_GetRange+0x18>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800703c:	4618      	mov	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40021000 	.word	0x40021000

0800704c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007050:	4b04      	ldr	r3, [pc, #16]	; (8007064 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8007052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007056:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800705a:	4618      	mov	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40021000 	.word	0x40021000

08007068 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <LL_RCC_GetSysClkSource+0x18>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000

08007084 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <LL_RCC_GetAHBPrescaler+0x18>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40021000 	.word	0x40021000

080070a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80070a4:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40021000 	.word	0x40021000

080070bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80070c0:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40021000 	.word	0x40021000

080070d8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <LL_RCC_GetUSARTClockSource+0x24>)
 80070e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	401a      	ands	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	4313      	orrs	r3, r2
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40021000 	.word	0x40021000

08007100 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <LL_RCC_GetUARTClockSource+0x24>)
 800710a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	401a      	ands	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	4313      	orrs	r3, r2
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40021000 	.word	0x40021000

08007128 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <LL_RCC_PLL_GetMainSource+0x18>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f003 0303 	and.w	r3, r3, #3
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40021000 	.word	0x40021000

08007144 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <LL_RCC_PLL_GetN+0x18>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	0a1b      	lsrs	r3, r3, #8
 800714e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007152:	4618      	mov	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40021000 	.word	0x40021000

08007160 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <LL_RCC_PLL_GetR+0x18>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40021000 	.word	0x40021000

0800717c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <LL_RCC_PLL_GetDivider+0x18>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000

08007198 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d137      	bne.n	800721a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff ff94 	bl	80070d8 <LL_RCC_GetUSARTClockSource>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f200 80b3 	bhi.w	8007322 <LL_RCC_GetUSARTClockFreq+0x18a>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071d5 	.word	0x080071d5
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071ef 	.word	0x080071ef
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80071d4:	f000 f95c 	bl	8007490 <RCC_GetSystemClockFreq>
 80071d8:	60f8      	str	r0, [r7, #12]
        break;
 80071da:	e0b5      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80071dc:	f7ff feee 	bl	8006fbc <LL_RCC_HSI_IsReady>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 809f 	beq.w	8007326 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80071e8:	4b5a      	ldr	r3, [pc, #360]	; (8007354 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80071ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80071ec:	e09b      	b.n	8007326 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80071ee:	f7ff fef9 	bl	8006fe4 <LL_RCC_LSE_IsReady>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8098 	beq.w	800732a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007200:	e093      	b.n	800732a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007202:	f000 f945 	bl	8007490 <RCC_GetSystemClockFreq>
 8007206:	4603      	mov	r3, r0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f9d1 	bl	80075b0 <RCC_GetHCLKClockFreq>
 800720e:	4603      	mov	r3, r0
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f9f7 	bl	8007604 <RCC_GetPCLK2ClockFreq>
 8007216:	60f8      	str	r0, [r7, #12]
        break;
 8007218:	e096      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d146      	bne.n	80072ae <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff59 	bl	80070d8 <LL_RCC_GetUSARTClockSource>
 8007226:	4603      	mov	r3, r0
 8007228:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d87e      	bhi.n	800732e <LL_RCC_GetUSARTClockFreq+0x196>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007297 	.word	0x08007297
 800723c:	0800732f 	.word	0x0800732f
 8007240:	0800732f 	.word	0x0800732f
 8007244:	0800732f 	.word	0x0800732f
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800732f 	.word	0x0800732f
 8007250:	0800732f 	.word	0x0800732f
 8007254:	0800732f 	.word	0x0800732f
 8007258:	08007275 	.word	0x08007275
 800725c:	0800732f 	.word	0x0800732f
 8007260:	0800732f 	.word	0x0800732f
 8007264:	0800732f 	.word	0x0800732f
 8007268:	08007285 	.word	0x08007285
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800726c:	f000 f910 	bl	8007490 <RCC_GetSystemClockFreq>
 8007270:	60f8      	str	r0, [r7, #12]
        break;
 8007272:	e069      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007274:	f7ff fea2 	bl	8006fbc <LL_RCC_HSI_IsReady>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d059      	beq.n	8007332 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800727e:	4b35      	ldr	r3, [pc, #212]	; (8007354 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007280:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007282:	e056      	b.n	8007332 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007284:	f7ff feae 	bl	8006fe4 <LL_RCC_LSE_IsReady>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d053      	beq.n	8007336 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800728e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007292:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007294:	e04f      	b.n	8007336 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007296:	f000 f8fb 	bl	8007490 <RCC_GetSystemClockFreq>
 800729a:	4603      	mov	r3, r0
 800729c:	4618      	mov	r0, r3
 800729e:	f000 f987 	bl	80075b0 <RCC_GetHCLKClockFreq>
 80072a2:	4603      	mov	r3, r0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f999 	bl	80075dc <RCC_GetPCLK1ClockFreq>
 80072aa:	60f8      	str	r0, [r7, #12]
        break;
 80072ac:	e04c      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b30      	cmp	r3, #48	; 0x30
 80072b2:	d142      	bne.n	800733a <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff ff0f 	bl	80070d8 <LL_RCC_GetUSARTClockSource>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80072c0:	d01a      	beq.n	80072f8 <LL_RCC_GetUSARTClockFreq+0x160>
 80072c2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80072c6:	d83a      	bhi.n	800733e <LL_RCC_GetUSARTClockFreq+0x1a6>
 80072c8:	4a23      	ldr	r2, [pc, #140]	; (8007358 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00c      	beq.n	80072e8 <LL_RCC_GetUSARTClockFreq+0x150>
 80072ce:	4a22      	ldr	r2, [pc, #136]	; (8007358 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d834      	bhi.n	800733e <LL_RCC_GetUSARTClockFreq+0x1a6>
 80072d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072d8:	d017      	beq.n	800730a <LL_RCC_GetUSARTClockFreq+0x172>
 80072da:	4a20      	ldr	r2, [pc, #128]	; (800735c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d12e      	bne.n	800733e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80072e0:	f000 f8d6 	bl	8007490 <RCC_GetSystemClockFreq>
 80072e4:	60f8      	str	r0, [r7, #12]
          break;
 80072e6:	e02f      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80072e8:	f7ff fe68 	bl	8006fbc <LL_RCC_HSI_IsReady>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d027      	beq.n	8007342 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80072f4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80072f6:	e024      	b.n	8007342 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80072f8:	f7ff fe74 	bl	8006fe4 <LL_RCC_LSE_IsReady>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d021      	beq.n	8007346 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007306:	60fb      	str	r3, [r7, #12]
          }
          break;
 8007308:	e01d      	b.n	8007346 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800730a:	f000 f8c1 	bl	8007490 <RCC_GetSystemClockFreq>
 800730e:	4603      	mov	r3, r0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 f94d 	bl	80075b0 <RCC_GetHCLKClockFreq>
 8007316:	4603      	mov	r3, r0
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f95f 	bl	80075dc <RCC_GetPCLK1ClockFreq>
 800731e:	60f8      	str	r0, [r7, #12]
          break;
 8007320:	e012      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007322:	bf00      	nop
 8007324:	e010      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007326:	bf00      	nop
 8007328:	e00e      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800732a:	bf00      	nop
 800732c:	e00c      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800732e:	bf00      	nop
 8007330:	e00a      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007332:	bf00      	nop
 8007334:	e008      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8007336:	bf00      	nop
 8007338:	e006      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 800733a:	bf00      	nop
 800733c:	e004      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8007346:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	00f42400 	.word	0x00f42400
 8007358:	00300020 	.word	0x00300020
 800735c:	00300010 	.word	0x00300010

08007360 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2bc0      	cmp	r3, #192	; 0xc0
 8007370:	d136      	bne.n	80073e0 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fec4 	bl	8007100 <LL_RCC_GetUARTClockSource>
 8007378:	4603      	mov	r3, r0
 800737a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800737e:	d01a      	beq.n	80073b6 <LL_RCC_GetUARTClockFreq+0x56>
 8007380:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8007384:	d82e      	bhi.n	80073e4 <LL_RCC_GetUARTClockFreq+0x84>
 8007386:	4a3d      	ldr	r2, [pc, #244]	; (800747c <LL_RCC_GetUARTClockFreq+0x11c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00c      	beq.n	80073a6 <LL_RCC_GetUARTClockFreq+0x46>
 800738c:	4a3b      	ldr	r2, [pc, #236]	; (800747c <LL_RCC_GetUARTClockFreq+0x11c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d828      	bhi.n	80073e4 <LL_RCC_GetUARTClockFreq+0x84>
 8007392:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007396:	d017      	beq.n	80073c8 <LL_RCC_GetUARTClockFreq+0x68>
 8007398:	4a39      	ldr	r2, [pc, #228]	; (8007480 <LL_RCC_GetUARTClockFreq+0x120>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d122      	bne.n	80073e4 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800739e:	f000 f877 	bl	8007490 <RCC_GetSystemClockFreq>
 80073a2:	60f8      	str	r0, [r7, #12]
        break;
 80073a4:	e023      	b.n	80073ee <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80073a6:	f7ff fe09 	bl	8006fbc <LL_RCC_HSI_IsReady>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01b      	beq.n	80073e8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80073b0:	4b34      	ldr	r3, [pc, #208]	; (8007484 <LL_RCC_GetUARTClockFreq+0x124>)
 80073b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80073b4:	e018      	b.n	80073e8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80073b6:	f7ff fe15 	bl	8006fe4 <LL_RCC_LSE_IsReady>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80073c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80073c6:	e011      	b.n	80073ec <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80073c8:	f000 f862 	bl	8007490 <RCC_GetSystemClockFreq>
 80073cc:	4603      	mov	r3, r0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f8ee 	bl	80075b0 <RCC_GetHCLKClockFreq>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f900 	bl	80075dc <RCC_GetPCLK1ClockFreq>
 80073dc:	60f8      	str	r0, [r7, #12]
        break;
 80073de:	e006      	b.n	80073ee <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80073e0:	bf00      	nop
 80073e2:	e004      	b.n	80073ee <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80073ec:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f4:	d136      	bne.n	8007464 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff fe82 	bl	8007100 <LL_RCC_GetUARTClockSource>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8007402:	d01a      	beq.n	800743a <LL_RCC_GetUARTClockFreq+0xda>
 8007404:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8007408:	d82e      	bhi.n	8007468 <LL_RCC_GetUARTClockFreq+0x108>
 800740a:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <LL_RCC_GetUARTClockFreq+0x128>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00c      	beq.n	800742a <LL_RCC_GetUARTClockFreq+0xca>
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <LL_RCC_GetUARTClockFreq+0x128>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d828      	bhi.n	8007468 <LL_RCC_GetUARTClockFreq+0x108>
 8007416:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800741a:	d017      	beq.n	800744c <LL_RCC_GetUARTClockFreq+0xec>
 800741c:	4a1b      	ldr	r2, [pc, #108]	; (800748c <LL_RCC_GetUARTClockFreq+0x12c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d122      	bne.n	8007468 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8007422:	f000 f835 	bl	8007490 <RCC_GetSystemClockFreq>
 8007426:	60f8      	str	r0, [r7, #12]
        break;
 8007428:	e023      	b.n	8007472 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800742a:	f7ff fdc7 	bl	8006fbc <LL_RCC_HSI_IsReady>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8007434:	4b13      	ldr	r3, [pc, #76]	; (8007484 <LL_RCC_GetUARTClockFreq+0x124>)
 8007436:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007438:	e018      	b.n	800746c <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800743a:	f7ff fdd3 	bl	8006fe4 <LL_RCC_LSE_IsReady>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d015      	beq.n	8007470 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8007444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007448:	60fb      	str	r3, [r7, #12]
        }
        break;
 800744a:	e011      	b.n	8007470 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800744c:	f000 f820 	bl	8007490 <RCC_GetSystemClockFreq>
 8007450:	4603      	mov	r3, r0
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f8ac 	bl	80075b0 <RCC_GetHCLKClockFreq>
 8007458:	4603      	mov	r3, r0
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f8be 	bl	80075dc <RCC_GetPCLK1ClockFreq>
 8007460:	60f8      	str	r0, [r7, #12]
        break;
 8007462:	e006      	b.n	8007472 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8007464:	bf00      	nop
 8007466:	e004      	b.n	8007472 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8007468:	bf00      	nop
 800746a:	e002      	b.n	8007472 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800746c:	bf00      	nop
 800746e:	e000      	b.n	8007472 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8007470:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	00c00080 	.word	0x00c00080
 8007480:	00c00040 	.word	0x00c00040
 8007484:	00f42400 	.word	0x00f42400
 8007488:	03000200 	.word	0x03000200
 800748c:	03000100 	.word	0x03000100

08007490 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007496:	f7ff fde7 	bl	8007068 <LL_RCC_GetSysClkSource>
 800749a:	4603      	mov	r3, r0
 800749c:	2b0c      	cmp	r3, #12
 800749e:	d851      	bhi.n	8007544 <RCC_GetSystemClockFreq+0xb4>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <RCC_GetSystemClockFreq+0x18>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	08007545 	.word	0x08007545
 80074b0:	08007545 	.word	0x08007545
 80074b4:	08007545 	.word	0x08007545
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007545 	.word	0x08007545
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007545 	.word	0x08007545
 80074c8:	08007537 	.word	0x08007537
 80074cc:	08007545 	.word	0x08007545
 80074d0:	08007545 	.word	0x08007545
 80074d4:	08007545 	.word	0x08007545
 80074d8:	0800753d 	.word	0x0800753d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80074dc:	f7ff fd96 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d111      	bne.n	800750a <RCC_GetSystemClockFreq+0x7a>
 80074e6:	f7ff fd91 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <RCC_GetSystemClockFreq+0x6a>
 80074f0:	f7ff fd9e 	bl	8007030 <LL_RCC_MSI_GetRange>
 80074f4:	4603      	mov	r3, r0
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	e003      	b.n	8007502 <RCC_GetSystemClockFreq+0x72>
 80074fa:	f7ff fda7 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 80074fe:	4603      	mov	r3, r0
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	4a28      	ldr	r2, [pc, #160]	; (80075a4 <RCC_GetSystemClockFreq+0x114>)
 8007504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007508:	e010      	b.n	800752c <RCC_GetSystemClockFreq+0x9c>
 800750a:	f7ff fd7f 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <RCC_GetSystemClockFreq+0x8e>
 8007514:	f7ff fd8c 	bl	8007030 <LL_RCC_MSI_GetRange>
 8007518:	4603      	mov	r3, r0
 800751a:	091b      	lsrs	r3, r3, #4
 800751c:	e003      	b.n	8007526 <RCC_GetSystemClockFreq+0x96>
 800751e:	f7ff fd95 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 8007522:	4603      	mov	r3, r0
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <RCC_GetSystemClockFreq+0x114>)
 8007528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800752e:	e033      	b.n	8007598 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <RCC_GetSystemClockFreq+0x118>)
 8007532:	607b      	str	r3, [r7, #4]
      break;
 8007534:	e030      	b.n	8007598 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <RCC_GetSystemClockFreq+0x11c>)
 8007538:	607b      	str	r3, [r7, #4]
      break;
 800753a:	e02d      	b.n	8007598 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800753c:	f000 f876 	bl	800762c <RCC_PLL_GetFreqDomain_SYS>
 8007540:	6078      	str	r0, [r7, #4]
      break;
 8007542:	e029      	b.n	8007598 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007544:	f7ff fd62 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d111      	bne.n	8007572 <RCC_GetSystemClockFreq+0xe2>
 800754e:	f7ff fd5d 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <RCC_GetSystemClockFreq+0xd2>
 8007558:	f7ff fd6a 	bl	8007030 <LL_RCC_MSI_GetRange>
 800755c:	4603      	mov	r3, r0
 800755e:	0a1b      	lsrs	r3, r3, #8
 8007560:	e003      	b.n	800756a <RCC_GetSystemClockFreq+0xda>
 8007562:	f7ff fd73 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 8007566:	4603      	mov	r3, r0
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	4a0e      	ldr	r2, [pc, #56]	; (80075a4 <RCC_GetSystemClockFreq+0x114>)
 800756c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007570:	e010      	b.n	8007594 <RCC_GetSystemClockFreq+0x104>
 8007572:	f7ff fd4b 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <RCC_GetSystemClockFreq+0xf6>
 800757c:	f7ff fd58 	bl	8007030 <LL_RCC_MSI_GetRange>
 8007580:	4603      	mov	r3, r0
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	e003      	b.n	800758e <RCC_GetSystemClockFreq+0xfe>
 8007586:	f7ff fd61 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 800758a:	4603      	mov	r3, r0
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <RCC_GetSystemClockFreq+0x114>)
 8007590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007594:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007596:	bf00      	nop
  }

  return frequency;
 8007598:	687b      	ldr	r3, [r7, #4]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	0800b37c 	.word	0x0800b37c
 80075a8:	00f42400 	.word	0x00f42400
 80075ac:	007a1200 	.word	0x007a1200

080075b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80075b8:	f7ff fd64 	bl	8007084 <LL_RCC_GetAHBPrescaler>
 80075bc:	4603      	mov	r3, r0
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <RCC_GetHCLKClockFreq+0x28>)
 80075c6:	5cd3      	ldrb	r3, [r2, r3]
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	40d3      	lsrs	r3, r2
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	0800b364 	.word	0x0800b364

080075dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80075e4:	f7ff fd5c 	bl	80070a0 <LL_RCC_GetAPB1Prescaler>
 80075e8:	4603      	mov	r3, r0
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <RCC_GetPCLK1ClockFreq+0x24>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	40d3      	lsrs	r3, r2
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	0800b374 	.word	0x0800b374

08007604 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800760c:	f7ff fd56 	bl	80070bc <LL_RCC_GetAPB2Prescaler>
 8007610:	4603      	mov	r3, r0
 8007612:	0adb      	lsrs	r3, r3, #11
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <RCC_GetPCLK2ClockFreq+0x24>)
 8007616:	5cd3      	ldrb	r3, [r2, r3]
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	40d3      	lsrs	r3, r2
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	0800b374 	.word	0x0800b374

0800762c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007632:	f7ff fd79 	bl	8007128 <LL_RCC_PLL_GetMainSource>
 8007636:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b03      	cmp	r3, #3
 800763c:	d036      	beq.n	80076ac <RCC_PLL_GetFreqDomain_SYS+0x80>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d836      	bhi.n	80076b2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d003      	beq.n	8007652 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d02a      	beq.n	80076a6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8007650:	e02f      	b.n	80076b2 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007652:	f7ff fcdb 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d111      	bne.n	8007680 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800765c:	f7ff fcd6 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8007666:	f7ff fce3 	bl	8007030 <LL_RCC_MSI_GetRange>
 800766a:	4603      	mov	r3, r0
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	e003      	b.n	8007678 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8007670:	f7ff fcec 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 8007674:	4603      	mov	r3, r0
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	4a2f      	ldr	r2, [pc, #188]	; (8007738 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800767a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767e:	e010      	b.n	80076a2 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8007680:	f7ff fcc4 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800768a:	f7ff fcd1 	bl	8007030 <LL_RCC_MSI_GetRange>
 800768e:	4603      	mov	r3, r0
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	e003      	b.n	800769c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8007694:	f7ff fcda 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 8007698:	4603      	mov	r3, r0
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800769e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80076a4:	e02f      	b.n	8007706 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80076a6:	4b25      	ldr	r3, [pc, #148]	; (800773c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80076a8:	607b      	str	r3, [r7, #4]
      break;
 80076aa:	e02c      	b.n	8007706 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80076ac:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80076ae:	607b      	str	r3, [r7, #4]
      break;
 80076b0:	e029      	b.n	8007706 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80076b2:	f7ff fcab 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d111      	bne.n	80076e0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80076bc:	f7ff fca6 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80076c6:	f7ff fcb3 	bl	8007030 <LL_RCC_MSI_GetRange>
 80076ca:	4603      	mov	r3, r0
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	e003      	b.n	80076d8 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80076d0:	f7ff fcbc 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 80076d4:	4603      	mov	r3, r0
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80076da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076de:	e010      	b.n	8007702 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80076e0:	f7ff fc94 	bl	800700c <LL_RCC_MSI_IsEnabledRangeSelect>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80076ea:	f7ff fca1 	bl	8007030 <LL_RCC_MSI_GetRange>
 80076ee:	4603      	mov	r3, r0
 80076f0:	091b      	lsrs	r3, r3, #4
 80076f2:	e003      	b.n	80076fc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80076f4:	f7ff fcaa 	bl	800704c <LL_RCC_MSI_GetRangeAfterStandby>
 80076f8:	4603      	mov	r3, r0
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	4a0e      	ldr	r2, [pc, #56]	; (8007738 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80076fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007702:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007704:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007706:	f7ff fd39 	bl	800717c <LL_RCC_PLL_GetDivider>
 800770a:	4603      	mov	r3, r0
 800770c:	091b      	lsrs	r3, r3, #4
 800770e:	3301      	adds	r3, #1
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	fbb2 f4f3 	udiv	r4, r2, r3
 8007716:	f7ff fd15 	bl	8007144 <LL_RCC_PLL_GetN>
 800771a:	4603      	mov	r3, r0
 800771c:	fb03 f404 	mul.w	r4, r3, r4
 8007720:	f7ff fd1e 	bl	8007160 <LL_RCC_PLL_GetR>
 8007724:	4603      	mov	r3, r0
 8007726:	0e5b      	lsrs	r3, r3, #25
 8007728:	3301      	adds	r3, #1
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}
 8007738:	0800b37c 	.word	0x0800b37c
 800773c:	00f42400 	.word	0x00f42400
 8007740:	007a1200 	.word	0x007a1200

08007744 <LL_USART_IsEnabled>:
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <LL_USART_IsEnabled+0x18>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <LL_USART_IsEnabled+0x1a>
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <LL_USART_SetStopBitsLength>:
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	605a      	str	r2, [r3, #4]
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <LL_USART_SetHWFlowCtrl>:
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <LL_USART_SetBaudRate>:
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ca:	d11a      	bne.n	8007802 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	005a      	lsls	r2, r3, #1
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	441a      	add	r2, r3
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	b29b      	uxth	r3, r3
 80077de:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80077e6:	4013      	ands	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	60da      	str	r2, [r3, #12]
}
 8007800:	e00a      	b.n	8007818 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	085a      	lsrs	r2, r3, #1
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	441a      	add	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	60da      	str	r2, [r3, #12]
}
 8007818:	bf00      	nop
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ff84 	bl	8007744 <LL_USART_IsEnabled>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d15b      	bne.n	80078fa <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <LL_USART_Init+0xe0>)
 8007848:	4013      	ands	r3, r2
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	6851      	ldr	r1, [r2, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	68d2      	ldr	r2, [r2, #12]
 8007852:	4311      	orrs	r1, r2
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	6912      	ldr	r2, [r2, #16]
 8007858:	4311      	orrs	r1, r2
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	6992      	ldr	r2, [r2, #24]
 800785e:	430a      	orrs	r2, r1
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff7c 	bl	800776a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff89 	bl	8007790 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a21      	ldr	r2, [pc, #132]	; (8007908 <LL_USART_Init+0xe4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d104      	bne.n	8007890 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007886:	2003      	movs	r0, #3
 8007888:	f7ff fc86 	bl	8007198 <LL_RCC_GetUSARTClockFreq>
 800788c:	60b8      	str	r0, [r7, #8]
 800788e:	e023      	b.n	80078d8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <LL_USART_Init+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d104      	bne.n	80078a2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007898:	200c      	movs	r0, #12
 800789a:	f7ff fc7d 	bl	8007198 <LL_RCC_GetUSARTClockFreq>
 800789e:	60b8      	str	r0, [r7, #8]
 80078a0:	e01a      	b.n	80078d8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1a      	ldr	r2, [pc, #104]	; (8007910 <LL_USART_Init+0xec>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d104      	bne.n	80078b4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80078aa:	2030      	movs	r0, #48	; 0x30
 80078ac:	f7ff fc74 	bl	8007198 <LL_RCC_GetUSARTClockFreq>
 80078b0:	60b8      	str	r0, [r7, #8]
 80078b2:	e011      	b.n	80078d8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <LL_USART_Init+0xf0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d104      	bne.n	80078c6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80078bc:	20c0      	movs	r0, #192	; 0xc0
 80078be:	f7ff fd4f 	bl	8007360 <LL_RCC_GetUARTClockFreq>
 80078c2:	60b8      	str	r0, [r7, #8]
 80078c4:	e008      	b.n	80078d8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a13      	ldr	r2, [pc, #76]	; (8007918 <LL_USART_Init+0xf4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d104      	bne.n	80078d8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80078ce:	f44f 7040 	mov.w	r0, #768	; 0x300
 80078d2:	f7ff fd45 	bl	8007360 <LL_RCC_GetUARTClockFreq>
 80078d6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff ff5e 	bl	80077b6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	efff69f3 	.word	0xefff69f3
 8007908:	40013800 	.word	0x40013800
 800790c:	40004400 	.word	0x40004400
 8007910:	40004800 	.word	0x40004800
 8007914:	40004c00 	.word	0x40004c00
 8007918:	40005000 	.word	0x40005000

0800791c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800792a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800792e:	2b84      	cmp	r3, #132	; 0x84
 8007930:	d005      	beq.n	800793e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007932:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	3303      	adds	r3, #3
 800793c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007950:	f000 fefe 	bl	8008750 <vTaskStartScheduler>
  
  return osOK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	bd80      	pop	{r7, pc}

0800795a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800795a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795c:	b089      	sub	sp, #36	; 0x24
 800795e:	af04      	add	r7, sp, #16
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d020      	beq.n	80079ae <osThreadCreate+0x54>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01c      	beq.n	80079ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685c      	ldr	r4, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681d      	ldr	r5, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691e      	ldr	r6, [r3, #16]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ffc8 	bl	800791c <makeFreeRtosPriority>
 800798c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007996:	9202      	str	r2, [sp, #8]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	9100      	str	r1, [sp, #0]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	4632      	mov	r2, r6
 80079a0:	4629      	mov	r1, r5
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fcf5 	bl	8008392 <xTaskCreateStatic>
 80079a8:	4603      	mov	r3, r0
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e01c      	b.n	80079e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685c      	ldr	r4, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ba:	b29e      	uxth	r6, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff ffaa 	bl	800791c <makeFreeRtosPriority>
 80079c8:	4602      	mov	r2, r0
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	9200      	str	r2, [sp, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	4632      	mov	r2, r6
 80079d6:	4629      	mov	r1, r5
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fd37 	bl	800844c <xTaskCreate>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d001      	beq.n	80079e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e000      	b.n	80079ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80079e8:	68fb      	ldr	r3, [r7, #12]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <osDelay+0x16>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	e000      	b.n	8007a0a <osDelay+0x18>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fe6c 	bl	80086e8 <vTaskDelay>
  
  return osOK;
 8007a10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f103 0208 	add.w	r2, r3, #8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f103 0208 	add.w	r2, r3, #8
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f103 0208 	add.w	r2, r3, #8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d103      	bne.n	8007adc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	e00c      	b.n	8007af6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e002      	b.n	8007aea <vListInsert+0x2e>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d2f6      	bcs.n	8007ae4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6892      	ldr	r2, [r2, #8]
 8007b44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d103      	bne.n	8007b62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	1e5a      	subs	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bae:	f001 fc19 	bl	80093e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	441a      	add	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bde:	3b01      	subs	r3, #1
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	; 0xff
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	22ff      	movs	r2, #255	; 0xff
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d114      	bne.n	8007c2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01a      	beq.n	8007c42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3310      	adds	r3, #16
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 ffef 	bl	8008bf4 <xTaskRemoveFromEventList>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c1c:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <xQueueGenericReset+0xcc>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	e009      	b.n	8007c42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3310      	adds	r3, #16
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fef1 	bl	8007a1a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3324      	adds	r3, #36	; 0x24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff feec 	bl	8007a1a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c42:	f001 fbff 	bl	8009444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c46:	2301      	movs	r3, #1
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	fb02 f303 	mul.w	r3, r2, r3
 8007c86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	3348      	adds	r3, #72	; 0x48
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fccb 	bl	8009628 <pvPortMalloc>
 8007c92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	3348      	adds	r3, #72	; 0x48
 8007ca2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 f805 	bl	8007cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e002      	b.n	8007cea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	69b8      	ldr	r0, [r7, #24]
 8007cfa:	f7ff ff43 	bl	8007b84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d26:	2300      	movs	r3, #0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f81d 	bl	8007d6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	4603      	mov	r3, r0
 8007d42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6939      	ldr	r1, [r7, #16]
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff ff7e 	bl	8007c54 <xQueueGenericCreate>
 8007d58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff ffd3 	bl	8007d06 <prvInitialiseMutex>

		return xNewQueue;
 8007d60:	68fb      	ldr	r3, [r7, #12]
	}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08e      	sub	sp, #56	; 0x38
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xQueueGenericSend+0x32>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <xQueueGenericSend+0x40>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <xQueueGenericSend+0x44>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <xQueueGenericSend+0x46>
 8007db0:	2300      	movs	r3, #0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <xQueueGenericSend+0x60>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d103      	bne.n	8007dda <xQueueGenericSend+0x6e>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <xQueueGenericSend+0x72>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericSend+0x74>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xQueueGenericSend+0x8e>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dfa:	f001 f8bb 	bl	8008f74 <xTaskGetSchedulerState>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <xQueueGenericSend+0x9e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <xQueueGenericSend+0xa2>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueGenericSend+0xa4>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	61fb      	str	r3, [r7, #28]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e2a:	f001 fadb 	bl	80093e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d302      	bcc.n	8007e40 <xQueueGenericSend+0xd4>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d129      	bne.n	8007e94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e46:	f000 f9aa 	bl	800819e <prvCopyDataToQueue>
 8007e4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	3324      	adds	r3, #36	; 0x24
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fecb 	bl	8008bf4 <xTaskRemoveFromEventList>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d013      	beq.n	8007e8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <xQueueGenericSend+0x1f8>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	e00a      	b.n	8007e8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e7c:	4b39      	ldr	r3, [pc, #228]	; (8007f64 <xQueueGenericSend+0x1f8>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e8c:	f001 fada 	bl	8009444 <vPortExitCritical>
				return pdPASS;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e063      	b.n	8007f5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e9a:	f001 fad3 	bl	8009444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e05c      	b.n	8007f5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 ff03 	bl	8008cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb6:	f001 fac5 	bl	8009444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eba:	f000 fcb3 	bl	8008824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ebe:	f001 fa91 	bl	80093e4 <vPortEnterCritical>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	d103      	bne.n	8007ed8 <xQueueGenericSend+0x16c>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x182>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eee:	f001 faa9 	bl	8009444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef2:	1d3a      	adds	r2, r7, #4
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fef2 	bl	8008ce4 <xTaskCheckForTimeOut>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d124      	bne.n	8007f50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f08:	f000 fa2b 	bl	8008362 <prvIsQueueFull>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d018      	beq.n	8007f44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	3310      	adds	r3, #16
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fe46 	bl	8008bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f22:	f000 f9cc 	bl	80082be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f26:	f000 fc8b 	bl	8008840 <xTaskResumeAll>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f47f af7c 	bne.w	8007e2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <xQueueGenericSend+0x1f8>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	e772      	b.n	8007e2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f46:	f000 f9ba 	bl	80082be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f4a:	f000 fc79 	bl	8008840 <xTaskResumeAll>
 8007f4e:	e76c      	b.n	8007e2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f52:	f000 f9b4 	bl	80082be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f56:	f000 fc73 	bl	8008840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3738      	adds	r7, #56	; 0x38
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b090      	sub	sp, #64	; 0x40
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <xQueueGenericSendFromISR+0x3c>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <xQueueGenericSendFromISR+0x40>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <xQueueGenericSendFromISR+0x42>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d103      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x6a>
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x6e>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericSendFromISR+0x70>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ff2:	f001 fad9 	bl	80095a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61fa      	str	r2, [r7, #28]
 800800c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800800e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <xQueueGenericSendFromISR+0xbc>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d12f      	bne.n	8008084 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800803a:	f000 f8b0 	bl	800819e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800803e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d112      	bne.n	800806e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d016      	beq.n	800807e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	3324      	adds	r3, #36	; 0x24
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fdcd 	bl	8008bf4 <xTaskRemoveFromEventList>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e007      	b.n	800807e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800806e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008072:	3301      	adds	r3, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	b25a      	sxtb	r2, r3
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800807e:	2301      	movs	r3, #1
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008082:	e001      	b.n	8008088 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008092:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008096:	4618      	mov	r0, r3
 8008098:	3740      	adds	r7, #64	; 0x40
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08e      	sub	sp, #56	; 0x38
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	623b      	str	r3, [r7, #32]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <xQueueReceiveFromISR+0x3a>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <xQueueReceiveFromISR+0x3e>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <xQueueReceiveFromISR+0x40>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	61fb      	str	r3, [r7, #28]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080f8:	f001 fa56 	bl	80095a8 <vPortValidateInterruptPriority>
	__asm volatile
 80080fc:	f3ef 8211 	mrs	r2, BASEPRI
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61ba      	str	r2, [r7, #24]
 8008112:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008114:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008116:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2b00      	cmp	r3, #0
 8008122:	d02f      	beq.n	8008184 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800812a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008132:	f000 f89e 	bl	8008272 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800813e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008146:	d112      	bne.n	800816e <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d016      	beq.n	800817e <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	3310      	adds	r3, #16
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd4d 	bl	8008bf4 <xTaskRemoveFromEventList>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00e      	beq.n	800817e <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e007      	b.n	800817e <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800816e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008172:	3301      	adds	r3, #1
 8008174:	b2db      	uxtb	r3, r3
 8008176:	b25a      	sxtb	r2, r3
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800817e:	2301      	movs	r3, #1
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
 8008182:	e001      	b.n	8008188 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008184:	2300      	movs	r3, #0
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f383 8811 	msr	BASEPRI, r3
}
 8008192:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008196:	4618      	mov	r0, r3
 8008198:	3738      	adds	r7, #56	; 0x38
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10d      	bne.n	80081d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d14d      	bne.n	8008260 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fef1 	bl	8008fb0 <xTaskPriorityDisinherit>
 80081ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
 80081d6:	e043      	b.n	8008260 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6858      	ldr	r0, [r3, #4]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	461a      	mov	r2, r3
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	f001 fc33 	bl	8009a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d32b      	bcc.n	8008260 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	e026      	b.n	8008260 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68d8      	ldr	r0, [r3, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	461a      	mov	r2, r3
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	f001 fc19 	bl	8009a54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	425b      	negs	r3, r3
 800822c:	441a      	add	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d207      	bcs.n	800824e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	425b      	negs	r3, r3
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d105      	bne.n	8008260 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3b01      	subs	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008268:	697b      	ldr	r3, [r7, #20]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d018      	beq.n	80082b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d303      	bcc.n	80082a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68d9      	ldr	r1, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	461a      	mov	r2, r3
 80082b0:	6838      	ldr	r0, [r7, #0]
 80082b2:	f001 fbcf 	bl	8009a54 <memcpy>
	}
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c6:	f001 f88d 	bl	80093e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d2:	e011      	b.n	80082f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d012      	beq.n	8008302 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fc87 	bl	8008bf4 <xTaskRemoveFromEventList>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ec:	f000 fd5c 	bl	8008da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dce9      	bgt.n	80082d4 <prvUnlockQueue+0x16>
 8008300:	e000      	b.n	8008304 <prvUnlockQueue+0x46>
					break;
 8008302:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	22ff      	movs	r2, #255	; 0xff
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800830c:	f001 f89a 	bl	8009444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008310:	f001 f868 	bl	80093e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800831c:	e011      	b.n	8008342 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d012      	beq.n	800834c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3310      	adds	r3, #16
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fc62 	bl	8008bf4 <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008336:	f000 fd37 	bl	8008da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	3b01      	subs	r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dce9      	bgt.n	800831e <prvUnlockQueue+0x60>
 800834a:	e000      	b.n	800834e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800834c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	22ff      	movs	r2, #255	; 0xff
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008356:	f001 f875 	bl	8009444 <vPortExitCritical>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800836a:	f001 f83b 	bl	80093e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	429a      	cmp	r2, r3
 8008378:	d102      	bne.n	8008380 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800837a:	2301      	movs	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	e001      	b.n	8008384 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008384:	f001 f85e 	bl	8009444 <vPortExitCritical>

	return xReturn;
 8008388:	68fb      	ldr	r3, [r7, #12]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008392:	b580      	push	{r7, lr}
 8008394:	b08e      	sub	sp, #56	; 0x38
 8008396:	af04      	add	r7, sp, #16
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <xTaskCreateStatic+0x2a>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	623b      	str	r3, [r7, #32]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	61fb      	str	r3, [r7, #28]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083d8:	23b4      	movs	r3, #180	; 0xb4
 80083da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2bb4      	cmp	r3, #180	; 0xb4
 80083e0:	d00a      	beq.n	80083f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	61bb      	str	r3, [r7, #24]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01e      	beq.n	800843e <xTaskCreateStatic+0xac>
 8008400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01b      	beq.n	800843e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800840e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	2202      	movs	r2, #2
 8008414:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008418:	2300      	movs	r3, #0
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	f107 0314 	add.w	r3, r7, #20
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f851 	bl	80084d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008438:	f000 f8ec 	bl	8008614 <prvAddNewTaskToReadyList>
 800843c:	e001      	b.n	8008442 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008442:	697b      	ldr	r3, [r7, #20]
	}
 8008444:	4618      	mov	r0, r3
 8008446:	3728      	adds	r7, #40	; 0x28
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	; 0x30
 8008450:	af04      	add	r7, sp, #16
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f8e1 	bl	8009628 <pvPortMalloc>
 8008466:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00e      	beq.n	800848c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800846e:	20b4      	movs	r0, #180	; 0xb4
 8008470:	f001 f8da 	bl	8009628 <pvPortMalloc>
 8008474:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	631a      	str	r2, [r3, #48]	; 0x30
 8008482:	e005      	b.n	8008490 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	f001 f99b 	bl	80097c0 <vPortFree>
 800848a:	e001      	b.n	8008490 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800848c:	2300      	movs	r3, #0
 800848e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d017      	beq.n	80084c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	2300      	movs	r3, #0
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f80f 	bl	80084d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084ba:	69f8      	ldr	r0, [r7, #28]
 80084bc:	f000 f8aa 	bl	8008614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084c0:	2301      	movs	r3, #1
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	e002      	b.n	80084cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084cc:	69bb      	ldr	r3, [r7, #24]
	}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084f0:	3b01      	subs	r3, #1
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f023 0307 	bic.w	r3, r3, #7
 80084fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <prvInitialiseNewTask+0x48>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	617b      	str	r3, [r7, #20]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01f      	beq.n	8008566 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008526:	2300      	movs	r3, #0
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	e012      	b.n	8008552 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	7819      	ldrb	r1, [r3, #0]
 8008534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	3334      	adds	r3, #52	; 0x34
 800853c:	460a      	mov	r2, r1
 800853e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d006      	beq.n	800855a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	3301      	adds	r3, #1
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	2b0f      	cmp	r3, #15
 8008556:	d9e9      	bls.n	800852c <prvInitialiseNewTask+0x54>
 8008558:	e000      	b.n	800855c <prvInitialiseNewTask+0x84>
			{
				break;
 800855a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008564:	e003      	b.n	800856e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	2b06      	cmp	r3, #6
 8008572:	d901      	bls.n	8008578 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008574:	2306      	movs	r3, #6
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008582:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	2200      	movs	r2, #0
 8008588:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	3304      	adds	r3, #4
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff fa63 	bl	8007a5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	3318      	adds	r3, #24
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fa5e 	bl	8007a5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f1c3 0207 	rsb	r2, r3, #7
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	334c      	adds	r3, #76	; 0x4c
 80085c8:	2260      	movs	r2, #96	; 0x60
 80085ca:	2100      	movs	r1, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fa4f 	bl	8009a70 <memset>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	4a0c      	ldr	r2, [pc, #48]	; (8008608 <prvInitialiseNewTask+0x130>)
 80085d6:	651a      	str	r2, [r3, #80]	; 0x50
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	4a0c      	ldr	r2, [pc, #48]	; (800860c <prvInitialiseNewTask+0x134>)
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	4a0b      	ldr	r2, [pc, #44]	; (8008610 <prvInitialiseNewTask+0x138>)
 80085e2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	69b8      	ldr	r0, [r7, #24]
 80085ea:	f000 fdcd 	bl	8009188 <pxPortInitialiseStack>
 80085ee:	4602      	mov	r2, r0
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008600:	bf00      	nop
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	0800b3cc 	.word	0x0800b3cc
 800860c:	0800b3ec 	.word	0x0800b3ec
 8008610:	0800b3ac 	.word	0x0800b3ac

08008614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800861c:	f000 fee2 	bl	80093e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008620:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <prvAddNewTaskToReadyList+0xb8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	4a29      	ldr	r2, [pc, #164]	; (80086cc <prvAddNewTaskToReadyList+0xb8>)
 8008628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800862a:	4b29      	ldr	r3, [pc, #164]	; (80086d0 <prvAddNewTaskToReadyList+0xbc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008632:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <prvAddNewTaskToReadyList+0xbc>)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008638:	4b24      	ldr	r3, [pc, #144]	; (80086cc <prvAddNewTaskToReadyList+0xb8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d110      	bne.n	8008662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008640:	f000 fbd6 	bl	8008df0 <prvInitialiseTaskLists>
 8008644:	e00d      	b.n	8008662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <prvAddNewTaskToReadyList+0xc0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800864e:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <prvAddNewTaskToReadyList+0xbc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	429a      	cmp	r2, r3
 800865a:	d802      	bhi.n	8008662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800865c:	4a1c      	ldr	r2, [pc, #112]	; (80086d0 <prvAddNewTaskToReadyList+0xbc>)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <prvAddNewTaskToReadyList+0xc4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <prvAddNewTaskToReadyList+0xc4>)
 800866a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	2201      	movs	r2, #1
 8008672:	409a      	lsls	r2, r3
 8008674:	4b19      	ldr	r3, [pc, #100]	; (80086dc <prvAddNewTaskToReadyList+0xc8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4313      	orrs	r3, r2
 800867a:	4a18      	ldr	r2, [pc, #96]	; (80086dc <prvAddNewTaskToReadyList+0xc8>)
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a15      	ldr	r2, [pc, #84]	; (80086e0 <prvAddNewTaskToReadyList+0xcc>)
 800868c:	441a      	add	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	4619      	mov	r1, r3
 8008694:	4610      	mov	r0, r2
 8008696:	f7ff f9ed 	bl	8007a74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800869a:	f000 fed3 	bl	8009444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800869e:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <prvAddNewTaskToReadyList+0xc0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <prvAddNewTaskToReadyList+0xbc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d207      	bcs.n	80086c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <prvAddNewTaskToReadyList+0xd0>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20000458 	.word	0x20000458
 80086d0:	20000358 	.word	0x20000358
 80086d4:	20000464 	.word	0x20000464
 80086d8:	20000474 	.word	0x20000474
 80086dc:	20000460 	.word	0x20000460
 80086e0:	2000035c 	.word	0x2000035c
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d017      	beq.n	800872a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086fa:	4b13      	ldr	r3, [pc, #76]	; (8008748 <vTaskDelay+0x60>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <vTaskDelay+0x30>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	60bb      	str	r3, [r7, #8]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008718:	f000 f884 	bl	8008824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800871c:	2100      	movs	r1, #0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fccc 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008724:	f000 f88c 	bl	8008840 <xTaskResumeAll>
 8008728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d107      	bne.n	8008740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <vTaskDelay+0x64>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000480 	.word	0x20000480
 800874c:	e000ed04 	.word	0xe000ed04

08008750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	; 0x28
 8008754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800875e:	463a      	mov	r2, r7
 8008760:	1d39      	adds	r1, r7, #4
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	4618      	mov	r0, r3
 8008768:	f7f8 fa16 	bl	8000b98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	9202      	str	r2, [sp, #8]
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	2300      	movs	r3, #0
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	460a      	mov	r2, r1
 800877e:	4921      	ldr	r1, [pc, #132]	; (8008804 <vTaskStartScheduler+0xb4>)
 8008780:	4821      	ldr	r0, [pc, #132]	; (8008808 <vTaskStartScheduler+0xb8>)
 8008782:	f7ff fe06 	bl	8008392 <xTaskCreateStatic>
 8008786:	4603      	mov	r3, r0
 8008788:	4a20      	ldr	r2, [pc, #128]	; (800880c <vTaskStartScheduler+0xbc>)
 800878a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800878c:	4b1f      	ldr	r3, [pc, #124]	; (800880c <vTaskStartScheduler+0xbc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e001      	b.n	800879e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d11b      	bne.n	80087dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	613b      	str	r3, [r7, #16]
}
 80087b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <vTaskStartScheduler+0xc0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	334c      	adds	r3, #76	; 0x4c
 80087be:	4a15      	ldr	r2, [pc, #84]	; (8008814 <vTaskStartScheduler+0xc4>)
 80087c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <vTaskStartScheduler+0xc8>)
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <vTaskStartScheduler+0xcc>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <vTaskStartScheduler+0xd0>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087d6:	f000 fd63 	bl	80092a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087da:	e00e      	b.n	80087fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d10a      	bne.n	80087fa <vTaskStartScheduler+0xaa>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60fb      	str	r3, [r7, #12]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <vTaskStartScheduler+0xa8>
}
 80087fa:	bf00      	nop
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	0800b35c 	.word	0x0800b35c
 8008808:	08008dc1 	.word	0x08008dc1
 800880c:	2000047c 	.word	0x2000047c
 8008810:	20000358 	.word	0x20000358
 8008814:	20000010 	.word	0x20000010
 8008818:	20000478 	.word	0x20000478
 800881c:	20000464 	.word	0x20000464
 8008820:	2000045c 	.word	0x2000045c

08008824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <vTaskSuspendAll+0x18>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	4a03      	ldr	r2, [pc, #12]	; (800883c <vTaskSuspendAll+0x18>)
 8008830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008832:	bf00      	nop
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	20000480 	.word	0x20000480

08008840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800884e:	4b41      	ldr	r3, [pc, #260]	; (8008954 <xTaskResumeAll+0x114>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <xTaskResumeAll+0x2c>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	603b      	str	r3, [r7, #0]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800886c:	f000 fdba 	bl	80093e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008870:	4b38      	ldr	r3, [pc, #224]	; (8008954 <xTaskResumeAll+0x114>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3b01      	subs	r3, #1
 8008876:	4a37      	ldr	r2, [pc, #220]	; (8008954 <xTaskResumeAll+0x114>)
 8008878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887a:	4b36      	ldr	r3, [pc, #216]	; (8008954 <xTaskResumeAll+0x114>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d161      	bne.n	8008946 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <xTaskResumeAll+0x118>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d05d      	beq.n	8008946 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800888a:	e02e      	b.n	80088ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888c:	4b33      	ldr	r3, [pc, #204]	; (800895c <xTaskResumeAll+0x11c>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3318      	adds	r3, #24
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff f948 	bl	8007b2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff f943 	bl	8007b2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	2201      	movs	r2, #1
 80088ae:	409a      	lsls	r2, r3
 80088b0:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <xTaskResumeAll+0x120>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <xTaskResumeAll+0x120>)
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4a27      	ldr	r2, [pc, #156]	; (8008964 <xTaskResumeAll+0x124>)
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f7ff f8cf 	bl	8007a74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	4b23      	ldr	r3, [pc, #140]	; (8008968 <xTaskResumeAll+0x128>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d302      	bcc.n	80088ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088e4:	4b21      	ldr	r3, [pc, #132]	; (800896c <xTaskResumeAll+0x12c>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088ea:	4b1c      	ldr	r3, [pc, #112]	; (800895c <xTaskResumeAll+0x11c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1cc      	bne.n	800888c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088f8:	f000 fb1c 	bl	8008f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088fc:	4b1c      	ldr	r3, [pc, #112]	; (8008970 <xTaskResumeAll+0x130>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d010      	beq.n	800892a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008908:	f000 f836 	bl	8008978 <xTaskIncrementTick>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <xTaskResumeAll+0x12c>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3b01      	subs	r3, #1
 800891c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f1      	bne.n	8008908 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008924:	4b12      	ldr	r3, [pc, #72]	; (8008970 <xTaskResumeAll+0x130>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800892a:	4b10      	ldr	r3, [pc, #64]	; (800896c <xTaskResumeAll+0x12c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008932:	2301      	movs	r3, #1
 8008934:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <xTaskResumeAll+0x134>)
 8008938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008946:	f000 fd7d 	bl	8009444 <vPortExitCritical>

	return xAlreadyYielded;
 800894a:	68bb      	ldr	r3, [r7, #8]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	20000480 	.word	0x20000480
 8008958:	20000458 	.word	0x20000458
 800895c:	20000418 	.word	0x20000418
 8008960:	20000460 	.word	0x20000460
 8008964:	2000035c 	.word	0x2000035c
 8008968:	20000358 	.word	0x20000358
 800896c:	2000046c 	.word	0x2000046c
 8008970:	20000468 	.word	0x20000468
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008982:	4b4e      	ldr	r3, [pc, #312]	; (8008abc <xTaskIncrementTick+0x144>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 808e 	bne.w	8008aa8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800898c:	4b4c      	ldr	r3, [pc, #304]	; (8008ac0 <xTaskIncrementTick+0x148>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008994:	4a4a      	ldr	r2, [pc, #296]	; (8008ac0 <xTaskIncrementTick+0x148>)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d120      	bne.n	80089e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80089a0:	4b48      	ldr	r3, [pc, #288]	; (8008ac4 <xTaskIncrementTick+0x14c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	603b      	str	r3, [r7, #0]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <xTaskIncrementTick+0x46>
 80089c0:	4b40      	ldr	r3, [pc, #256]	; (8008ac4 <xTaskIncrementTick+0x14c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	4b40      	ldr	r3, [pc, #256]	; (8008ac8 <xTaskIncrementTick+0x150>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a3e      	ldr	r2, [pc, #248]	; (8008ac4 <xTaskIncrementTick+0x14c>)
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4a3e      	ldr	r2, [pc, #248]	; (8008ac8 <xTaskIncrementTick+0x150>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	4b3d      	ldr	r3, [pc, #244]	; (8008acc <xTaskIncrementTick+0x154>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <xTaskIncrementTick+0x154>)
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	f000 faa9 	bl	8008f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089e2:	4b3b      	ldr	r3, [pc, #236]	; (8008ad0 <xTaskIncrementTick+0x158>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d348      	bcc.n	8008a7e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ec:	4b35      	ldr	r3, [pc, #212]	; (8008ac4 <xTaskIncrementTick+0x14c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f6:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <xTaskIncrementTick+0x158>)
 80089f8:	f04f 32ff 	mov.w	r2, #4294967295
 80089fc:	601a      	str	r2, [r3, #0]
					break;
 80089fe:	e03e      	b.n	8008a7e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a00:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <xTaskIncrementTick+0x14c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d203      	bcs.n	8008a20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a18:	4a2d      	ldr	r2, [pc, #180]	; (8008ad0 <xTaskIncrementTick+0x158>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a1e:	e02e      	b.n	8008a7e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff f882 	bl	8007b2e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	3318      	adds	r3, #24
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff f879 	bl	8007b2e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	4b23      	ldr	r3, [pc, #140]	; (8008ad4 <xTaskIncrementTick+0x15c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	4a22      	ldr	r2, [pc, #136]	; (8008ad4 <xTaskIncrementTick+0x15c>)
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a1f      	ldr	r2, [pc, #124]	; (8008ad8 <xTaskIncrementTick+0x160>)
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7ff f805 	bl	8007a74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <xTaskIncrementTick+0x164>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d3b9      	bcc.n	80089ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a7c:	e7b6      	b.n	80089ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a7e:	4b17      	ldr	r3, [pc, #92]	; (8008adc <xTaskIncrementTick+0x164>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4914      	ldr	r1, [pc, #80]	; (8008ad8 <xTaskIncrementTick+0x160>)
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d901      	bls.n	8008a9a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <xTaskIncrementTick+0x168>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d007      	beq.n	8008ab2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e004      	b.n	8008ab2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <xTaskIncrementTick+0x16c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a0d      	ldr	r2, [pc, #52]	; (8008ae4 <xTaskIncrementTick+0x16c>)
 8008ab0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ab2:	697b      	ldr	r3, [r7, #20]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000480 	.word	0x20000480
 8008ac0:	2000045c 	.word	0x2000045c
 8008ac4:	20000410 	.word	0x20000410
 8008ac8:	20000414 	.word	0x20000414
 8008acc:	20000470 	.word	0x20000470
 8008ad0:	20000478 	.word	0x20000478
 8008ad4:	20000460 	.word	0x20000460
 8008ad8:	2000035c 	.word	0x2000035c
 8008adc:	20000358 	.word	0x20000358
 8008ae0:	2000046c 	.word	0x2000046c
 8008ae4:	20000468 	.word	0x20000468

08008ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008aee:	4b29      	ldr	r3, [pc, #164]	; (8008b94 <vTaskSwitchContext+0xac>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008af6:	4b28      	ldr	r3, [pc, #160]	; (8008b98 <vTaskSwitchContext+0xb0>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008afc:	e044      	b.n	8008b88 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008afe:	4b26      	ldr	r3, [pc, #152]	; (8008b98 <vTaskSwitchContext+0xb0>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b04:	4b25      	ldr	r3, [pc, #148]	; (8008b9c <vTaskSwitchContext+0xb4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	fab3 f383 	clz	r3, r3
 8008b10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	f1c3 031f 	rsb	r3, r3, #31
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	4921      	ldr	r1, [pc, #132]	; (8008ba0 <vTaskSwitchContext+0xb8>)
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	440b      	add	r3, r1
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <vTaskSwitchContext+0x5a>
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <vTaskSwitchContext+0xb8>)
 8008b50:	4413      	add	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3308      	adds	r3, #8
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d104      	bne.n	8008b74 <vTaskSwitchContext+0x8c>
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <vTaskSwitchContext+0xbc>)
 8008b7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <vTaskSwitchContext+0xbc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	334c      	adds	r3, #76	; 0x4c
 8008b84:	4a08      	ldr	r2, [pc, #32]	; (8008ba8 <vTaskSwitchContext+0xc0>)
 8008b86:	6013      	str	r3, [r2, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	20000480 	.word	0x20000480
 8008b98:	2000046c 	.word	0x2000046c
 8008b9c:	20000460 	.word	0x20000460
 8008ba0:	2000035c 	.word	0x2000035c
 8008ba4:	20000358 	.word	0x20000358
 8008ba8:	20000010 	.word	0x20000010

08008bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	60fb      	str	r3, [r7, #12]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bd2:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <vTaskPlaceOnEventList+0x44>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7fe ff6e 	bl	8007abc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008be0:	2101      	movs	r1, #1
 8008be2:	6838      	ldr	r0, [r7, #0]
 8008be4:	f000 fa6a 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000358 	.word	0x20000358

08008bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	60fb      	str	r3, [r7, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3318      	adds	r3, #24
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe ff82 	bl	8007b2e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ca0 <xTaskRemoveFromEventList+0xac>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11c      	bne.n	8008c6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3304      	adds	r3, #4
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe ff79 	bl	8007b2e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	2201      	movs	r2, #1
 8008c42:	409a      	lsls	r2, r3
 8008c44:	4b17      	ldr	r3, [pc, #92]	; (8008ca4 <xTaskRemoveFromEventList+0xb0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	4a16      	ldr	r2, [pc, #88]	; (8008ca4 <xTaskRemoveFromEventList+0xb0>)
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <xTaskRemoveFromEventList+0xb4>)
 8008c5c:	441a      	add	r2, r3
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4619      	mov	r1, r3
 8008c64:	4610      	mov	r0, r2
 8008c66:	f7fe ff05 	bl	8007a74 <vListInsertEnd>
 8008c6a:	e005      	b.n	8008c78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	3318      	adds	r3, #24
 8008c70:	4619      	mov	r1, r3
 8008c72:	480e      	ldr	r0, [pc, #56]	; (8008cac <xTaskRemoveFromEventList+0xb8>)
 8008c74:	f7fe fefe 	bl	8007a74 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <xTaskRemoveFromEventList+0xbc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d905      	bls.n	8008c92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c86:	2301      	movs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <xTaskRemoveFromEventList+0xc0>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	e001      	b.n	8008c96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c96:	697b      	ldr	r3, [r7, #20]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000480 	.word	0x20000480
 8008ca4:	20000460 	.word	0x20000460
 8008ca8:	2000035c 	.word	0x2000035c
 8008cac:	20000418 	.word	0x20000418
 8008cb0:	20000358 	.word	0x20000358
 8008cb4:	2000046c 	.word	0x2000046c

08008cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <vTaskInternalSetTimeOutState+0x24>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <vTaskInternalSetTimeOutState+0x28>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000470 	.word	0x20000470
 8008ce0:	2000045c 	.word	0x2000045c

08008ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	613b      	str	r3, [r7, #16]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d26:	f000 fb5d 	bl	80093e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <xTaskCheckForTimeOut+0xbc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d102      	bne.n	8008d4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
 8008d48:	e023      	b.n	8008d92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <xTaskCheckForTimeOut+0xc0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d007      	beq.n	8008d66 <xTaskCheckForTimeOut+0x82>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d302      	bcc.n	8008d66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	61fb      	str	r3, [r7, #28]
 8008d64:	e015      	b.n	8008d92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d20b      	bcs.n	8008d88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff ff9b 	bl	8008cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e004      	b.n	8008d92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d92:	f000 fb57 	bl	8009444 <vPortExitCritical>

	return xReturn;
 8008d96:	69fb      	ldr	r3, [r7, #28]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3720      	adds	r7, #32
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	2000045c 	.word	0x2000045c
 8008da4:	20000470 	.word	0x20000470

08008da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dac:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <vTaskMissedYield+0x14>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
}
 8008db2:	bf00      	nop
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	2000046c 	.word	0x2000046c

08008dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dc8:	f000 f852 	bl	8008e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <prvIdleTask+0x28>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d9f9      	bls.n	8008dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <prvIdleTask+0x2c>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008de4:	e7f0      	b.n	8008dc8 <prvIdleTask+0x8>
 8008de6:	bf00      	nop
 8008de8:	2000035c 	.word	0x2000035c
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e00c      	b.n	8008e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <prvInitialiseTaskLists+0x60>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fe05 	bl	8007a1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3301      	adds	r3, #1
 8008e14:	607b      	str	r3, [r7, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	d9ef      	bls.n	8008dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e1c:	480d      	ldr	r0, [pc, #52]	; (8008e54 <prvInitialiseTaskLists+0x64>)
 8008e1e:	f7fe fdfc 	bl	8007a1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e22:	480d      	ldr	r0, [pc, #52]	; (8008e58 <prvInitialiseTaskLists+0x68>)
 8008e24:	f7fe fdf9 	bl	8007a1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e28:	480c      	ldr	r0, [pc, #48]	; (8008e5c <prvInitialiseTaskLists+0x6c>)
 8008e2a:	f7fe fdf6 	bl	8007a1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e2e:	480c      	ldr	r0, [pc, #48]	; (8008e60 <prvInitialiseTaskLists+0x70>)
 8008e30:	f7fe fdf3 	bl	8007a1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e34:	480b      	ldr	r0, [pc, #44]	; (8008e64 <prvInitialiseTaskLists+0x74>)
 8008e36:	f7fe fdf0 	bl	8007a1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <prvInitialiseTaskLists+0x78>)
 8008e3c:	4a05      	ldr	r2, [pc, #20]	; (8008e54 <prvInitialiseTaskLists+0x64>)
 8008e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <prvInitialiseTaskLists+0x7c>)
 8008e42:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <prvInitialiseTaskLists+0x68>)
 8008e44:	601a      	str	r2, [r3, #0]
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	2000035c 	.word	0x2000035c
 8008e54:	200003e8 	.word	0x200003e8
 8008e58:	200003fc 	.word	0x200003fc
 8008e5c:	20000418 	.word	0x20000418
 8008e60:	2000042c 	.word	0x2000042c
 8008e64:	20000444 	.word	0x20000444
 8008e68:	20000410 	.word	0x20000410
 8008e6c:	20000414 	.word	0x20000414

08008e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e76:	e019      	b.n	8008eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e78:	f000 fab4 	bl	80093e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <prvCheckTasksWaitingTermination+0x50>)
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fe50 	bl	8007b2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <prvCheckTasksWaitingTermination+0x54>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	4a0b      	ldr	r2, [pc, #44]	; (8008ec4 <prvCheckTasksWaitingTermination+0x54>)
 8008e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e98:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <prvCheckTasksWaitingTermination+0x58>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <prvCheckTasksWaitingTermination+0x58>)
 8008ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ea2:	f000 facf 	bl	8009444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f810 	bl	8008ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <prvCheckTasksWaitingTermination+0x58>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e1      	bne.n	8008e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	2000042c 	.word	0x2000042c
 8008ec4:	20000458 	.word	0x20000458
 8008ec8:	20000440 	.word	0x20000440

08008ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	334c      	adds	r3, #76	; 0x4c
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fe39 	bl	8009b50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d108      	bne.n	8008efa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fc67 	bl	80097c0 <vPortFree>
				vPortFree( pxTCB );
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fc64 	bl	80097c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ef8:	e018      	b.n	8008f2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d103      	bne.n	8008f0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fc5b 	bl	80097c0 <vPortFree>
	}
 8008f0a:	e00f      	b.n	8008f2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d00a      	beq.n	8008f2c <prvDeleteTCB+0x60>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60fb      	str	r3, [r7, #12]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <prvDeleteTCB+0x5e>
	}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <prvResetNextTaskUnblockTime+0x38>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <prvResetNextTaskUnblockTime+0x3c>)
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f4c:	e008      	b.n	8008f60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4e:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <prvResetNextTaskUnblockTime+0x38>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4a04      	ldr	r2, [pc, #16]	; (8008f70 <prvResetNextTaskUnblockTime+0x3c>)
 8008f5e:	6013      	str	r3, [r2, #0]
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20000410 	.word	0x20000410
 8008f70:	20000478 	.word	0x20000478

08008f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <xTaskGetSchedulerState+0x34>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f82:	2301      	movs	r3, #1
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	e008      	b.n	8008f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f88:	4b08      	ldr	r3, [pc, #32]	; (8008fac <xTaskGetSchedulerState+0x38>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f90:	2302      	movs	r3, #2
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e001      	b.n	8008f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f96:	2300      	movs	r3, #0
 8008f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f9a:	687b      	ldr	r3, [r7, #4]
	}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000464 	.word	0x20000464
 8008fac:	20000480 	.word	0x20000480

08008fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d06e      	beq.n	80090a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fc6:	4b3a      	ldr	r3, [pc, #232]	; (80090b0 <xTaskPriorityDisinherit+0x100>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d00a      	beq.n	8008fe6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60bb      	str	r3, [r7, #8]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009008:	1e5a      	subs	r2, r3, #1
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009016:	429a      	cmp	r2, r3
 8009018:	d044      	beq.n	80090a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901e:	2b00      	cmp	r3, #0
 8009020:	d140      	bne.n	80090a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	3304      	adds	r3, #4
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fd81 	bl	8007b2e <uxListRemove>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d115      	bne.n	800905e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009036:	491f      	ldr	r1, [pc, #124]	; (80090b4 <xTaskPriorityDisinherit+0x104>)
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <xTaskPriorityDisinherit+0xae>
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	2201      	movs	r2, #1
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	43da      	mvns	r2, r3
 8009054:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <xTaskPriorityDisinherit+0x108>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4013      	ands	r3, r2
 800905a:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <xTaskPriorityDisinherit+0x108>)
 800905c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	f1c3 0207 	rsb	r2, r3, #7
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	2201      	movs	r2, #1
 8009078:	409a      	lsls	r2, r3
 800907a:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <xTaskPriorityDisinherit+0x108>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4313      	orrs	r3, r2
 8009080:	4a0d      	ldr	r2, [pc, #52]	; (80090b8 <xTaskPriorityDisinherit+0x108>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a08      	ldr	r2, [pc, #32]	; (80090b4 <xTaskPriorityDisinherit+0x104>)
 8009092:	441a      	add	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fcea 	bl	8007a74 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090a4:	697b      	ldr	r3, [r7, #20]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000358 	.word	0x20000358
 80090b4:	2000035c 	.word	0x2000035c
 80090b8:	20000460 	.word	0x20000460

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <prvAddCurrentTaskToDelayedList+0xb0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b28      	ldr	r3, [pc, #160]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fd2b 	bl	8007b2e <uxListRemove>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090de:	4b24      	ldr	r3, [pc, #144]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	2201      	movs	r2, #1
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43da      	mvns	r2, r3
 80090ec:	4b21      	ldr	r3, [pc, #132]	; (8009174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4013      	ands	r3, r2
 80090f2:	4a20      	ldr	r2, [pc, #128]	; (8009174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d10a      	bne.n	8009114 <prvAddCurrentTaskToDelayedList+0x58>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3304      	adds	r3, #4
 800910a:	4619      	mov	r1, r3
 800910c:	481a      	ldr	r0, [pc, #104]	; (8009178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800910e:	f7fe fcb1 	bl	8007a74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009112:	e026      	b.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	429a      	cmp	r2, r3
 800912a:	d209      	bcs.n	8009140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800912c:	4b13      	ldr	r3, [pc, #76]	; (800917c <prvAddCurrentTaskToDelayedList+0xc0>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3304      	adds	r3, #4
 8009136:	4619      	mov	r1, r3
 8009138:	4610      	mov	r0, r2
 800913a:	f7fe fcbf 	bl	8007abc <vListInsert>
}
 800913e:	e010      	b.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3304      	adds	r3, #4
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f7fe fcb5 	bl	8007abc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	d202      	bcs.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800915c:	4a09      	ldr	r2, [pc, #36]	; (8009184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6013      	str	r3, [r2, #0]
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	2000045c 	.word	0x2000045c
 8009170:	20000358 	.word	0x20000358
 8009174:	20000460 	.word	0x20000460
 8009178:	20000444 	.word	0x20000444
 800917c:	20000414 	.word	0x20000414
 8009180:	20000410 	.word	0x20000410
 8009184:	20000478 	.word	0x20000478

08009188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3b04      	subs	r3, #4
 8009198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091b8:	4a0c      	ldr	r2, [pc, #48]	; (80091ec <pxPortInitialiseStack+0x64>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3b14      	subs	r3, #20
 80091c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f06f 0202 	mvn.w	r2, #2
 80091d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b20      	subs	r3, #32
 80091dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	080091f1 	.word	0x080091f1

080091f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <prvTaskExitError+0x54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d00a      	beq.n	800921a <prvTaskExitError+0x2a>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <prvTaskExitError+0x28>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800922e:	bf00      	nop
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0fc      	beq.n	8009230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	2000000c 	.word	0x2000000c
	...

08009250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <pxCurrentTCBConst2>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	f380 8809 	msr	PSP, r0
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	4770      	bx	lr
 800926c:	f3af 8000 	nop.w

08009270 <pxCurrentTCBConst2>:
 8009270:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009278:	4808      	ldr	r0, [pc, #32]	; (800929c <prvPortStartFirstTask+0x24>)
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f380 8808 	msr	MSP, r0
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8814 	msr	CONTROL, r0
 800928a:	b662      	cpsie	i
 800928c:	b661      	cpsie	f
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	df00      	svc	0
 8009298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800929a:	bf00      	nop
 800929c:	e000ed08 	.word	0xe000ed08

080092a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092a6:	4b46      	ldr	r3, [pc, #280]	; (80093c0 <xPortStartScheduler+0x120>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a46      	ldr	r2, [pc, #280]	; (80093c4 <xPortStartScheduler+0x124>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10a      	bne.n	80092c6 <xPortStartScheduler+0x26>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092c6:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <xPortStartScheduler+0x120>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a3f      	ldr	r2, [pc, #252]	; (80093c8 <xPortStartScheduler+0x128>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10a      	bne.n	80092e6 <xPortStartScheduler+0x46>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092e6:	4b39      	ldr	r3, [pc, #228]	; (80093cc <xPortStartScheduler+0x12c>)
 80092e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009308:	b2da      	uxtb	r2, r3
 800930a:	4b31      	ldr	r3, [pc, #196]	; (80093d0 <xPortStartScheduler+0x130>)
 800930c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800930e:	4b31      	ldr	r3, [pc, #196]	; (80093d4 <xPortStartScheduler+0x134>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009314:	e009      	b.n	800932a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009316:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <xPortStartScheduler+0x134>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3b01      	subs	r3, #1
 800931c:	4a2d      	ldr	r2, [pc, #180]	; (80093d4 <xPortStartScheduler+0x134>)
 800931e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d0ef      	beq.n	8009316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009336:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <xPortStartScheduler+0x134>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f1c3 0307 	rsb	r3, r3, #7
 800933e:	2b04      	cmp	r3, #4
 8009340:	d00a      	beq.n	8009358 <xPortStartScheduler+0xb8>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60bb      	str	r3, [r7, #8]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <xPortStartScheduler+0x134>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <xPortStartScheduler+0x134>)
 8009360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009362:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <xPortStartScheduler+0x134>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800936a:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <xPortStartScheduler+0x134>)
 800936c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	b2da      	uxtb	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009376:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <xPortStartScheduler+0x138>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <xPortStartScheduler+0x138>)
 800937c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <xPortStartScheduler+0x138>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <xPortStartScheduler+0x138>)
 8009388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800938c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800938e:	f000 f8dd 	bl	800954c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <xPortStartScheduler+0x13c>)
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009398:	f000 f8fc 	bl	8009594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xPortStartScheduler+0x140>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0f      	ldr	r2, [pc, #60]	; (80093e0 <xPortStartScheduler+0x140>)
 80093a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093a8:	f7ff ff66 	bl	8009278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093ac:	f7ff fb9c 	bl	8008ae8 <vTaskSwitchContext>
	prvTaskExitError();
 80093b0:	f7ff ff1e 	bl	80091f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	e000ed00 	.word	0xe000ed00
 80093c4:	410fc271 	.word	0x410fc271
 80093c8:	410fc270 	.word	0x410fc270
 80093cc:	e000e400 	.word	0xe000e400
 80093d0:	20000484 	.word	0x20000484
 80093d4:	20000488 	.word	0x20000488
 80093d8:	e000ed20 	.word	0xe000ed20
 80093dc:	2000000c 	.word	0x2000000c
 80093e0:	e000ef34 	.word	0xe000ef34

080093e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	607b      	str	r3, [r7, #4]
}
 80093fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <vPortEnterCritical+0x58>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a0d      	ldr	r2, [pc, #52]	; (800943c <vPortEnterCritical+0x58>)
 8009406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009408:	4b0c      	ldr	r3, [pc, #48]	; (800943c <vPortEnterCritical+0x58>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d10f      	bne.n	8009430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortEnterCritical+0x5c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <vPortEnterCritical+0x4c>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	603b      	str	r3, [r7, #0]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <vPortEnterCritical+0x4a>
	}
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	2000000c 	.word	0x2000000c
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <vPortExitCritical+0x50>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <vPortExitCritical+0x24>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	607b      	str	r3, [r7, #4]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <vPortExitCritical+0x50>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	4a09      	ldr	r2, [pc, #36]	; (8009494 <vPortExitCritical+0x50>)
 8009470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009472:	4b08      	ldr	r3, [pc, #32]	; (8009494 <vPortExitCritical+0x50>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <vPortExitCritical+0x42>
 800947a:	2300      	movs	r3, #0
 800947c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f383 8811 	msr	BASEPRI, r3
}
 8009484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000000c 	.word	0x2000000c
	...

080094a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094a0:	f3ef 8009 	mrs	r0, PSP
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4b15      	ldr	r3, [pc, #84]	; (8009500 <pxCurrentTCBConst>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	f01e 0f10 	tst.w	lr, #16
 80094b0:	bf08      	it	eq
 80094b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094c4:	f380 8811 	msr	BASEPRI, r0
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f7ff fb0a 	bl	8008ae8 <vTaskSwitchContext>
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f380 8811 	msr	BASEPRI, r0
 80094dc:	bc09      	pop	{r0, r3}
 80094de:	6819      	ldr	r1, [r3, #0]
 80094e0:	6808      	ldr	r0, [r1, #0]
 80094e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	f01e 0f10 	tst.w	lr, #16
 80094ea:	bf08      	it	eq
 80094ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094f0:	f380 8809 	msr	PSP, r0
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst>:
 8009500:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	607b      	str	r3, [r7, #4]
}
 8009520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009522:	f7ff fa29 	bl	8008978 <xTaskIncrementTick>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <SysTick_Handler+0x40>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f383 8811 	msr	BASEPRI, r3
}
 800953e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <vPortSetupTimerInterrupt+0x38>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <vPortSetupTimerInterrupt+0x3c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0a      	ldr	r2, [pc, #40]	; (800958c <vPortSetupTimerInterrupt+0x40>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	099b      	lsrs	r3, r3, #6
 8009568:	4a09      	ldr	r2, [pc, #36]	; (8009590 <vPortSetupTimerInterrupt+0x44>)
 800956a:	3b01      	subs	r3, #1
 800956c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800956e:	4b04      	ldr	r3, [pc, #16]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010
 8009584:	e000e018 	.word	0xe000e018
 8009588:	20000000 	.word	0x20000000
 800958c:	10624dd3 	.word	0x10624dd3
 8009590:	e000e014 	.word	0xe000e014

08009594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095a4 <vPortEnableVFP+0x10>
 8009598:	6801      	ldr	r1, [r0, #0]
 800959a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800959e:	6001      	str	r1, [r0, #0]
 80095a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095a2:	bf00      	nop
 80095a4:	e000ed88 	.word	0xe000ed88

080095a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ae:	f3ef 8305 	mrs	r3, IPSR
 80095b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d914      	bls.n	80095e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095ba:	4a17      	ldr	r2, [pc, #92]	; (8009618 <vPortValidateInterruptPriority+0x70>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095c4:	4b15      	ldr	r3, [pc, #84]	; (800961c <vPortValidateInterruptPriority+0x74>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	7afa      	ldrb	r2, [r7, #11]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d20a      	bcs.n	80095e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095e4:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <vPortValidateInterruptPriority+0x78>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <vPortValidateInterruptPriority+0x7c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d90a      	bls.n	800960a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	603b      	str	r3, [r7, #0]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <vPortValidateInterruptPriority+0x60>
	}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	e000e3f0 	.word	0xe000e3f0
 800961c:	20000484 	.word	0x20000484
 8009620:	e000ed0c 	.word	0xe000ed0c
 8009624:	20000488 	.word	0x20000488

08009628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009634:	f7ff f8f6 	bl	8008824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009638:	4b5b      	ldr	r3, [pc, #364]	; (80097a8 <pvPortMalloc+0x180>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009640:	f000 f920 	bl	8009884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009644:	4b59      	ldr	r3, [pc, #356]	; (80097ac <pvPortMalloc+0x184>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4013      	ands	r3, r2
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 8093 	bne.w	8009778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01d      	beq.n	8009694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009658:	2208      	movs	r2, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d014      	beq.n	8009694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f023 0307 	bic.w	r3, r3, #7
 8009670:	3308      	adds	r3, #8
 8009672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <pvPortMalloc+0x6c>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	617b      	str	r3, [r7, #20]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d06e      	beq.n	8009778 <pvPortMalloc+0x150>
 800969a:	4b45      	ldr	r3, [pc, #276]	; (80097b0 <pvPortMalloc+0x188>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d869      	bhi.n	8009778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096a4:	4b43      	ldr	r3, [pc, #268]	; (80097b4 <pvPortMalloc+0x18c>)
 80096a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096a8:	4b42      	ldr	r3, [pc, #264]	; (80097b4 <pvPortMalloc+0x18c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ae:	e004      	b.n	80096ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d903      	bls.n	80096cc <pvPortMalloc+0xa4>
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f1      	bne.n	80096b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096cc:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <pvPortMalloc+0x180>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d050      	beq.n	8009778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2208      	movs	r2, #8
 80096dc:	4413      	add	r3, r2
 80096de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	2308      	movs	r3, #8
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d91f      	bls.n	8009738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <pvPortMalloc+0xf8>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	613b      	str	r3, [r7, #16]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009732:	69b8      	ldr	r0, [r7, #24]
 8009734:	f000 f908 	bl	8009948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <pvPortMalloc+0x188>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a1b      	ldr	r2, [pc, #108]	; (80097b0 <pvPortMalloc+0x188>)
 8009744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009746:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <pvPortMalloc+0x188>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <pvPortMalloc+0x190>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d203      	bcs.n	800975a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009752:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <pvPortMalloc+0x188>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <pvPortMalloc+0x190>)
 8009758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <pvPortMalloc+0x184>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	431a      	orrs	r2, r3
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <pvPortMalloc+0x194>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	4a11      	ldr	r2, [pc, #68]	; (80097bc <pvPortMalloc+0x194>)
 8009776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009778:	f7ff f862 	bl	8008840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <pvPortMalloc+0x174>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <pvPortMalloc+0x172>
	return pvReturn;
 800979c:	69fb      	ldr	r3, [r7, #28]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3728      	adds	r7, #40	; 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000104c 	.word	0x2000104c
 80097ac:	20001060 	.word	0x20001060
 80097b0:	20001050 	.word	0x20001050
 80097b4:	20001044 	.word	0x20001044
 80097b8:	20001054 	.word	0x20001054
 80097bc:	20001058 	.word	0x20001058

080097c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d04d      	beq.n	800986e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097d2:	2308      	movs	r3, #8
 80097d4:	425b      	negs	r3, r3
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	4b24      	ldr	r3, [pc, #144]	; (8009878 <vPortFree+0xb8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4013      	ands	r3, r2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <vPortFree+0x44>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	60fb      	str	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <vPortFree+0x62>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	60bb      	str	r3, [r7, #8]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <vPortFree+0xb8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4013      	ands	r3, r2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01e      	beq.n	800986e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11a      	bne.n	800986e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <vPortFree+0xb8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009848:	f7fe ffec 	bl	8008824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <vPortFree+0xbc>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4413      	add	r3, r2
 8009856:	4a09      	ldr	r2, [pc, #36]	; (800987c <vPortFree+0xbc>)
 8009858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	f000 f874 	bl	8009948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <vPortFree+0xc0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a06      	ldr	r2, [pc, #24]	; (8009880 <vPortFree+0xc0>)
 8009868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800986a:	f7fe ffe9 	bl	8008840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800986e:	bf00      	nop
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20001060 	.word	0x20001060
 800987c:	20001050 	.word	0x20001050
 8009880:	2000105c 	.word	0x2000105c

08009884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800988a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800988e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <prvHeapInit+0xac>)
 8009892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00c      	beq.n	80098b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3307      	adds	r3, #7
 80098a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0307 	bic.w	r3, r3, #7
 80098aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1f      	ldr	r2, [pc, #124]	; (8009930 <prvHeapInit+0xac>)
 80098b4:	4413      	add	r3, r2
 80098b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098bc:	4a1d      	ldr	r2, [pc, #116]	; (8009934 <prvHeapInit+0xb0>)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <prvHeapInit+0xb0>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098d0:	2208      	movs	r2, #8
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a15      	ldr	r2, [pc, #84]	; (8009938 <prvHeapInit+0xb4>)
 80098e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <prvHeapInit+0xb4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ee:	4b12      	ldr	r3, [pc, #72]	; (8009938 <prvHeapInit+0xb4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009904:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <prvHeapInit+0xb4>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4a0a      	ldr	r2, [pc, #40]	; (800993c <prvHeapInit+0xb8>)
 8009912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a09      	ldr	r2, [pc, #36]	; (8009940 <prvHeapInit+0xbc>)
 800991a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800991c:	4b09      	ldr	r3, [pc, #36]	; (8009944 <prvHeapInit+0xc0>)
 800991e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	2000048c 	.word	0x2000048c
 8009934:	20001044 	.word	0x20001044
 8009938:	2000104c 	.word	0x2000104c
 800993c:	20001054 	.word	0x20001054
 8009940:	20001050 	.word	0x20001050
 8009944:	20001060 	.word	0x20001060

08009948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009950:	4b28      	ldr	r3, [pc, #160]	; (80099f4 <prvInsertBlockIntoFreeList+0xac>)
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	e002      	b.n	800995c <prvInsertBlockIntoFreeList+0x14>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d8f7      	bhi.n	8009956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d108      	bne.n	800998a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	441a      	add	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	429a      	cmp	r2, r3
 800999c:	d118      	bne.n	80099d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <prvInsertBlockIntoFreeList+0xb0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d00d      	beq.n	80099c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	441a      	add	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e008      	b.n	80099d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <prvInsertBlockIntoFreeList+0xb0>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	e003      	b.n	80099d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d002      	beq.n	80099e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20001044 	.word	0x20001044
 80099f8:	2000104c 	.word	0x2000104c

080099fc <__errno>:
 80099fc:	4b01      	ldr	r3, [pc, #4]	; (8009a04 <__errno+0x8>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20000010 	.word	0x20000010

08009a08 <__libc_init_array>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	4d0d      	ldr	r5, [pc, #52]	; (8009a40 <__libc_init_array+0x38>)
 8009a0c:	4c0d      	ldr	r4, [pc, #52]	; (8009a44 <__libc_init_array+0x3c>)
 8009a0e:	1b64      	subs	r4, r4, r5
 8009a10:	10a4      	asrs	r4, r4, #2
 8009a12:	2600      	movs	r6, #0
 8009a14:	42a6      	cmp	r6, r4
 8009a16:	d109      	bne.n	8009a2c <__libc_init_array+0x24>
 8009a18:	4d0b      	ldr	r5, [pc, #44]	; (8009a48 <__libc_init_array+0x40>)
 8009a1a:	4c0c      	ldr	r4, [pc, #48]	; (8009a4c <__libc_init_array+0x44>)
 8009a1c:	f001 fc6e 	bl	800b2fc <_init>
 8009a20:	1b64      	subs	r4, r4, r5
 8009a22:	10a4      	asrs	r4, r4, #2
 8009a24:	2600      	movs	r6, #0
 8009a26:	42a6      	cmp	r6, r4
 8009a28:	d105      	bne.n	8009a36 <__libc_init_array+0x2e>
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a30:	4798      	blx	r3
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7ee      	b.n	8009a14 <__libc_init_array+0xc>
 8009a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3a:	4798      	blx	r3
 8009a3c:	3601      	adds	r6, #1
 8009a3e:	e7f2      	b.n	8009a26 <__libc_init_array+0x1e>
 8009a40:	0800b480 	.word	0x0800b480
 8009a44:	0800b480 	.word	0x0800b480
 8009a48:	0800b480 	.word	0x0800b480
 8009a4c:	0800b484 	.word	0x0800b484

08009a50 <__retarget_lock_acquire_recursive>:
 8009a50:	4770      	bx	lr

08009a52 <__retarget_lock_release_recursive>:
 8009a52:	4770      	bx	lr

08009a54 <memcpy>:
 8009a54:	440a      	add	r2, r1
 8009a56:	4291      	cmp	r1, r2
 8009a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a5c:	d100      	bne.n	8009a60 <memcpy+0xc>
 8009a5e:	4770      	bx	lr
 8009a60:	b510      	push	{r4, lr}
 8009a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a6a:	4291      	cmp	r1, r2
 8009a6c:	d1f9      	bne.n	8009a62 <memcpy+0xe>
 8009a6e:	bd10      	pop	{r4, pc}

08009a70 <memset>:
 8009a70:	4402      	add	r2, r0
 8009a72:	4603      	mov	r3, r0
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d100      	bne.n	8009a7a <memset+0xa>
 8009a78:	4770      	bx	lr
 8009a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7e:	e7f9      	b.n	8009a74 <memset+0x4>

08009a80 <_malloc_r>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	1ccd      	adds	r5, r1, #3
 8009a84:	f025 0503 	bic.w	r5, r5, #3
 8009a88:	3508      	adds	r5, #8
 8009a8a:	2d0c      	cmp	r5, #12
 8009a8c:	bf38      	it	cc
 8009a8e:	250c      	movcc	r5, #12
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	4606      	mov	r6, r0
 8009a94:	db01      	blt.n	8009a9a <_malloc_r+0x1a>
 8009a96:	42a9      	cmp	r1, r5
 8009a98:	d903      	bls.n	8009aa2 <_malloc_r+0x22>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	6033      	str	r3, [r6, #0]
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa2:	f000 f8e1 	bl	8009c68 <__malloc_lock>
 8009aa6:	4921      	ldr	r1, [pc, #132]	; (8009b2c <_malloc_r+0xac>)
 8009aa8:	680a      	ldr	r2, [r1, #0]
 8009aaa:	4614      	mov	r4, r2
 8009aac:	b99c      	cbnz	r4, 8009ad6 <_malloc_r+0x56>
 8009aae:	4f20      	ldr	r7, [pc, #128]	; (8009b30 <_malloc_r+0xb0>)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	b923      	cbnz	r3, 8009abe <_malloc_r+0x3e>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f8a6 	bl	8009c08 <_sbrk_r>
 8009abc:	6038      	str	r0, [r7, #0]
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f8a1 	bl	8009c08 <_sbrk_r>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d123      	bne.n	8009b12 <_malloc_r+0x92>
 8009aca:	230c      	movs	r3, #12
 8009acc:	6033      	str	r3, [r6, #0]
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 f8d0 	bl	8009c74 <__malloc_unlock>
 8009ad4:	e7e3      	b.n	8009a9e <_malloc_r+0x1e>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	1b5b      	subs	r3, r3, r5
 8009ada:	d417      	bmi.n	8009b0c <_malloc_r+0x8c>
 8009adc:	2b0b      	cmp	r3, #11
 8009ade:	d903      	bls.n	8009ae8 <_malloc_r+0x68>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	441c      	add	r4, r3
 8009ae4:	6025      	str	r5, [r4, #0]
 8009ae6:	e004      	b.n	8009af2 <_malloc_r+0x72>
 8009ae8:	6863      	ldr	r3, [r4, #4]
 8009aea:	42a2      	cmp	r2, r4
 8009aec:	bf0c      	ite	eq
 8009aee:	600b      	streq	r3, [r1, #0]
 8009af0:	6053      	strne	r3, [r2, #4]
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 f8be 	bl	8009c74 <__malloc_unlock>
 8009af8:	f104 000b 	add.w	r0, r4, #11
 8009afc:	1d23      	adds	r3, r4, #4
 8009afe:	f020 0007 	bic.w	r0, r0, #7
 8009b02:	1ac2      	subs	r2, r0, r3
 8009b04:	d0cc      	beq.n	8009aa0 <_malloc_r+0x20>
 8009b06:	1a1b      	subs	r3, r3, r0
 8009b08:	50a3      	str	r3, [r4, r2]
 8009b0a:	e7c9      	b.n	8009aa0 <_malloc_r+0x20>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	6864      	ldr	r4, [r4, #4]
 8009b10:	e7cc      	b.n	8009aac <_malloc_r+0x2c>
 8009b12:	1cc4      	adds	r4, r0, #3
 8009b14:	f024 0403 	bic.w	r4, r4, #3
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d0e3      	beq.n	8009ae4 <_malloc_r+0x64>
 8009b1c:	1a21      	subs	r1, r4, r0
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f872 	bl	8009c08 <_sbrk_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	d1dd      	bne.n	8009ae4 <_malloc_r+0x64>
 8009b28:	e7cf      	b.n	8009aca <_malloc_r+0x4a>
 8009b2a:	bf00      	nop
 8009b2c:	20001064 	.word	0x20001064
 8009b30:	20001068 	.word	0x20001068

08009b34 <cleanup_glue>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	460c      	mov	r4, r1
 8009b38:	6809      	ldr	r1, [r1, #0]
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	b109      	cbz	r1, 8009b42 <cleanup_glue+0xe>
 8009b3e:	f7ff fff9 	bl	8009b34 <cleanup_glue>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4a:	f000 b899 	b.w	8009c80 <_free_r>
	...

08009b50 <_reclaim_reent>:
 8009b50:	4b2c      	ldr	r3, [pc, #176]	; (8009c04 <_reclaim_reent+0xb4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4283      	cmp	r3, r0
 8009b56:	b570      	push	{r4, r5, r6, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	d051      	beq.n	8009c00 <_reclaim_reent+0xb0>
 8009b5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b5e:	b143      	cbz	r3, 8009b72 <_reclaim_reent+0x22>
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d14a      	bne.n	8009bfc <_reclaim_reent+0xac>
 8009b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b68:	6819      	ldr	r1, [r3, #0]
 8009b6a:	b111      	cbz	r1, 8009b72 <_reclaim_reent+0x22>
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 f887 	bl	8009c80 <_free_r>
 8009b72:	6961      	ldr	r1, [r4, #20]
 8009b74:	b111      	cbz	r1, 8009b7c <_reclaim_reent+0x2c>
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 f882 	bl	8009c80 <_free_r>
 8009b7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b7e:	b111      	cbz	r1, 8009b86 <_reclaim_reent+0x36>
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 f87d 	bl	8009c80 <_free_r>
 8009b86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b88:	b111      	cbz	r1, 8009b90 <_reclaim_reent+0x40>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f878 	bl	8009c80 <_free_r>
 8009b90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b92:	b111      	cbz	r1, 8009b9a <_reclaim_reent+0x4a>
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 f873 	bl	8009c80 <_free_r>
 8009b9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b9c:	b111      	cbz	r1, 8009ba4 <_reclaim_reent+0x54>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f86e 	bl	8009c80 <_free_r>
 8009ba4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009ba6:	b111      	cbz	r1, 8009bae <_reclaim_reent+0x5e>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f869 	bl	8009c80 <_free_r>
 8009bae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bb0:	b111      	cbz	r1, 8009bb8 <_reclaim_reent+0x68>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f864 	bl	8009c80 <_free_r>
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	b111      	cbz	r1, 8009bc2 <_reclaim_reent+0x72>
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 f85f 	bl	8009c80 <_free_r>
 8009bc2:	69a3      	ldr	r3, [r4, #24]
 8009bc4:	b1e3      	cbz	r3, 8009c00 <_reclaim_reent+0xb0>
 8009bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4798      	blx	r3
 8009bcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bce:	b1b9      	cbz	r1, 8009c00 <_reclaim_reent+0xb0>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bd6:	f7ff bfad 	b.w	8009b34 <cleanup_glue>
 8009bda:	5949      	ldr	r1, [r1, r5]
 8009bdc:	b941      	cbnz	r1, 8009bf0 <_reclaim_reent+0xa0>
 8009bde:	3504      	adds	r5, #4
 8009be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be2:	2d80      	cmp	r5, #128	; 0x80
 8009be4:	68d9      	ldr	r1, [r3, #12]
 8009be6:	d1f8      	bne.n	8009bda <_reclaim_reent+0x8a>
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 f849 	bl	8009c80 <_free_r>
 8009bee:	e7ba      	b.n	8009b66 <_reclaim_reent+0x16>
 8009bf0:	680e      	ldr	r6, [r1, #0]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 f844 	bl	8009c80 <_free_r>
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	e7ef      	b.n	8009bdc <_reclaim_reent+0x8c>
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	e7ef      	b.n	8009be0 <_reclaim_reent+0x90>
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	bf00      	nop
 8009c04:	20000010 	.word	0x20000010

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f8 f9a0 	bl	8001f58 <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	2000123c 	.word	0x2000123c

08009c28 <siprintf>:
 8009c28:	b40e      	push	{r1, r2, r3}
 8009c2a:	b500      	push	{lr}
 8009c2c:	b09c      	sub	sp, #112	; 0x70
 8009c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c30:	9002      	str	r0, [sp, #8]
 8009c32:	9006      	str	r0, [sp, #24]
 8009c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c38:	4809      	ldr	r0, [pc, #36]	; (8009c60 <siprintf+0x38>)
 8009c3a:	9107      	str	r1, [sp, #28]
 8009c3c:	9104      	str	r1, [sp, #16]
 8009c3e:	4909      	ldr	r1, [pc, #36]	; (8009c64 <siprintf+0x3c>)
 8009c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c44:	9105      	str	r1, [sp, #20]
 8009c46:	6800      	ldr	r0, [r0, #0]
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	a902      	add	r1, sp, #8
 8009c4c:	f000 f8c4 	bl	8009dd8 <_svfiprintf_r>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	b01c      	add	sp, #112	; 0x70
 8009c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c5c:	b003      	add	sp, #12
 8009c5e:	4770      	bx	lr
 8009c60:	20000010 	.word	0x20000010
 8009c64:	ffff0208 	.word	0xffff0208

08009c68 <__malloc_lock>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__malloc_lock+0x8>)
 8009c6a:	f7ff bef1 	b.w	8009a50 <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	20001234 	.word	0x20001234

08009c74 <__malloc_unlock>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__malloc_unlock+0x8>)
 8009c76:	f7ff beec 	b.w	8009a52 <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	20001234 	.word	0x20001234

08009c80 <_free_r>:
 8009c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c82:	2900      	cmp	r1, #0
 8009c84:	d048      	beq.n	8009d18 <_free_r+0x98>
 8009c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c8a:	9001      	str	r0, [sp, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c92:	bfb8      	it	lt
 8009c94:	18e4      	addlt	r4, r4, r3
 8009c96:	f7ff ffe7 	bl	8009c68 <__malloc_lock>
 8009c9a:	4a20      	ldr	r2, [pc, #128]	; (8009d1c <_free_r+0x9c>)
 8009c9c:	9801      	ldr	r0, [sp, #4]
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	b933      	cbnz	r3, 8009cb2 <_free_r+0x32>
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	6014      	str	r4, [r2, #0]
 8009ca8:	b003      	add	sp, #12
 8009caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cae:	f7ff bfe1 	b.w	8009c74 <__malloc_unlock>
 8009cb2:	42a3      	cmp	r3, r4
 8009cb4:	d90b      	bls.n	8009cce <_free_r+0x4e>
 8009cb6:	6821      	ldr	r1, [r4, #0]
 8009cb8:	1862      	adds	r2, r4, r1
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	bf04      	itt	eq
 8009cbe:	681a      	ldreq	r2, [r3, #0]
 8009cc0:	685b      	ldreq	r3, [r3, #4]
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	bf04      	itt	eq
 8009cc6:	1852      	addeq	r2, r2, r1
 8009cc8:	6022      	streq	r2, [r4, #0]
 8009cca:	602c      	str	r4, [r5, #0]
 8009ccc:	e7ec      	b.n	8009ca8 <_free_r+0x28>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x58>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x4e>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1855      	adds	r5, r2, r1
 8009cdc:	42a5      	cmp	r5, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x78>
 8009ce0:	6824      	ldr	r4, [r4, #0]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	1854      	adds	r4, r2, r1
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1dd      	bne.n	8009ca8 <_free_r+0x28>
 8009cec:	681c      	ldr	r4, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6053      	str	r3, [r2, #4]
 8009cf2:	4421      	add	r1, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	e7d7      	b.n	8009ca8 <_free_r+0x28>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x80>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	e7d3      	b.n	8009ca8 <_free_r+0x28>
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1961      	adds	r1, r4, r5
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf04      	itt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	bf04      	itt	eq
 8009d10:	1949      	addeq	r1, r1, r5
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7c7      	b.n	8009ca8 <_free_r+0x28>
 8009d18:	b003      	add	sp, #12
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	20001064 	.word	0x20001064

08009d20 <__ssputs_r>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	688e      	ldr	r6, [r1, #8]
 8009d26:	429e      	cmp	r6, r3
 8009d28:	4682      	mov	sl, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4690      	mov	r8, r2
 8009d2e:	461f      	mov	r7, r3
 8009d30:	d838      	bhi.n	8009da4 <__ssputs_r+0x84>
 8009d32:	898a      	ldrh	r2, [r1, #12]
 8009d34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d38:	d032      	beq.n	8009da0 <__ssputs_r+0x80>
 8009d3a:	6825      	ldr	r5, [r4, #0]
 8009d3c:	6909      	ldr	r1, [r1, #16]
 8009d3e:	eba5 0901 	sub.w	r9, r5, r1
 8009d42:	6965      	ldr	r5, [r4, #20]
 8009d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	444b      	add	r3, r9
 8009d50:	106d      	asrs	r5, r5, #1
 8009d52:	429d      	cmp	r5, r3
 8009d54:	bf38      	it	cc
 8009d56:	461d      	movcc	r5, r3
 8009d58:	0553      	lsls	r3, r2, #21
 8009d5a:	d531      	bpl.n	8009dc0 <__ssputs_r+0xa0>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f7ff fe8f 	bl	8009a80 <_malloc_r>
 8009d62:	4606      	mov	r6, r0
 8009d64:	b950      	cbnz	r0, 8009d7c <__ssputs_r+0x5c>
 8009d66:	230c      	movs	r3, #12
 8009d68:	f8ca 3000 	str.w	r3, [sl]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	6921      	ldr	r1, [r4, #16]
 8009d7e:	464a      	mov	r2, r9
 8009d80:	f7ff fe68 	bl	8009a54 <memcpy>
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	6126      	str	r6, [r4, #16]
 8009d92:	6165      	str	r5, [r4, #20]
 8009d94:	444e      	add	r6, r9
 8009d96:	eba5 0509 	sub.w	r5, r5, r9
 8009d9a:	6026      	str	r6, [r4, #0]
 8009d9c:	60a5      	str	r5, [r4, #8]
 8009d9e:	463e      	mov	r6, r7
 8009da0:	42be      	cmp	r6, r7
 8009da2:	d900      	bls.n	8009da6 <__ssputs_r+0x86>
 8009da4:	463e      	mov	r6, r7
 8009da6:	4632      	mov	r2, r6
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	4641      	mov	r1, r8
 8009dac:	f000 faa8 	bl	800a300 <memmove>
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	1b9b      	subs	r3, r3, r6
 8009db6:	4432      	add	r2, r6
 8009db8:	60a3      	str	r3, [r4, #8]
 8009dba:	6022      	str	r2, [r4, #0]
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7db      	b.n	8009d78 <__ssputs_r+0x58>
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	f000 fab7 	bl	800a334 <_realloc_r>
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1e1      	bne.n	8009d90 <__ssputs_r+0x70>
 8009dcc:	6921      	ldr	r1, [r4, #16]
 8009dce:	4650      	mov	r0, sl
 8009dd0:	f7ff ff56 	bl	8009c80 <_free_r>
 8009dd4:	e7c7      	b.n	8009d66 <__ssputs_r+0x46>
	...

08009dd8 <_svfiprintf_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	4698      	mov	r8, r3
 8009dde:	898b      	ldrh	r3, [r1, #12]
 8009de0:	061b      	lsls	r3, r3, #24
 8009de2:	b09d      	sub	sp, #116	; 0x74
 8009de4:	4607      	mov	r7, r0
 8009de6:	460d      	mov	r5, r1
 8009de8:	4614      	mov	r4, r2
 8009dea:	d50e      	bpl.n	8009e0a <_svfiprintf_r+0x32>
 8009dec:	690b      	ldr	r3, [r1, #16]
 8009dee:	b963      	cbnz	r3, 8009e0a <_svfiprintf_r+0x32>
 8009df0:	2140      	movs	r1, #64	; 0x40
 8009df2:	f7ff fe45 	bl	8009a80 <_malloc_r>
 8009df6:	6028      	str	r0, [r5, #0]
 8009df8:	6128      	str	r0, [r5, #16]
 8009dfa:	b920      	cbnz	r0, 8009e06 <_svfiprintf_r+0x2e>
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	e0d1      	b.n	8009faa <_svfiprintf_r+0x1d2>
 8009e06:	2340      	movs	r3, #64	; 0x40
 8009e08:	616b      	str	r3, [r5, #20]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0e:	2320      	movs	r3, #32
 8009e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e18:	2330      	movs	r3, #48	; 0x30
 8009e1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fc4 <_svfiprintf_r+0x1ec>
 8009e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e22:	f04f 0901 	mov.w	r9, #1
 8009e26:	4623      	mov	r3, r4
 8009e28:	469a      	mov	sl, r3
 8009e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2e:	b10a      	cbz	r2, 8009e34 <_svfiprintf_r+0x5c>
 8009e30:	2a25      	cmp	r2, #37	; 0x25
 8009e32:	d1f9      	bne.n	8009e28 <_svfiprintf_r+0x50>
 8009e34:	ebba 0b04 	subs.w	fp, sl, r4
 8009e38:	d00b      	beq.n	8009e52 <_svfiprintf_r+0x7a>
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ff6d 	bl	8009d20 <__ssputs_r>
 8009e46:	3001      	adds	r0, #1
 8009e48:	f000 80aa 	beq.w	8009fa0 <_svfiprintf_r+0x1c8>
 8009e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4e:	445a      	add	r2, fp
 8009e50:	9209      	str	r2, [sp, #36]	; 0x24
 8009e52:	f89a 3000 	ldrb.w	r3, [sl]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 80a2 	beq.w	8009fa0 <_svfiprintf_r+0x1c8>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e66:	f10a 0a01 	add.w	sl, sl, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e72:	931a      	str	r3, [sp, #104]	; 0x68
 8009e74:	4654      	mov	r4, sl
 8009e76:	2205      	movs	r2, #5
 8009e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7c:	4851      	ldr	r0, [pc, #324]	; (8009fc4 <_svfiprintf_r+0x1ec>)
 8009e7e:	f7f6 f9a7 	bl	80001d0 <memchr>
 8009e82:	9a04      	ldr	r2, [sp, #16]
 8009e84:	b9d8      	cbnz	r0, 8009ebe <_svfiprintf_r+0xe6>
 8009e86:	06d0      	lsls	r0, r2, #27
 8009e88:	bf44      	itt	mi
 8009e8a:	2320      	movmi	r3, #32
 8009e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e90:	0711      	lsls	r1, r2, #28
 8009e92:	bf44      	itt	mi
 8009e94:	232b      	movmi	r3, #43	; 0x2b
 8009e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea0:	d015      	beq.n	8009ece <_svfiprintf_r+0xf6>
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f04f 0c0a 	mov.w	ip, #10
 8009eac:	4621      	mov	r1, r4
 8009eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb2:	3b30      	subs	r3, #48	; 0x30
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d94e      	bls.n	8009f56 <_svfiprintf_r+0x17e>
 8009eb8:	b1b0      	cbz	r0, 8009ee8 <_svfiprintf_r+0x110>
 8009eba:	9207      	str	r2, [sp, #28]
 8009ebc:	e014      	b.n	8009ee8 <_svfiprintf_r+0x110>
 8009ebe:	eba0 0308 	sub.w	r3, r0, r8
 8009ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	46a2      	mov	sl, r4
 8009ecc:	e7d2      	b.n	8009e74 <_svfiprintf_r+0x9c>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	1d19      	adds	r1, r3, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9103      	str	r1, [sp, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfbb      	ittet	lt
 8009eda:	425b      	neglt	r3, r3
 8009edc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee0:	9307      	strge	r3, [sp, #28]
 8009ee2:	9307      	strlt	r3, [sp, #28]
 8009ee4:	bfb8      	it	lt
 8009ee6:	9204      	strlt	r2, [sp, #16]
 8009ee8:	7823      	ldrb	r3, [r4, #0]
 8009eea:	2b2e      	cmp	r3, #46	; 0x2e
 8009eec:	d10c      	bne.n	8009f08 <_svfiprintf_r+0x130>
 8009eee:	7863      	ldrb	r3, [r4, #1]
 8009ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef2:	d135      	bne.n	8009f60 <_svfiprintf_r+0x188>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfb8      	it	lt
 8009f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f04:	3402      	adds	r4, #2
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fd4 <_svfiprintf_r+0x1fc>
 8009f0c:	7821      	ldrb	r1, [r4, #0]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	4650      	mov	r0, sl
 8009f12:	f7f6 f95d 	bl	80001d0 <memchr>
 8009f16:	b140      	cbz	r0, 8009f2a <_svfiprintf_r+0x152>
 8009f18:	2340      	movs	r3, #64	; 0x40
 8009f1a:	eba0 000a 	sub.w	r0, r0, sl
 8009f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	4303      	orrs	r3, r0
 8009f26:	3401      	adds	r4, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	4826      	ldr	r0, [pc, #152]	; (8009fc8 <_svfiprintf_r+0x1f0>)
 8009f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f34:	2206      	movs	r2, #6
 8009f36:	f7f6 f94b 	bl	80001d0 <memchr>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d038      	beq.n	8009fb0 <_svfiprintf_r+0x1d8>
 8009f3e:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <_svfiprintf_r+0x1f4>)
 8009f40:	bb1b      	cbnz	r3, 8009f8a <_svfiprintf_r+0x1b2>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	3307      	adds	r3, #7
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	4433      	add	r3, r6
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	e767      	b.n	8009e26 <_svfiprintf_r+0x4e>
 8009f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	e7a5      	b.n	8009eac <_svfiprintf_r+0xd4>
 8009f60:	2300      	movs	r3, #0
 8009f62:	3401      	adds	r4, #1
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	4619      	mov	r1, r3
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f72:	3a30      	subs	r2, #48	; 0x30
 8009f74:	2a09      	cmp	r2, #9
 8009f76:	d903      	bls.n	8009f80 <_svfiprintf_r+0x1a8>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0c5      	beq.n	8009f08 <_svfiprintf_r+0x130>
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	e7c3      	b.n	8009f08 <_svfiprintf_r+0x130>
 8009f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f84:	4604      	mov	r4, r0
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7f0      	b.n	8009f6c <_svfiprintf_r+0x194>
 8009f8a:	ab03      	add	r3, sp, #12
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <_svfiprintf_r+0x1f8>)
 8009f92:	a904      	add	r1, sp, #16
 8009f94:	4638      	mov	r0, r7
 8009f96:	f3af 8000 	nop.w
 8009f9a:	1c42      	adds	r2, r0, #1
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	d1d6      	bne.n	8009f4e <_svfiprintf_r+0x176>
 8009fa0:	89ab      	ldrh	r3, [r5, #12]
 8009fa2:	065b      	lsls	r3, r3, #25
 8009fa4:	f53f af2c 	bmi.w	8009e00 <_svfiprintf_r+0x28>
 8009fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009faa:	b01d      	add	sp, #116	; 0x74
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <_svfiprintf_r+0x1f8>)
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f000 f87a 	bl	800a0b4 <_printf_i>
 8009fc0:	e7eb      	b.n	8009f9a <_svfiprintf_r+0x1c2>
 8009fc2:	bf00      	nop
 8009fc4:	0800b40c 	.word	0x0800b40c
 8009fc8:	0800b416 	.word	0x0800b416
 8009fcc:	00000000 	.word	0x00000000
 8009fd0:	08009d21 	.word	0x08009d21
 8009fd4:	0800b412 	.word	0x0800b412

08009fd8 <_printf_common>:
 8009fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fdc:	4616      	mov	r6, r2
 8009fde:	4699      	mov	r9, r3
 8009fe0:	688a      	ldr	r2, [r1, #8]
 8009fe2:	690b      	ldr	r3, [r1, #16]
 8009fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bfb8      	it	lt
 8009fec:	4613      	movlt	r3, r2
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b10a      	cbz	r2, 8009ffe <_printf_common+0x26>
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	6033      	str	r3, [r6, #0]
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	0699      	lsls	r1, r3, #26
 800a002:	bf42      	ittt	mi
 800a004:	6833      	ldrmi	r3, [r6, #0]
 800a006:	3302      	addmi	r3, #2
 800a008:	6033      	strmi	r3, [r6, #0]
 800a00a:	6825      	ldr	r5, [r4, #0]
 800a00c:	f015 0506 	ands.w	r5, r5, #6
 800a010:	d106      	bne.n	800a020 <_printf_common+0x48>
 800a012:	f104 0a19 	add.w	sl, r4, #25
 800a016:	68e3      	ldr	r3, [r4, #12]
 800a018:	6832      	ldr	r2, [r6, #0]
 800a01a:	1a9b      	subs	r3, r3, r2
 800a01c:	42ab      	cmp	r3, r5
 800a01e:	dc26      	bgt.n	800a06e <_printf_common+0x96>
 800a020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a024:	1e13      	subs	r3, r2, #0
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	bf18      	it	ne
 800a02a:	2301      	movne	r3, #1
 800a02c:	0692      	lsls	r2, r2, #26
 800a02e:	d42b      	bmi.n	800a088 <_printf_common+0xb0>
 800a030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a034:	4649      	mov	r1, r9
 800a036:	4638      	mov	r0, r7
 800a038:	47c0      	blx	r8
 800a03a:	3001      	adds	r0, #1
 800a03c:	d01e      	beq.n	800a07c <_printf_common+0xa4>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	68e5      	ldr	r5, [r4, #12]
 800a042:	6832      	ldr	r2, [r6, #0]
 800a044:	f003 0306 	and.w	r3, r3, #6
 800a048:	2b04      	cmp	r3, #4
 800a04a:	bf08      	it	eq
 800a04c:	1aad      	subeq	r5, r5, r2
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	6922      	ldr	r2, [r4, #16]
 800a052:	bf0c      	ite	eq
 800a054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a058:	2500      	movne	r5, #0
 800a05a:	4293      	cmp	r3, r2
 800a05c:	bfc4      	itt	gt
 800a05e:	1a9b      	subgt	r3, r3, r2
 800a060:	18ed      	addgt	r5, r5, r3
 800a062:	2600      	movs	r6, #0
 800a064:	341a      	adds	r4, #26
 800a066:	42b5      	cmp	r5, r6
 800a068:	d11a      	bne.n	800a0a0 <_printf_common+0xc8>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e008      	b.n	800a080 <_printf_common+0xa8>
 800a06e:	2301      	movs	r3, #1
 800a070:	4652      	mov	r2, sl
 800a072:	4649      	mov	r1, r9
 800a074:	4638      	mov	r0, r7
 800a076:	47c0      	blx	r8
 800a078:	3001      	adds	r0, #1
 800a07a:	d103      	bne.n	800a084 <_printf_common+0xac>
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a084:	3501      	adds	r5, #1
 800a086:	e7c6      	b.n	800a016 <_printf_common+0x3e>
 800a088:	18e1      	adds	r1, r4, r3
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	2030      	movs	r0, #48	; 0x30
 800a08e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a092:	4422      	add	r2, r4
 800a094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a09c:	3302      	adds	r3, #2
 800a09e:	e7c7      	b.n	800a030 <_printf_common+0x58>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	47c0      	blx	r8
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	d0e6      	beq.n	800a07c <_printf_common+0xa4>
 800a0ae:	3601      	adds	r6, #1
 800a0b0:	e7d9      	b.n	800a066 <_printf_common+0x8e>
	...

0800a0b4 <_printf_i>:
 800a0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	4691      	mov	r9, r2
 800a0bc:	7e27      	ldrb	r7, [r4, #24]
 800a0be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0c0:	2f78      	cmp	r7, #120	; 0x78
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	469a      	mov	sl, r3
 800a0c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0ca:	d807      	bhi.n	800a0dc <_printf_i+0x28>
 800a0cc:	2f62      	cmp	r7, #98	; 0x62
 800a0ce:	d80a      	bhi.n	800a0e6 <_printf_i+0x32>
 800a0d0:	2f00      	cmp	r7, #0
 800a0d2:	f000 80d8 	beq.w	800a286 <_printf_i+0x1d2>
 800a0d6:	2f58      	cmp	r7, #88	; 0x58
 800a0d8:	f000 80a3 	beq.w	800a222 <_printf_i+0x16e>
 800a0dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0e4:	e03a      	b.n	800a15c <_printf_i+0xa8>
 800a0e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ea:	2b15      	cmp	r3, #21
 800a0ec:	d8f6      	bhi.n	800a0dc <_printf_i+0x28>
 800a0ee:	a001      	add	r0, pc, #4	; (adr r0, 800a0f4 <_printf_i+0x40>)
 800a0f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0f4:	0800a14d 	.word	0x0800a14d
 800a0f8:	0800a161 	.word	0x0800a161
 800a0fc:	0800a0dd 	.word	0x0800a0dd
 800a100:	0800a0dd 	.word	0x0800a0dd
 800a104:	0800a0dd 	.word	0x0800a0dd
 800a108:	0800a0dd 	.word	0x0800a0dd
 800a10c:	0800a161 	.word	0x0800a161
 800a110:	0800a0dd 	.word	0x0800a0dd
 800a114:	0800a0dd 	.word	0x0800a0dd
 800a118:	0800a0dd 	.word	0x0800a0dd
 800a11c:	0800a0dd 	.word	0x0800a0dd
 800a120:	0800a26d 	.word	0x0800a26d
 800a124:	0800a191 	.word	0x0800a191
 800a128:	0800a24f 	.word	0x0800a24f
 800a12c:	0800a0dd 	.word	0x0800a0dd
 800a130:	0800a0dd 	.word	0x0800a0dd
 800a134:	0800a28f 	.word	0x0800a28f
 800a138:	0800a0dd 	.word	0x0800a0dd
 800a13c:	0800a191 	.word	0x0800a191
 800a140:	0800a0dd 	.word	0x0800a0dd
 800a144:	0800a0dd 	.word	0x0800a0dd
 800a148:	0800a257 	.word	0x0800a257
 800a14c:	680b      	ldr	r3, [r1, #0]
 800a14e:	1d1a      	adds	r2, r3, #4
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	600a      	str	r2, [r1, #0]
 800a154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a15c:	2301      	movs	r3, #1
 800a15e:	e0a3      	b.n	800a2a8 <_printf_i+0x1f4>
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	6808      	ldr	r0, [r1, #0]
 800a164:	062e      	lsls	r6, r5, #24
 800a166:	f100 0304 	add.w	r3, r0, #4
 800a16a:	d50a      	bpl.n	800a182 <_printf_i+0xce>
 800a16c:	6805      	ldr	r5, [r0, #0]
 800a16e:	600b      	str	r3, [r1, #0]
 800a170:	2d00      	cmp	r5, #0
 800a172:	da03      	bge.n	800a17c <_printf_i+0xc8>
 800a174:	232d      	movs	r3, #45	; 0x2d
 800a176:	426d      	negs	r5, r5
 800a178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17c:	485e      	ldr	r0, [pc, #376]	; (800a2f8 <_printf_i+0x244>)
 800a17e:	230a      	movs	r3, #10
 800a180:	e019      	b.n	800a1b6 <_printf_i+0x102>
 800a182:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a186:	6805      	ldr	r5, [r0, #0]
 800a188:	600b      	str	r3, [r1, #0]
 800a18a:	bf18      	it	ne
 800a18c:	b22d      	sxthne	r5, r5
 800a18e:	e7ef      	b.n	800a170 <_printf_i+0xbc>
 800a190:	680b      	ldr	r3, [r1, #0]
 800a192:	6825      	ldr	r5, [r4, #0]
 800a194:	1d18      	adds	r0, r3, #4
 800a196:	6008      	str	r0, [r1, #0]
 800a198:	0628      	lsls	r0, r5, #24
 800a19a:	d501      	bpl.n	800a1a0 <_printf_i+0xec>
 800a19c:	681d      	ldr	r5, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <_printf_i+0xf2>
 800a1a0:	0669      	lsls	r1, r5, #25
 800a1a2:	d5fb      	bpl.n	800a19c <_printf_i+0xe8>
 800a1a4:	881d      	ldrh	r5, [r3, #0]
 800a1a6:	4854      	ldr	r0, [pc, #336]	; (800a2f8 <_printf_i+0x244>)
 800a1a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2308      	moveq	r3, #8
 800a1ae:	230a      	movne	r3, #10
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1b6:	6866      	ldr	r6, [r4, #4]
 800a1b8:	60a6      	str	r6, [r4, #8]
 800a1ba:	2e00      	cmp	r6, #0
 800a1bc:	bfa2      	ittt	ge
 800a1be:	6821      	ldrge	r1, [r4, #0]
 800a1c0:	f021 0104 	bicge.w	r1, r1, #4
 800a1c4:	6021      	strge	r1, [r4, #0]
 800a1c6:	b90d      	cbnz	r5, 800a1cc <_printf_i+0x118>
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	d04d      	beq.n	800a268 <_printf_i+0x1b4>
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a1d6:	5dc7      	ldrb	r7, [r0, r7]
 800a1d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1dc:	462f      	mov	r7, r5
 800a1de:	42bb      	cmp	r3, r7
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	d9f4      	bls.n	800a1ce <_printf_i+0x11a>
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d10b      	bne.n	800a200 <_printf_i+0x14c>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	07df      	lsls	r7, r3, #31
 800a1ec:	d508      	bpl.n	800a200 <_printf_i+0x14c>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	6861      	ldr	r1, [r4, #4]
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	bfde      	ittt	le
 800a1f6:	2330      	movle	r3, #48	; 0x30
 800a1f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a200:	1b92      	subs	r2, r2, r6
 800a202:	6122      	str	r2, [r4, #16]
 800a204:	f8cd a000 	str.w	sl, [sp]
 800a208:	464b      	mov	r3, r9
 800a20a:	aa03      	add	r2, sp, #12
 800a20c:	4621      	mov	r1, r4
 800a20e:	4640      	mov	r0, r8
 800a210:	f7ff fee2 	bl	8009fd8 <_printf_common>
 800a214:	3001      	adds	r0, #1
 800a216:	d14c      	bne.n	800a2b2 <_printf_i+0x1fe>
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	b004      	add	sp, #16
 800a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a222:	4835      	ldr	r0, [pc, #212]	; (800a2f8 <_printf_i+0x244>)
 800a224:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	680e      	ldr	r6, [r1, #0]
 800a22c:	061f      	lsls	r7, r3, #24
 800a22e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a232:	600e      	str	r6, [r1, #0]
 800a234:	d514      	bpl.n	800a260 <_printf_i+0x1ac>
 800a236:	07d9      	lsls	r1, r3, #31
 800a238:	bf44      	itt	mi
 800a23a:	f043 0320 	orrmi.w	r3, r3, #32
 800a23e:	6023      	strmi	r3, [r4, #0]
 800a240:	b91d      	cbnz	r5, 800a24a <_printf_i+0x196>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	f023 0320 	bic.w	r3, r3, #32
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	2310      	movs	r3, #16
 800a24c:	e7b0      	b.n	800a1b0 <_printf_i+0xfc>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f043 0320 	orr.w	r3, r3, #32
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	2378      	movs	r3, #120	; 0x78
 800a258:	4828      	ldr	r0, [pc, #160]	; (800a2fc <_printf_i+0x248>)
 800a25a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a25e:	e7e3      	b.n	800a228 <_printf_i+0x174>
 800a260:	065e      	lsls	r6, r3, #25
 800a262:	bf48      	it	mi
 800a264:	b2ad      	uxthmi	r5, r5
 800a266:	e7e6      	b.n	800a236 <_printf_i+0x182>
 800a268:	4616      	mov	r6, r2
 800a26a:	e7bb      	b.n	800a1e4 <_printf_i+0x130>
 800a26c:	680b      	ldr	r3, [r1, #0]
 800a26e:	6826      	ldr	r6, [r4, #0]
 800a270:	6960      	ldr	r0, [r4, #20]
 800a272:	1d1d      	adds	r5, r3, #4
 800a274:	600d      	str	r5, [r1, #0]
 800a276:	0635      	lsls	r5, r6, #24
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	d501      	bpl.n	800a280 <_printf_i+0x1cc>
 800a27c:	6018      	str	r0, [r3, #0]
 800a27e:	e002      	b.n	800a286 <_printf_i+0x1d2>
 800a280:	0671      	lsls	r1, r6, #25
 800a282:	d5fb      	bpl.n	800a27c <_printf_i+0x1c8>
 800a284:	8018      	strh	r0, [r3, #0]
 800a286:	2300      	movs	r3, #0
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	4616      	mov	r6, r2
 800a28c:	e7ba      	b.n	800a204 <_printf_i+0x150>
 800a28e:	680b      	ldr	r3, [r1, #0]
 800a290:	1d1a      	adds	r2, r3, #4
 800a292:	600a      	str	r2, [r1, #0]
 800a294:	681e      	ldr	r6, [r3, #0]
 800a296:	6862      	ldr	r2, [r4, #4]
 800a298:	2100      	movs	r1, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7f5 ff98 	bl	80001d0 <memchr>
 800a2a0:	b108      	cbz	r0, 800a2a6 <_printf_i+0x1f2>
 800a2a2:	1b80      	subs	r0, r0, r6
 800a2a4:	6060      	str	r0, [r4, #4]
 800a2a6:	6863      	ldr	r3, [r4, #4]
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b0:	e7a8      	b.n	800a204 <_printf_i+0x150>
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d0ab      	beq.n	800a218 <_printf_i+0x164>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	079b      	lsls	r3, r3, #30
 800a2c4:	d413      	bmi.n	800a2ee <_printf_i+0x23a>
 800a2c6:	68e0      	ldr	r0, [r4, #12]
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	4298      	cmp	r0, r3
 800a2cc:	bfb8      	it	lt
 800a2ce:	4618      	movlt	r0, r3
 800a2d0:	e7a4      	b.n	800a21c <_printf_i+0x168>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	47d0      	blx	sl
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d09b      	beq.n	800a218 <_printf_i+0x164>
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	68e3      	ldr	r3, [r4, #12]
 800a2e4:	9903      	ldr	r1, [sp, #12]
 800a2e6:	1a5b      	subs	r3, r3, r1
 800a2e8:	42ab      	cmp	r3, r5
 800a2ea:	dcf2      	bgt.n	800a2d2 <_printf_i+0x21e>
 800a2ec:	e7eb      	b.n	800a2c6 <_printf_i+0x212>
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	f104 0619 	add.w	r6, r4, #25
 800a2f4:	e7f5      	b.n	800a2e2 <_printf_i+0x22e>
 800a2f6:	bf00      	nop
 800a2f8:	0800b41d 	.word	0x0800b41d
 800a2fc:	0800b42e 	.word	0x0800b42e

0800a300 <memmove>:
 800a300:	4288      	cmp	r0, r1
 800a302:	b510      	push	{r4, lr}
 800a304:	eb01 0402 	add.w	r4, r1, r2
 800a308:	d902      	bls.n	800a310 <memmove+0x10>
 800a30a:	4284      	cmp	r4, r0
 800a30c:	4623      	mov	r3, r4
 800a30e:	d807      	bhi.n	800a320 <memmove+0x20>
 800a310:	1e43      	subs	r3, r0, #1
 800a312:	42a1      	cmp	r1, r4
 800a314:	d008      	beq.n	800a328 <memmove+0x28>
 800a316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a31e:	e7f8      	b.n	800a312 <memmove+0x12>
 800a320:	4402      	add	r2, r0
 800a322:	4601      	mov	r1, r0
 800a324:	428a      	cmp	r2, r1
 800a326:	d100      	bne.n	800a32a <memmove+0x2a>
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a332:	e7f7      	b.n	800a324 <memmove+0x24>

0800a334 <_realloc_r>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	4607      	mov	r7, r0
 800a338:	4614      	mov	r4, r2
 800a33a:	460e      	mov	r6, r1
 800a33c:	b921      	cbnz	r1, 800a348 <_realloc_r+0x14>
 800a33e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a342:	4611      	mov	r1, r2
 800a344:	f7ff bb9c 	b.w	8009a80 <_malloc_r>
 800a348:	b922      	cbnz	r2, 800a354 <_realloc_r+0x20>
 800a34a:	f7ff fc99 	bl	8009c80 <_free_r>
 800a34e:	4625      	mov	r5, r4
 800a350:	4628      	mov	r0, r5
 800a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a354:	f000 f814 	bl	800a380 <_malloc_usable_size_r>
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d20f      	bcs.n	800a37c <_realloc_r+0x48>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4638      	mov	r0, r7
 800a360:	f7ff fb8e 	bl	8009a80 <_malloc_r>
 800a364:	4605      	mov	r5, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d0f2      	beq.n	800a350 <_realloc_r+0x1c>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4622      	mov	r2, r4
 800a36e:	f7ff fb71 	bl	8009a54 <memcpy>
 800a372:	4631      	mov	r1, r6
 800a374:	4638      	mov	r0, r7
 800a376:	f7ff fc83 	bl	8009c80 <_free_r>
 800a37a:	e7e9      	b.n	800a350 <_realloc_r+0x1c>
 800a37c:	4635      	mov	r5, r6
 800a37e:	e7e7      	b.n	800a350 <_realloc_r+0x1c>

0800a380 <_malloc_usable_size_r>:
 800a380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a384:	1f18      	subs	r0, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	bfbc      	itt	lt
 800a38a:	580b      	ldrlt	r3, [r1, r0]
 800a38c:	18c0      	addlt	r0, r0, r3
 800a38e:	4770      	bx	lr

0800a390 <pow>:
 800a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a394:	ec59 8b10 	vmov	r8, r9, d0
 800a398:	ec57 6b11 	vmov	r6, r7, d1
 800a39c:	f000 f8a8 	bl	800a4f0 <__ieee754_pow>
 800a3a0:	4b4e      	ldr	r3, [pc, #312]	; (800a4dc <pow+0x14c>)
 800a3a2:	f993 3000 	ldrsb.w	r3, [r3]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	ec55 4b10 	vmov	r4, r5, d0
 800a3ac:	d015      	beq.n	800a3da <pow+0x4a>
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 fbb1 	bl	8000b1c <__aeabi_dcmpun>
 800a3ba:	b970      	cbnz	r0, 800a3da <pow+0x4a>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f7f6 fbaa 	bl	8000b1c <__aeabi_dcmpun>
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	b148      	cbz	r0, 800a3e2 <pow+0x52>
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f6 fb71 	bl	8000ab8 <__aeabi_dcmpeq>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d17d      	bne.n	800a4d6 <pow+0x146>
 800a3da:	ec45 4b10 	vmov	d0, r4, r5
 800a3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f6 fb67 	bl	8000ab8 <__aeabi_dcmpeq>
 800a3ea:	b1e0      	cbz	r0, 800a426 <pow+0x96>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 fb60 	bl	8000ab8 <__aeabi_dcmpeq>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d16c      	bne.n	800a4d6 <pow+0x146>
 800a3fc:	ec47 6b10 	vmov	d0, r6, r7
 800a400:	f000 fe55 	bl	800b0ae <finite>
 800a404:	2800      	cmp	r0, #0
 800a406:	d0e8      	beq.n	800a3da <pow+0x4a>
 800a408:	2200      	movs	r2, #0
 800a40a:	2300      	movs	r3, #0
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f7f6 fb5c 	bl	8000acc <__aeabi_dcmplt>
 800a414:	2800      	cmp	r0, #0
 800a416:	d0e0      	beq.n	800a3da <pow+0x4a>
 800a418:	f7ff faf0 	bl	80099fc <__errno>
 800a41c:	2321      	movs	r3, #33	; 0x21
 800a41e:	6003      	str	r3, [r0, #0]
 800a420:	2400      	movs	r4, #0
 800a422:	4d2f      	ldr	r5, [pc, #188]	; (800a4e0 <pow+0x150>)
 800a424:	e7d9      	b.n	800a3da <pow+0x4a>
 800a426:	ec45 4b10 	vmov	d0, r4, r5
 800a42a:	f000 fe40 	bl	800b0ae <finite>
 800a42e:	bbb8      	cbnz	r0, 800a4a0 <pow+0x110>
 800a430:	ec49 8b10 	vmov	d0, r8, r9
 800a434:	f000 fe3b 	bl	800b0ae <finite>
 800a438:	b390      	cbz	r0, 800a4a0 <pow+0x110>
 800a43a:	ec47 6b10 	vmov	d0, r6, r7
 800a43e:	f000 fe36 	bl	800b0ae <finite>
 800a442:	b368      	cbz	r0, 800a4a0 <pow+0x110>
 800a444:	4622      	mov	r2, r4
 800a446:	462b      	mov	r3, r5
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f6 fb66 	bl	8000b1c <__aeabi_dcmpun>
 800a450:	b160      	cbz	r0, 800a46c <pow+0xdc>
 800a452:	f7ff fad3 	bl	80099fc <__errno>
 800a456:	2321      	movs	r3, #33	; 0x21
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	2200      	movs	r2, #0
 800a45c:	2300      	movs	r3, #0
 800a45e:	4610      	mov	r0, r2
 800a460:	4619      	mov	r1, r3
 800a462:	f7f6 f9eb 	bl	800083c <__aeabi_ddiv>
 800a466:	4604      	mov	r4, r0
 800a468:	460d      	mov	r5, r1
 800a46a:	e7b6      	b.n	800a3da <pow+0x4a>
 800a46c:	f7ff fac6 	bl	80099fc <__errno>
 800a470:	2322      	movs	r3, #34	; 0x22
 800a472:	6003      	str	r3, [r0, #0]
 800a474:	2200      	movs	r2, #0
 800a476:	2300      	movs	r3, #0
 800a478:	4640      	mov	r0, r8
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f6 fb26 	bl	8000acc <__aeabi_dcmplt>
 800a480:	2400      	movs	r4, #0
 800a482:	b158      	cbz	r0, 800a49c <pow+0x10c>
 800a484:	ec47 6b10 	vmov	d0, r6, r7
 800a488:	f000 fe26 	bl	800b0d8 <rint>
 800a48c:	4632      	mov	r2, r6
 800a48e:	ec51 0b10 	vmov	r0, r1, d0
 800a492:	463b      	mov	r3, r7
 800a494:	f7f6 fb10 	bl	8000ab8 <__aeabi_dcmpeq>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0c2      	beq.n	800a422 <pow+0x92>
 800a49c:	4d11      	ldr	r5, [pc, #68]	; (800a4e4 <pow+0x154>)
 800a49e:	e79c      	b.n	800a3da <pow+0x4a>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f6 fb06 	bl	8000ab8 <__aeabi_dcmpeq>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d094      	beq.n	800a3da <pow+0x4a>
 800a4b0:	ec49 8b10 	vmov	d0, r8, r9
 800a4b4:	f000 fdfb 	bl	800b0ae <finite>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d08e      	beq.n	800a3da <pow+0x4a>
 800a4bc:	ec47 6b10 	vmov	d0, r6, r7
 800a4c0:	f000 fdf5 	bl	800b0ae <finite>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d088      	beq.n	800a3da <pow+0x4a>
 800a4c8:	f7ff fa98 	bl	80099fc <__errno>
 800a4cc:	2322      	movs	r3, #34	; 0x22
 800a4ce:	6003      	str	r3, [r0, #0]
 800a4d0:	2400      	movs	r4, #0
 800a4d2:	2500      	movs	r5, #0
 800a4d4:	e781      	b.n	800a3da <pow+0x4a>
 800a4d6:	4d04      	ldr	r5, [pc, #16]	; (800a4e8 <pow+0x158>)
 800a4d8:	2400      	movs	r4, #0
 800a4da:	e77e      	b.n	800a3da <pow+0x4a>
 800a4dc:	20000074 	.word	0x20000074
 800a4e0:	fff00000 	.word	0xfff00000
 800a4e4:	7ff00000 	.word	0x7ff00000
 800a4e8:	3ff00000 	.word	0x3ff00000
 800a4ec:	00000000 	.word	0x00000000

0800a4f0 <__ieee754_pow>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	ed2d 8b06 	vpush	{d8-d10}
 800a4f8:	b08d      	sub	sp, #52	; 0x34
 800a4fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a4fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a502:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a506:	ea56 0100 	orrs.w	r1, r6, r0
 800a50a:	ec53 2b10 	vmov	r2, r3, d0
 800a50e:	f000 84d1 	beq.w	800aeb4 <__ieee754_pow+0x9c4>
 800a512:	497f      	ldr	r1, [pc, #508]	; (800a710 <__ieee754_pow+0x220>)
 800a514:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a518:	428c      	cmp	r4, r1
 800a51a:	ee10 8a10 	vmov	r8, s0
 800a51e:	4699      	mov	r9, r3
 800a520:	dc09      	bgt.n	800a536 <__ieee754_pow+0x46>
 800a522:	d103      	bne.n	800a52c <__ieee754_pow+0x3c>
 800a524:	b97a      	cbnz	r2, 800a546 <__ieee754_pow+0x56>
 800a526:	42a6      	cmp	r6, r4
 800a528:	dd02      	ble.n	800a530 <__ieee754_pow+0x40>
 800a52a:	e00c      	b.n	800a546 <__ieee754_pow+0x56>
 800a52c:	428e      	cmp	r6, r1
 800a52e:	dc02      	bgt.n	800a536 <__ieee754_pow+0x46>
 800a530:	428e      	cmp	r6, r1
 800a532:	d110      	bne.n	800a556 <__ieee754_pow+0x66>
 800a534:	b178      	cbz	r0, 800a556 <__ieee754_pow+0x66>
 800a536:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a53a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a53e:	ea54 0308 	orrs.w	r3, r4, r8
 800a542:	f000 84b7 	beq.w	800aeb4 <__ieee754_pow+0x9c4>
 800a546:	4873      	ldr	r0, [pc, #460]	; (800a714 <__ieee754_pow+0x224>)
 800a548:	b00d      	add	sp, #52	; 0x34
 800a54a:	ecbd 8b06 	vpop	{d8-d10}
 800a54e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a552:	f000 bdb9 	b.w	800b0c8 <nan>
 800a556:	f1b9 0f00 	cmp.w	r9, #0
 800a55a:	da36      	bge.n	800a5ca <__ieee754_pow+0xda>
 800a55c:	496e      	ldr	r1, [pc, #440]	; (800a718 <__ieee754_pow+0x228>)
 800a55e:	428e      	cmp	r6, r1
 800a560:	dc51      	bgt.n	800a606 <__ieee754_pow+0x116>
 800a562:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a566:	428e      	cmp	r6, r1
 800a568:	f340 84af 	ble.w	800aeca <__ieee754_pow+0x9da>
 800a56c:	1531      	asrs	r1, r6, #20
 800a56e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a572:	2914      	cmp	r1, #20
 800a574:	dd0f      	ble.n	800a596 <__ieee754_pow+0xa6>
 800a576:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a57a:	fa20 fc01 	lsr.w	ip, r0, r1
 800a57e:	fa0c f101 	lsl.w	r1, ip, r1
 800a582:	4281      	cmp	r1, r0
 800a584:	f040 84a1 	bne.w	800aeca <__ieee754_pow+0x9da>
 800a588:	f00c 0c01 	and.w	ip, ip, #1
 800a58c:	f1cc 0102 	rsb	r1, ip, #2
 800a590:	9100      	str	r1, [sp, #0]
 800a592:	b180      	cbz	r0, 800a5b6 <__ieee754_pow+0xc6>
 800a594:	e059      	b.n	800a64a <__ieee754_pow+0x15a>
 800a596:	2800      	cmp	r0, #0
 800a598:	d155      	bne.n	800a646 <__ieee754_pow+0x156>
 800a59a:	f1c1 0114 	rsb	r1, r1, #20
 800a59e:	fa46 fc01 	asr.w	ip, r6, r1
 800a5a2:	fa0c f101 	lsl.w	r1, ip, r1
 800a5a6:	42b1      	cmp	r1, r6
 800a5a8:	f040 848c 	bne.w	800aec4 <__ieee754_pow+0x9d4>
 800a5ac:	f00c 0c01 	and.w	ip, ip, #1
 800a5b0:	f1cc 0102 	rsb	r1, ip, #2
 800a5b4:	9100      	str	r1, [sp, #0]
 800a5b6:	4959      	ldr	r1, [pc, #356]	; (800a71c <__ieee754_pow+0x22c>)
 800a5b8:	428e      	cmp	r6, r1
 800a5ba:	d12d      	bne.n	800a618 <__ieee754_pow+0x128>
 800a5bc:	2f00      	cmp	r7, #0
 800a5be:	da79      	bge.n	800a6b4 <__ieee754_pow+0x1c4>
 800a5c0:	4956      	ldr	r1, [pc, #344]	; (800a71c <__ieee754_pow+0x22c>)
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	f7f6 f93a 	bl	800083c <__aeabi_ddiv>
 800a5c8:	e016      	b.n	800a5f8 <__ieee754_pow+0x108>
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	9100      	str	r1, [sp, #0]
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d13b      	bne.n	800a64a <__ieee754_pow+0x15a>
 800a5d2:	494f      	ldr	r1, [pc, #316]	; (800a710 <__ieee754_pow+0x220>)
 800a5d4:	428e      	cmp	r6, r1
 800a5d6:	d1ee      	bne.n	800a5b6 <__ieee754_pow+0xc6>
 800a5d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a5dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a5e0:	ea53 0308 	orrs.w	r3, r3, r8
 800a5e4:	f000 8466 	beq.w	800aeb4 <__ieee754_pow+0x9c4>
 800a5e8:	4b4d      	ldr	r3, [pc, #308]	; (800a720 <__ieee754_pow+0x230>)
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	dd0d      	ble.n	800a60a <__ieee754_pow+0x11a>
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	f280 8464 	bge.w	800aebc <__ieee754_pow+0x9cc>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	ec41 0b10 	vmov	d0, r0, r1
 800a5fc:	b00d      	add	sp, #52	; 0x34
 800a5fe:	ecbd 8b06 	vpop	{d8-d10}
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	2102      	movs	r1, #2
 800a608:	e7e0      	b.n	800a5cc <__ieee754_pow+0xdc>
 800a60a:	2f00      	cmp	r7, #0
 800a60c:	daf2      	bge.n	800a5f4 <__ieee754_pow+0x104>
 800a60e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a612:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a616:	e7ef      	b.n	800a5f8 <__ieee754_pow+0x108>
 800a618:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a61c:	d104      	bne.n	800a628 <__ieee754_pow+0x138>
 800a61e:	4610      	mov	r0, r2
 800a620:	4619      	mov	r1, r3
 800a622:	f7f5 ffe1 	bl	80005e8 <__aeabi_dmul>
 800a626:	e7e7      	b.n	800a5f8 <__ieee754_pow+0x108>
 800a628:	493e      	ldr	r1, [pc, #248]	; (800a724 <__ieee754_pow+0x234>)
 800a62a:	428f      	cmp	r7, r1
 800a62c:	d10d      	bne.n	800a64a <__ieee754_pow+0x15a>
 800a62e:	f1b9 0f00 	cmp.w	r9, #0
 800a632:	db0a      	blt.n	800a64a <__ieee754_pow+0x15a>
 800a634:	ec43 2b10 	vmov	d0, r2, r3
 800a638:	b00d      	add	sp, #52	; 0x34
 800a63a:	ecbd 8b06 	vpop	{d8-d10}
 800a63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a642:	f000 bc77 	b.w	800af34 <__ieee754_sqrt>
 800a646:	2100      	movs	r1, #0
 800a648:	9100      	str	r1, [sp, #0]
 800a64a:	ec43 2b10 	vmov	d0, r2, r3
 800a64e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a652:	f000 fd23 	bl	800b09c <fabs>
 800a656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a65a:	ec51 0b10 	vmov	r0, r1, d0
 800a65e:	f1b8 0f00 	cmp.w	r8, #0
 800a662:	d12a      	bne.n	800a6ba <__ieee754_pow+0x1ca>
 800a664:	b12c      	cbz	r4, 800a672 <__ieee754_pow+0x182>
 800a666:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a71c <__ieee754_pow+0x22c>
 800a66a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a66e:	45e6      	cmp	lr, ip
 800a670:	d123      	bne.n	800a6ba <__ieee754_pow+0x1ca>
 800a672:	2f00      	cmp	r7, #0
 800a674:	da05      	bge.n	800a682 <__ieee754_pow+0x192>
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	2000      	movs	r0, #0
 800a67c:	4927      	ldr	r1, [pc, #156]	; (800a71c <__ieee754_pow+0x22c>)
 800a67e:	f7f6 f8dd 	bl	800083c <__aeabi_ddiv>
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	dab7      	bge.n	800a5f8 <__ieee754_pow+0x108>
 800a688:	9b00      	ldr	r3, [sp, #0]
 800a68a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a68e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a692:	4323      	orrs	r3, r4
 800a694:	d108      	bne.n	800a6a8 <__ieee754_pow+0x1b8>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	f7f5 fdeb 	bl	8000278 <__aeabi_dsub>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	e78d      	b.n	800a5c4 <__ieee754_pow+0xd4>
 800a6a8:	9b00      	ldr	r3, [sp, #0]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d1a4      	bne.n	800a5f8 <__ieee754_pow+0x108>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	e79e      	b.n	800a5f8 <__ieee754_pow+0x108>
 800a6ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a6be:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a6c2:	950a      	str	r5, [sp, #40]	; 0x28
 800a6c4:	9d00      	ldr	r5, [sp, #0]
 800a6c6:	46ac      	mov	ip, r5
 800a6c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a6ca:	ea5c 0505 	orrs.w	r5, ip, r5
 800a6ce:	d0e4      	beq.n	800a69a <__ieee754_pow+0x1aa>
 800a6d0:	4b15      	ldr	r3, [pc, #84]	; (800a728 <__ieee754_pow+0x238>)
 800a6d2:	429e      	cmp	r6, r3
 800a6d4:	f340 80fc 	ble.w	800a8d0 <__ieee754_pow+0x3e0>
 800a6d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a6dc:	429e      	cmp	r6, r3
 800a6de:	4b10      	ldr	r3, [pc, #64]	; (800a720 <__ieee754_pow+0x230>)
 800a6e0:	dd07      	ble.n	800a6f2 <__ieee754_pow+0x202>
 800a6e2:	429c      	cmp	r4, r3
 800a6e4:	dc0a      	bgt.n	800a6fc <__ieee754_pow+0x20c>
 800a6e6:	2f00      	cmp	r7, #0
 800a6e8:	da84      	bge.n	800a5f4 <__ieee754_pow+0x104>
 800a6ea:	a307      	add	r3, pc, #28	; (adr r3, 800a708 <__ieee754_pow+0x218>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	e795      	b.n	800a61e <__ieee754_pow+0x12e>
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	dbf7      	blt.n	800a6e6 <__ieee754_pow+0x1f6>
 800a6f6:	4b09      	ldr	r3, [pc, #36]	; (800a71c <__ieee754_pow+0x22c>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	dd17      	ble.n	800a72c <__ieee754_pow+0x23c>
 800a6fc:	2f00      	cmp	r7, #0
 800a6fe:	dcf4      	bgt.n	800a6ea <__ieee754_pow+0x1fa>
 800a700:	e778      	b.n	800a5f4 <__ieee754_pow+0x104>
 800a702:	bf00      	nop
 800a704:	f3af 8000 	nop.w
 800a708:	8800759c 	.word	0x8800759c
 800a70c:	7e37e43c 	.word	0x7e37e43c
 800a710:	7ff00000 	.word	0x7ff00000
 800a714:	0800b411 	.word	0x0800b411
 800a718:	433fffff 	.word	0x433fffff
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	3fefffff 	.word	0x3fefffff
 800a724:	3fe00000 	.word	0x3fe00000
 800a728:	41e00000 	.word	0x41e00000
 800a72c:	4b64      	ldr	r3, [pc, #400]	; (800a8c0 <__ieee754_pow+0x3d0>)
 800a72e:	2200      	movs	r2, #0
 800a730:	f7f5 fda2 	bl	8000278 <__aeabi_dsub>
 800a734:	a356      	add	r3, pc, #344	; (adr r3, 800a890 <__ieee754_pow+0x3a0>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	4604      	mov	r4, r0
 800a73c:	460d      	mov	r5, r1
 800a73e:	f7f5 ff53 	bl	80005e8 <__aeabi_dmul>
 800a742:	a355      	add	r3, pc, #340	; (adr r3, 800a898 <__ieee754_pow+0x3a8>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	4606      	mov	r6, r0
 800a74a:	460f      	mov	r7, r1
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 ff4a 	bl	80005e8 <__aeabi_dmul>
 800a754:	4b5b      	ldr	r3, [pc, #364]	; (800a8c4 <__ieee754_pow+0x3d4>)
 800a756:	4682      	mov	sl, r0
 800a758:	468b      	mov	fp, r1
 800a75a:	2200      	movs	r2, #0
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 ff42 	bl	80005e8 <__aeabi_dmul>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	a14d      	add	r1, pc, #308	; (adr r1, 800a8a0 <__ieee754_pow+0x3b0>)
 800a76a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76e:	f7f5 fd83 	bl	8000278 <__aeabi_dsub>
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	f7f5 ff37 	bl	80005e8 <__aeabi_dmul>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	2000      	movs	r0, #0
 800a780:	4951      	ldr	r1, [pc, #324]	; (800a8c8 <__ieee754_pow+0x3d8>)
 800a782:	f7f5 fd79 	bl	8000278 <__aeabi_dsub>
 800a786:	4622      	mov	r2, r4
 800a788:	4680      	mov	r8, r0
 800a78a:	4689      	mov	r9, r1
 800a78c:	462b      	mov	r3, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	4629      	mov	r1, r5
 800a792:	f7f5 ff29 	bl	80005e8 <__aeabi_dmul>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f7f5 ff23 	bl	80005e8 <__aeabi_dmul>
 800a7a2:	a341      	add	r3, pc, #260	; (adr r3, 800a8a8 <__ieee754_pow+0x3b8>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f7f5 ff1e 	bl	80005e8 <__aeabi_dmul>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	4659      	mov	r1, fp
 800a7b4:	f7f5 fd60 	bl	8000278 <__aeabi_dsub>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f5 fd5a 	bl	800027c <__adddf3>
 800a7c8:	2400      	movs	r4, #0
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	f7f5 fd51 	bl	8000278 <__aeabi_dsub>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4640      	mov	r0, r8
 800a7dc:	4649      	mov	r1, r9
 800a7de:	f7f5 fd4b 	bl	8000278 <__aeabi_dsub>
 800a7e2:	9b00      	ldr	r3, [sp, #0]
 800a7e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	4682      	mov	sl, r0
 800a7ec:	468b      	mov	fp, r1
 800a7ee:	f040 81f1 	bne.w	800abd4 <__ieee754_pow+0x6e4>
 800a7f2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a8b0 <__ieee754_pow+0x3c0>
 800a7f6:	eeb0 8a47 	vmov.f32	s16, s14
 800a7fa:	eef0 8a67 	vmov.f32	s17, s15
 800a7fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a802:	2600      	movs	r6, #0
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80c:	f7f5 fd34 	bl	8000278 <__aeabi_dsub>
 800a810:	4622      	mov	r2, r4
 800a812:	462b      	mov	r3, r5
 800a814:	f7f5 fee8 	bl	80005e8 <__aeabi_dmul>
 800a818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a81c:	4680      	mov	r8, r0
 800a81e:	4689      	mov	r9, r1
 800a820:	4650      	mov	r0, sl
 800a822:	4659      	mov	r1, fp
 800a824:	f7f5 fee0 	bl	80005e8 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 fd24 	bl	800027c <__adddf3>
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	4680      	mov	r8, r0
 800a83a:	4689      	mov	r9, r1
 800a83c:	4620      	mov	r0, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	f7f5 fed2 	bl	80005e8 <__aeabi_dmul>
 800a844:	460b      	mov	r3, r1
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	4602      	mov	r2, r0
 800a84c:	4649      	mov	r1, r9
 800a84e:	4640      	mov	r0, r8
 800a850:	f7f5 fd14 	bl	800027c <__adddf3>
 800a854:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <__ieee754_pow+0x3dc>)
 800a856:	4299      	cmp	r1, r3
 800a858:	ec45 4b19 	vmov	d9, r4, r5
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	468b      	mov	fp, r1
 800a862:	f340 82fe 	ble.w	800ae62 <__ieee754_pow+0x972>
 800a866:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a86a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a86e:	4303      	orrs	r3, r0
 800a870:	f000 81f0 	beq.w	800ac54 <__ieee754_pow+0x764>
 800a874:	a310      	add	r3, pc, #64	; (adr r3, 800a8b8 <__ieee754_pow+0x3c8>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	ec51 0b18 	vmov	r0, r1, d8
 800a87e:	f7f5 feb3 	bl	80005e8 <__aeabi_dmul>
 800a882:	a30d      	add	r3, pc, #52	; (adr r3, 800a8b8 <__ieee754_pow+0x3c8>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	e6cb      	b.n	800a622 <__ieee754_pow+0x132>
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w
 800a890:	60000000 	.word	0x60000000
 800a894:	3ff71547 	.word	0x3ff71547
 800a898:	f85ddf44 	.word	0xf85ddf44
 800a89c:	3e54ae0b 	.word	0x3e54ae0b
 800a8a0:	55555555 	.word	0x55555555
 800a8a4:	3fd55555 	.word	0x3fd55555
 800a8a8:	652b82fe 	.word	0x652b82fe
 800a8ac:	3ff71547 	.word	0x3ff71547
 800a8b0:	00000000 	.word	0x00000000
 800a8b4:	bff00000 	.word	0xbff00000
 800a8b8:	8800759c 	.word	0x8800759c
 800a8bc:	7e37e43c 	.word	0x7e37e43c
 800a8c0:	3ff00000 	.word	0x3ff00000
 800a8c4:	3fd00000 	.word	0x3fd00000
 800a8c8:	3fe00000 	.word	0x3fe00000
 800a8cc:	408fffff 	.word	0x408fffff
 800a8d0:	4bd7      	ldr	r3, [pc, #860]	; (800ac30 <__ieee754_pow+0x740>)
 800a8d2:	ea03 0309 	and.w	r3, r3, r9
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	b92b      	cbnz	r3, 800a8e6 <__ieee754_pow+0x3f6>
 800a8da:	4bd6      	ldr	r3, [pc, #856]	; (800ac34 <__ieee754_pow+0x744>)
 800a8dc:	f7f5 fe84 	bl	80005e8 <__aeabi_dmul>
 800a8e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	1523      	asrs	r3, r4, #20
 800a8e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8ec:	4413      	add	r3, r2
 800a8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f0:	4bd1      	ldr	r3, [pc, #836]	; (800ac38 <__ieee754_pow+0x748>)
 800a8f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a8f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a8fa:	429c      	cmp	r4, r3
 800a8fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a900:	dd08      	ble.n	800a914 <__ieee754_pow+0x424>
 800a902:	4bce      	ldr	r3, [pc, #824]	; (800ac3c <__ieee754_pow+0x74c>)
 800a904:	429c      	cmp	r4, r3
 800a906:	f340 8163 	ble.w	800abd0 <__ieee754_pow+0x6e0>
 800a90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90c:	3301      	adds	r3, #1
 800a90e:	9309      	str	r3, [sp, #36]	; 0x24
 800a910:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a914:	2400      	movs	r4, #0
 800a916:	00e3      	lsls	r3, r4, #3
 800a918:	930b      	str	r3, [sp, #44]	; 0x2c
 800a91a:	4bc9      	ldr	r3, [pc, #804]	; (800ac40 <__ieee754_pow+0x750>)
 800a91c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a920:	ed93 7b00 	vldr	d7, [r3]
 800a924:	4629      	mov	r1, r5
 800a926:	ec53 2b17 	vmov	r2, r3, d7
 800a92a:	eeb0 8a47 	vmov.f32	s16, s14
 800a92e:	eef0 8a67 	vmov.f32	s17, s15
 800a932:	4682      	mov	sl, r0
 800a934:	f7f5 fca0 	bl	8000278 <__aeabi_dsub>
 800a938:	4652      	mov	r2, sl
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	462b      	mov	r3, r5
 800a940:	ec51 0b18 	vmov	r0, r1, d8
 800a944:	f7f5 fc9a 	bl	800027c <__adddf3>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	2000      	movs	r0, #0
 800a94e:	49bd      	ldr	r1, [pc, #756]	; (800ac44 <__ieee754_pow+0x754>)
 800a950:	f7f5 ff74 	bl	800083c <__aeabi_ddiv>
 800a954:	ec41 0b19 	vmov	d9, r0, r1
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	f7f5 fe42 	bl	80005e8 <__aeabi_dmul>
 800a964:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a96c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a970:	2300      	movs	r3, #0
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a978:	46ab      	mov	fp, r5
 800a97a:	106d      	asrs	r5, r5, #1
 800a97c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a980:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a984:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a988:	2200      	movs	r2, #0
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	4614      	mov	r4, r2
 800a990:	461d      	mov	r5, r3
 800a992:	f7f5 fe29 	bl	80005e8 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f5 fc6b 	bl	8000278 <__aeabi_dsub>
 800a9a2:	ec53 2b18 	vmov	r2, r3, d8
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7f5 fc63 	bl	8000278 <__aeabi_dsub>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	4659      	mov	r1, fp
 800a9ba:	f7f5 fc5d 	bl	8000278 <__aeabi_dsub>
 800a9be:	4642      	mov	r2, r8
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	f7f5 fe11 	bl	80005e8 <__aeabi_dmul>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f5 fc53 	bl	8000278 <__aeabi_dsub>
 800a9d2:	ec53 2b19 	vmov	r2, r3, d9
 800a9d6:	f7f5 fe07 	bl	80005e8 <__aeabi_dmul>
 800a9da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9de:	ec41 0b18 	vmov	d8, r0, r1
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f7f5 fdff 	bl	80005e8 <__aeabi_dmul>
 800a9ea:	a37d      	add	r3, pc, #500	; (adr r3, 800abe0 <__ieee754_pow+0x6f0>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	f7f5 fdf8 	bl	80005e8 <__aeabi_dmul>
 800a9f8:	a37b      	add	r3, pc, #492	; (adr r3, 800abe8 <__ieee754_pow+0x6f8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fc3d 	bl	800027c <__adddf3>
 800aa02:	4622      	mov	r2, r4
 800aa04:	462b      	mov	r3, r5
 800aa06:	f7f5 fdef 	bl	80005e8 <__aeabi_dmul>
 800aa0a:	a379      	add	r3, pc, #484	; (adr r3, 800abf0 <__ieee754_pow+0x700>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fc34 	bl	800027c <__adddf3>
 800aa14:	4622      	mov	r2, r4
 800aa16:	462b      	mov	r3, r5
 800aa18:	f7f5 fde6 	bl	80005e8 <__aeabi_dmul>
 800aa1c:	a376      	add	r3, pc, #472	; (adr r3, 800abf8 <__ieee754_pow+0x708>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc2b 	bl	800027c <__adddf3>
 800aa26:	4622      	mov	r2, r4
 800aa28:	462b      	mov	r3, r5
 800aa2a:	f7f5 fddd 	bl	80005e8 <__aeabi_dmul>
 800aa2e:	a374      	add	r3, pc, #464	; (adr r3, 800ac00 <__ieee754_pow+0x710>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fc22 	bl	800027c <__adddf3>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	f7f5 fdd4 	bl	80005e8 <__aeabi_dmul>
 800aa40:	a371      	add	r3, pc, #452	; (adr r3, 800ac08 <__ieee754_pow+0x718>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fc19 	bl	800027c <__adddf3>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	462b      	mov	r3, r5
 800aa52:	4620      	mov	r0, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	f7f5 fdc7 	bl	80005e8 <__aeabi_dmul>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f5 fdc1 	bl	80005e8 <__aeabi_dmul>
 800aa66:	4642      	mov	r2, r8
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa72:	f7f5 fc03 	bl	800027c <__adddf3>
 800aa76:	ec53 2b18 	vmov	r2, r3, d8
 800aa7a:	f7f5 fdb5 	bl	80005e8 <__aeabi_dmul>
 800aa7e:	4622      	mov	r2, r4
 800aa80:	462b      	mov	r3, r5
 800aa82:	f7f5 fbfb 	bl	800027c <__adddf3>
 800aa86:	4642      	mov	r2, r8
 800aa88:	4682      	mov	sl, r0
 800aa8a:	468b      	mov	fp, r1
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	4640      	mov	r0, r8
 800aa90:	4649      	mov	r1, r9
 800aa92:	f7f5 fda9 	bl	80005e8 <__aeabi_dmul>
 800aa96:	4b6c      	ldr	r3, [pc, #432]	; (800ac48 <__ieee754_pow+0x758>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	f7f5 fbed 	bl	800027c <__adddf3>
 800aaa2:	4652      	mov	r2, sl
 800aaa4:	465b      	mov	r3, fp
 800aaa6:	f7f5 fbe9 	bl	800027c <__adddf3>
 800aaaa:	9c04      	ldr	r4, [sp, #16]
 800aaac:	460d      	mov	r5, r1
 800aaae:	4622      	mov	r2, r4
 800aab0:	460b      	mov	r3, r1
 800aab2:	4640      	mov	r0, r8
 800aab4:	4649      	mov	r1, r9
 800aab6:	f7f5 fd97 	bl	80005e8 <__aeabi_dmul>
 800aaba:	4b63      	ldr	r3, [pc, #396]	; (800ac48 <__ieee754_pow+0x758>)
 800aabc:	4680      	mov	r8, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	2200      	movs	r2, #0
 800aac2:	4620      	mov	r0, r4
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7f5 fbd7 	bl	8000278 <__aeabi_dsub>
 800aaca:	4632      	mov	r2, r6
 800aacc:	463b      	mov	r3, r7
 800aace:	f7f5 fbd3 	bl	8000278 <__aeabi_dsub>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4650      	mov	r0, sl
 800aad8:	4659      	mov	r1, fp
 800aada:	f7f5 fbcd 	bl	8000278 <__aeabi_dsub>
 800aade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aae2:	f7f5 fd81 	bl	80005e8 <__aeabi_dmul>
 800aae6:	4622      	mov	r2, r4
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	462b      	mov	r3, r5
 800aaee:	ec51 0b18 	vmov	r0, r1, d8
 800aaf2:	f7f5 fd79 	bl	80005e8 <__aeabi_dmul>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fbbd 	bl	800027c <__adddf3>
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbb5 	bl	800027c <__adddf3>
 800ab12:	9c04      	ldr	r4, [sp, #16]
 800ab14:	a33e      	add	r3, pc, #248	; (adr r3, 800ac10 <__ieee754_pow+0x720>)
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	460d      	mov	r5, r1
 800ab1e:	f7f5 fd63 	bl	80005e8 <__aeabi_dmul>
 800ab22:	4642      	mov	r2, r8
 800ab24:	ec41 0b18 	vmov	d8, r0, r1
 800ab28:	464b      	mov	r3, r9
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fba3 	bl	8000278 <__aeabi_dsub>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 fb9d 	bl	8000278 <__aeabi_dsub>
 800ab3e:	a336      	add	r3, pc, #216	; (adr r3, 800ac18 <__ieee754_pow+0x728>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fd50 	bl	80005e8 <__aeabi_dmul>
 800ab48:	a335      	add	r3, pc, #212	; (adr r3, 800ac20 <__ieee754_pow+0x730>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460f      	mov	r7, r1
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fd47 	bl	80005e8 <__aeabi_dmul>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4639      	mov	r1, r7
 800ab62:	f7f5 fb8b 	bl	800027c <__adddf3>
 800ab66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab68:	4b38      	ldr	r3, [pc, #224]	; (800ac4c <__ieee754_pow+0x75c>)
 800ab6a:	4413      	add	r3, r2
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fb84 	bl	800027c <__adddf3>
 800ab74:	4682      	mov	sl, r0
 800ab76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab78:	468b      	mov	fp, r1
 800ab7a:	f7f5 fccb 	bl	8000514 <__aeabi_i2d>
 800ab7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab80:	4b33      	ldr	r3, [pc, #204]	; (800ac50 <__ieee754_pow+0x760>)
 800ab82:	4413      	add	r3, r2
 800ab84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab88:	4606      	mov	r6, r0
 800ab8a:	460f      	mov	r7, r1
 800ab8c:	4652      	mov	r2, sl
 800ab8e:	465b      	mov	r3, fp
 800ab90:	ec51 0b18 	vmov	r0, r1, d8
 800ab94:	f7f5 fb72 	bl	800027c <__adddf3>
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	f7f5 fb6e 	bl	800027c <__adddf3>
 800aba0:	4632      	mov	r2, r6
 800aba2:	463b      	mov	r3, r7
 800aba4:	f7f5 fb6a 	bl	800027c <__adddf3>
 800aba8:	9c04      	ldr	r4, [sp, #16]
 800abaa:	4632      	mov	r2, r6
 800abac:	463b      	mov	r3, r7
 800abae:	4620      	mov	r0, r4
 800abb0:	460d      	mov	r5, r1
 800abb2:	f7f5 fb61 	bl	8000278 <__aeabi_dsub>
 800abb6:	4642      	mov	r2, r8
 800abb8:	464b      	mov	r3, r9
 800abba:	f7f5 fb5d 	bl	8000278 <__aeabi_dsub>
 800abbe:	ec53 2b18 	vmov	r2, r3, d8
 800abc2:	f7f5 fb59 	bl	8000278 <__aeabi_dsub>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	4650      	mov	r0, sl
 800abcc:	4659      	mov	r1, fp
 800abce:	e606      	b.n	800a7de <__ieee754_pow+0x2ee>
 800abd0:	2401      	movs	r4, #1
 800abd2:	e6a0      	b.n	800a916 <__ieee754_pow+0x426>
 800abd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ac28 <__ieee754_pow+0x738>
 800abd8:	e60d      	b.n	800a7f6 <__ieee754_pow+0x306>
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w
 800abe0:	4a454eef 	.word	0x4a454eef
 800abe4:	3fca7e28 	.word	0x3fca7e28
 800abe8:	93c9db65 	.word	0x93c9db65
 800abec:	3fcd864a 	.word	0x3fcd864a
 800abf0:	a91d4101 	.word	0xa91d4101
 800abf4:	3fd17460 	.word	0x3fd17460
 800abf8:	518f264d 	.word	0x518f264d
 800abfc:	3fd55555 	.word	0x3fd55555
 800ac00:	db6fabff 	.word	0xdb6fabff
 800ac04:	3fdb6db6 	.word	0x3fdb6db6
 800ac08:	33333303 	.word	0x33333303
 800ac0c:	3fe33333 	.word	0x3fe33333
 800ac10:	e0000000 	.word	0xe0000000
 800ac14:	3feec709 	.word	0x3feec709
 800ac18:	dc3a03fd 	.word	0xdc3a03fd
 800ac1c:	3feec709 	.word	0x3feec709
 800ac20:	145b01f5 	.word	0x145b01f5
 800ac24:	be3e2fe0 	.word	0xbe3e2fe0
 800ac28:	00000000 	.word	0x00000000
 800ac2c:	3ff00000 	.word	0x3ff00000
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	43400000 	.word	0x43400000
 800ac38:	0003988e 	.word	0x0003988e
 800ac3c:	000bb679 	.word	0x000bb679
 800ac40:	0800b440 	.word	0x0800b440
 800ac44:	3ff00000 	.word	0x3ff00000
 800ac48:	40080000 	.word	0x40080000
 800ac4c:	0800b460 	.word	0x0800b460
 800ac50:	0800b450 	.word	0x0800b450
 800ac54:	a3b5      	add	r3, pc, #724	; (adr r3, 800af2c <__ieee754_pow+0xa3c>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	f7f5 fb0d 	bl	800027c <__adddf3>
 800ac62:	4622      	mov	r2, r4
 800ac64:	ec41 0b1a 	vmov	d10, r0, r1
 800ac68:	462b      	mov	r3, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	f7f5 fb03 	bl	8000278 <__aeabi_dsub>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	ec51 0b1a 	vmov	r0, r1, d10
 800ac7a:	f7f5 ff45 	bl	8000b08 <__aeabi_dcmpgt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f47f adf8 	bne.w	800a874 <__ieee754_pow+0x384>
 800ac84:	4aa4      	ldr	r2, [pc, #656]	; (800af18 <__ieee754_pow+0xa28>)
 800ac86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	f340 810b 	ble.w	800aea6 <__ieee754_pow+0x9b6>
 800ac90:	151b      	asrs	r3, r3, #20
 800ac92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ac96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ac9a:	fa4a f303 	asr.w	r3, sl, r3
 800ac9e:	445b      	add	r3, fp
 800aca0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aca4:	4e9d      	ldr	r6, [pc, #628]	; (800af1c <__ieee754_pow+0xa2c>)
 800aca6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800acaa:	4116      	asrs	r6, r2
 800acac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800acb0:	2000      	movs	r0, #0
 800acb2:	ea23 0106 	bic.w	r1, r3, r6
 800acb6:	f1c2 0214 	rsb	r2, r2, #20
 800acba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800acbe:	fa4a fa02 	asr.w	sl, sl, r2
 800acc2:	f1bb 0f00 	cmp.w	fp, #0
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	bfb8      	it	lt
 800acd0:	f1ca 0a00 	rsblt	sl, sl, #0
 800acd4:	f7f5 fad0 	bl	8000278 <__aeabi_dsub>
 800acd8:	ec41 0b19 	vmov	d9, r0, r1
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	ec51 0b19 	vmov	r0, r1, d9
 800ace4:	f7f5 faca 	bl	800027c <__adddf3>
 800ace8:	2400      	movs	r4, #0
 800acea:	a379      	add	r3, pc, #484	; (adr r3, 800aed0 <__ieee754_pow+0x9e0>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	4620      	mov	r0, r4
 800acf2:	460d      	mov	r5, r1
 800acf4:	f7f5 fc78 	bl	80005e8 <__aeabi_dmul>
 800acf8:	ec53 2b19 	vmov	r2, r3, d9
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	4620      	mov	r0, r4
 800ad02:	4629      	mov	r1, r5
 800ad04:	f7f5 fab8 	bl	8000278 <__aeabi_dsub>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 fab2 	bl	8000278 <__aeabi_dsub>
 800ad14:	a370      	add	r3, pc, #448	; (adr r3, 800aed8 <__ieee754_pow+0x9e8>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fc65 	bl	80005e8 <__aeabi_dmul>
 800ad1e:	a370      	add	r3, pc, #448	; (adr r3, 800aee0 <__ieee754_pow+0x9f0>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	4680      	mov	r8, r0
 800ad26:	4689      	mov	r9, r1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 fc5c 	bl	80005e8 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4640      	mov	r0, r8
 800ad36:	4649      	mov	r1, r9
 800ad38:	f7f5 faa0 	bl	800027c <__adddf3>
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4630      	mov	r0, r6
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 fa98 	bl	800027c <__adddf3>
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	463b      	mov	r3, r7
 800ad50:	4680      	mov	r8, r0
 800ad52:	4689      	mov	r9, r1
 800ad54:	f7f5 fa90 	bl	8000278 <__aeabi_dsub>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	f7f5 fa8a 	bl	8000278 <__aeabi_dsub>
 800ad64:	4642      	mov	r2, r8
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 fc3a 	bl	80005e8 <__aeabi_dmul>
 800ad74:	a35c      	add	r3, pc, #368	; (adr r3, 800aee8 <__ieee754_pow+0x9f8>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	460d      	mov	r5, r1
 800ad7e:	f7f5 fc33 	bl	80005e8 <__aeabi_dmul>
 800ad82:	a35b      	add	r3, pc, #364	; (adr r3, 800aef0 <__ieee754_pow+0xa00>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fa76 	bl	8000278 <__aeabi_dsub>
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	462b      	mov	r3, r5
 800ad90:	f7f5 fc2a 	bl	80005e8 <__aeabi_dmul>
 800ad94:	a358      	add	r3, pc, #352	; (adr r3, 800aef8 <__ieee754_pow+0xa08>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 fa6f 	bl	800027c <__adddf3>
 800ad9e:	4622      	mov	r2, r4
 800ada0:	462b      	mov	r3, r5
 800ada2:	f7f5 fc21 	bl	80005e8 <__aeabi_dmul>
 800ada6:	a356      	add	r3, pc, #344	; (adr r3, 800af00 <__ieee754_pow+0xa10>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	f7f5 fa64 	bl	8000278 <__aeabi_dsub>
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	f7f5 fc18 	bl	80005e8 <__aeabi_dmul>
 800adb8:	a353      	add	r3, pc, #332	; (adr r3, 800af08 <__ieee754_pow+0xa18>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f7f5 fa5d 	bl	800027c <__adddf3>
 800adc2:	4622      	mov	r2, r4
 800adc4:	462b      	mov	r3, r5
 800adc6:	f7f5 fc0f 	bl	80005e8 <__aeabi_dmul>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fa51 	bl	8000278 <__aeabi_dsub>
 800add6:	4604      	mov	r4, r0
 800add8:	460d      	mov	r5, r1
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	f7f5 fc01 	bl	80005e8 <__aeabi_dmul>
 800ade6:	2200      	movs	r2, #0
 800ade8:	ec41 0b19 	vmov	d9, r0, r1
 800adec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adf0:	4620      	mov	r0, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	f7f5 fa40 	bl	8000278 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	ec51 0b19 	vmov	r0, r1, d9
 800ae00:	f7f5 fd1c 	bl	800083c <__aeabi_ddiv>
 800ae04:	4632      	mov	r2, r6
 800ae06:	4604      	mov	r4, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f7f5 fbea 	bl	80005e8 <__aeabi_dmul>
 800ae14:	4632      	mov	r2, r6
 800ae16:	463b      	mov	r3, r7
 800ae18:	f7f5 fa30 	bl	800027c <__adddf3>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 fa28 	bl	8000278 <__aeabi_dsub>
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	f7f5 fa24 	bl	8000278 <__aeabi_dsub>
 800ae30:	460b      	mov	r3, r1
 800ae32:	4602      	mov	r2, r0
 800ae34:	493a      	ldr	r1, [pc, #232]	; (800af20 <__ieee754_pow+0xa30>)
 800ae36:	2000      	movs	r0, #0
 800ae38:	f7f5 fa1e 	bl	8000278 <__aeabi_dsub>
 800ae3c:	e9cd 0100 	strd	r0, r1, [sp]
 800ae40:	9b01      	ldr	r3, [sp, #4]
 800ae42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ae46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae4a:	da2f      	bge.n	800aeac <__ieee754_pow+0x9bc>
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	ed9d 0b00 	vldr	d0, [sp]
 800ae52:	f000 f9cd 	bl	800b1f0 <scalbn>
 800ae56:	ec51 0b10 	vmov	r0, r1, d0
 800ae5a:	ec53 2b18 	vmov	r2, r3, d8
 800ae5e:	f7ff bbe0 	b.w	800a622 <__ieee754_pow+0x132>
 800ae62:	4b30      	ldr	r3, [pc, #192]	; (800af24 <__ieee754_pow+0xa34>)
 800ae64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ae68:	429e      	cmp	r6, r3
 800ae6a:	f77f af0b 	ble.w	800ac84 <__ieee754_pow+0x794>
 800ae6e:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <__ieee754_pow+0xa38>)
 800ae70:	440b      	add	r3, r1
 800ae72:	4303      	orrs	r3, r0
 800ae74:	d00b      	beq.n	800ae8e <__ieee754_pow+0x99e>
 800ae76:	a326      	add	r3, pc, #152	; (adr r3, 800af10 <__ieee754_pow+0xa20>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	ec51 0b18 	vmov	r0, r1, d8
 800ae80:	f7f5 fbb2 	bl	80005e8 <__aeabi_dmul>
 800ae84:	a322      	add	r3, pc, #136	; (adr r3, 800af10 <__ieee754_pow+0xa20>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7ff bbca 	b.w	800a622 <__ieee754_pow+0x132>
 800ae8e:	4622      	mov	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	f7f5 f9f1 	bl	8000278 <__aeabi_dsub>
 800ae96:	4642      	mov	r2, r8
 800ae98:	464b      	mov	r3, r9
 800ae9a:	f7f5 fe2b 	bl	8000af4 <__aeabi_dcmpge>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f43f aef0 	beq.w	800ac84 <__ieee754_pow+0x794>
 800aea4:	e7e7      	b.n	800ae76 <__ieee754_pow+0x986>
 800aea6:	f04f 0a00 	mov.w	sl, #0
 800aeaa:	e717      	b.n	800acdc <__ieee754_pow+0x7ec>
 800aeac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	e7d2      	b.n	800ae5a <__ieee754_pow+0x96a>
 800aeb4:	491a      	ldr	r1, [pc, #104]	; (800af20 <__ieee754_pow+0xa30>)
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f7ff bb9e 	b.w	800a5f8 <__ieee754_pow+0x108>
 800aebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec0:	f7ff bb9a 	b.w	800a5f8 <__ieee754_pow+0x108>
 800aec4:	9000      	str	r0, [sp, #0]
 800aec6:	f7ff bb76 	b.w	800a5b6 <__ieee754_pow+0xc6>
 800aeca:	2100      	movs	r1, #0
 800aecc:	f7ff bb60 	b.w	800a590 <__ieee754_pow+0xa0>
 800aed0:	00000000 	.word	0x00000000
 800aed4:	3fe62e43 	.word	0x3fe62e43
 800aed8:	fefa39ef 	.word	0xfefa39ef
 800aedc:	3fe62e42 	.word	0x3fe62e42
 800aee0:	0ca86c39 	.word	0x0ca86c39
 800aee4:	be205c61 	.word	0xbe205c61
 800aee8:	72bea4d0 	.word	0x72bea4d0
 800aeec:	3e663769 	.word	0x3e663769
 800aef0:	c5d26bf1 	.word	0xc5d26bf1
 800aef4:	3ebbbd41 	.word	0x3ebbbd41
 800aef8:	af25de2c 	.word	0xaf25de2c
 800aefc:	3f11566a 	.word	0x3f11566a
 800af00:	16bebd93 	.word	0x16bebd93
 800af04:	3f66c16c 	.word	0x3f66c16c
 800af08:	5555553e 	.word	0x5555553e
 800af0c:	3fc55555 	.word	0x3fc55555
 800af10:	c2f8f359 	.word	0xc2f8f359
 800af14:	01a56e1f 	.word	0x01a56e1f
 800af18:	3fe00000 	.word	0x3fe00000
 800af1c:	000fffff 	.word	0x000fffff
 800af20:	3ff00000 	.word	0x3ff00000
 800af24:	4090cbff 	.word	0x4090cbff
 800af28:	3f6f3400 	.word	0x3f6f3400
 800af2c:	652b82fe 	.word	0x652b82fe
 800af30:	3c971547 	.word	0x3c971547

0800af34 <__ieee754_sqrt>:
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af38:	ec55 4b10 	vmov	r4, r5, d0
 800af3c:	4e56      	ldr	r6, [pc, #344]	; (800b098 <__ieee754_sqrt+0x164>)
 800af3e:	43ae      	bics	r6, r5
 800af40:	ee10 0a10 	vmov	r0, s0
 800af44:	ee10 3a10 	vmov	r3, s0
 800af48:	4629      	mov	r1, r5
 800af4a:	462a      	mov	r2, r5
 800af4c:	d110      	bne.n	800af70 <__ieee754_sqrt+0x3c>
 800af4e:	ee10 2a10 	vmov	r2, s0
 800af52:	462b      	mov	r3, r5
 800af54:	f7f5 fb48 	bl	80005e8 <__aeabi_dmul>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4620      	mov	r0, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	f7f5 f98c 	bl	800027c <__adddf3>
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	ec45 4b10 	vmov	d0, r4, r5
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	2d00      	cmp	r5, #0
 800af72:	dc10      	bgt.n	800af96 <__ieee754_sqrt+0x62>
 800af74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af78:	4330      	orrs	r0, r6
 800af7a:	d0f5      	beq.n	800af68 <__ieee754_sqrt+0x34>
 800af7c:	b15d      	cbz	r5, 800af96 <__ieee754_sqrt+0x62>
 800af7e:	ee10 2a10 	vmov	r2, s0
 800af82:	462b      	mov	r3, r5
 800af84:	ee10 0a10 	vmov	r0, s0
 800af88:	f7f5 f976 	bl	8000278 <__aeabi_dsub>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	f7f5 fc54 	bl	800083c <__aeabi_ddiv>
 800af94:	e7e6      	b.n	800af64 <__ieee754_sqrt+0x30>
 800af96:	1509      	asrs	r1, r1, #20
 800af98:	d076      	beq.n	800b088 <__ieee754_sqrt+0x154>
 800af9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800af9e:	07ce      	lsls	r6, r1, #31
 800afa0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800afa4:	bf5e      	ittt	pl
 800afa6:	0fda      	lsrpl	r2, r3, #31
 800afa8:	005b      	lslpl	r3, r3, #1
 800afaa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800afae:	0fda      	lsrs	r2, r3, #31
 800afb0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800afb4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800afb8:	2000      	movs	r0, #0
 800afba:	106d      	asrs	r5, r5, #1
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	f04f 0e16 	mov.w	lr, #22
 800afc2:	4684      	mov	ip, r0
 800afc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afc8:	eb0c 0401 	add.w	r4, ip, r1
 800afcc:	4294      	cmp	r4, r2
 800afce:	bfde      	ittt	le
 800afd0:	1b12      	suble	r2, r2, r4
 800afd2:	eb04 0c01 	addle.w	ip, r4, r1
 800afd6:	1840      	addle	r0, r0, r1
 800afd8:	0052      	lsls	r2, r2, #1
 800afda:	f1be 0e01 	subs.w	lr, lr, #1
 800afde:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800afe2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800afe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afea:	d1ed      	bne.n	800afc8 <__ieee754_sqrt+0x94>
 800afec:	4671      	mov	r1, lr
 800afee:	2720      	movs	r7, #32
 800aff0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aff4:	4562      	cmp	r2, ip
 800aff6:	eb04 060e 	add.w	r6, r4, lr
 800affa:	dc02      	bgt.n	800b002 <__ieee754_sqrt+0xce>
 800affc:	d113      	bne.n	800b026 <__ieee754_sqrt+0xf2>
 800affe:	429e      	cmp	r6, r3
 800b000:	d811      	bhi.n	800b026 <__ieee754_sqrt+0xf2>
 800b002:	2e00      	cmp	r6, #0
 800b004:	eb06 0e04 	add.w	lr, r6, r4
 800b008:	da43      	bge.n	800b092 <__ieee754_sqrt+0x15e>
 800b00a:	f1be 0f00 	cmp.w	lr, #0
 800b00e:	db40      	blt.n	800b092 <__ieee754_sqrt+0x15e>
 800b010:	f10c 0801 	add.w	r8, ip, #1
 800b014:	eba2 020c 	sub.w	r2, r2, ip
 800b018:	429e      	cmp	r6, r3
 800b01a:	bf88      	it	hi
 800b01c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b020:	1b9b      	subs	r3, r3, r6
 800b022:	4421      	add	r1, r4
 800b024:	46c4      	mov	ip, r8
 800b026:	0052      	lsls	r2, r2, #1
 800b028:	3f01      	subs	r7, #1
 800b02a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b02e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b032:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b036:	d1dd      	bne.n	800aff4 <__ieee754_sqrt+0xc0>
 800b038:	4313      	orrs	r3, r2
 800b03a:	d006      	beq.n	800b04a <__ieee754_sqrt+0x116>
 800b03c:	1c4c      	adds	r4, r1, #1
 800b03e:	bf13      	iteet	ne
 800b040:	3101      	addne	r1, #1
 800b042:	3001      	addeq	r0, #1
 800b044:	4639      	moveq	r1, r7
 800b046:	f021 0101 	bicne.w	r1, r1, #1
 800b04a:	1043      	asrs	r3, r0, #1
 800b04c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b050:	0849      	lsrs	r1, r1, #1
 800b052:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b056:	07c2      	lsls	r2, r0, #31
 800b058:	bf48      	it	mi
 800b05a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b05e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b062:	460c      	mov	r4, r1
 800b064:	463d      	mov	r5, r7
 800b066:	e77f      	b.n	800af68 <__ieee754_sqrt+0x34>
 800b068:	0ada      	lsrs	r2, r3, #11
 800b06a:	3815      	subs	r0, #21
 800b06c:	055b      	lsls	r3, r3, #21
 800b06e:	2a00      	cmp	r2, #0
 800b070:	d0fa      	beq.n	800b068 <__ieee754_sqrt+0x134>
 800b072:	02d7      	lsls	r7, r2, #11
 800b074:	d50a      	bpl.n	800b08c <__ieee754_sqrt+0x158>
 800b076:	f1c1 0420 	rsb	r4, r1, #32
 800b07a:	fa23 f404 	lsr.w	r4, r3, r4
 800b07e:	1e4d      	subs	r5, r1, #1
 800b080:	408b      	lsls	r3, r1
 800b082:	4322      	orrs	r2, r4
 800b084:	1b41      	subs	r1, r0, r5
 800b086:	e788      	b.n	800af9a <__ieee754_sqrt+0x66>
 800b088:	4608      	mov	r0, r1
 800b08a:	e7f0      	b.n	800b06e <__ieee754_sqrt+0x13a>
 800b08c:	0052      	lsls	r2, r2, #1
 800b08e:	3101      	adds	r1, #1
 800b090:	e7ef      	b.n	800b072 <__ieee754_sqrt+0x13e>
 800b092:	46e0      	mov	r8, ip
 800b094:	e7be      	b.n	800b014 <__ieee754_sqrt+0xe0>
 800b096:	bf00      	nop
 800b098:	7ff00000 	.word	0x7ff00000

0800b09c <fabs>:
 800b09c:	ec51 0b10 	vmov	r0, r1, d0
 800b0a0:	ee10 2a10 	vmov	r2, s0
 800b0a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0a8:	ec43 2b10 	vmov	d0, r2, r3
 800b0ac:	4770      	bx	lr

0800b0ae <finite>:
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	ed8d 0b00 	vstr	d0, [sp]
 800b0b4:	9801      	ldr	r0, [sp, #4]
 800b0b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b0ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b0be:	0fc0      	lsrs	r0, r0, #31
 800b0c0:	b002      	add	sp, #8
 800b0c2:	4770      	bx	lr
 800b0c4:	0000      	movs	r0, r0
	...

0800b0c8 <nan>:
 800b0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b0d0 <nan+0x8>
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	00000000 	.word	0x00000000
 800b0d4:	7ff80000 	.word	0x7ff80000

0800b0d8 <rint>:
 800b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0da:	ec51 0b10 	vmov	r0, r1, d0
 800b0de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b0e6:	2e13      	cmp	r6, #19
 800b0e8:	ee10 4a10 	vmov	r4, s0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b0f2:	dc58      	bgt.n	800b1a6 <rint+0xce>
 800b0f4:	2e00      	cmp	r6, #0
 800b0f6:	da2b      	bge.n	800b150 <rint+0x78>
 800b0f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b0fc:	4302      	orrs	r2, r0
 800b0fe:	d023      	beq.n	800b148 <rint+0x70>
 800b100:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b104:	4302      	orrs	r2, r0
 800b106:	4254      	negs	r4, r2
 800b108:	4314      	orrs	r4, r2
 800b10a:	0c4b      	lsrs	r3, r1, #17
 800b10c:	0b24      	lsrs	r4, r4, #12
 800b10e:	045b      	lsls	r3, r3, #17
 800b110:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b114:	ea44 0103 	orr.w	r1, r4, r3
 800b118:	4b32      	ldr	r3, [pc, #200]	; (800b1e4 <rint+0x10c>)
 800b11a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b11e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4630      	mov	r0, r6
 800b128:	4639      	mov	r1, r7
 800b12a:	f7f5 f8a7 	bl	800027c <__adddf3>
 800b12e:	e9cd 0100 	strd	r0, r1, [sp]
 800b132:	463b      	mov	r3, r7
 800b134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b138:	4632      	mov	r2, r6
 800b13a:	f7f5 f89d 	bl	8000278 <__aeabi_dsub>
 800b13e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b142:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b146:	4639      	mov	r1, r7
 800b148:	ec41 0b10 	vmov	d0, r0, r1
 800b14c:	b003      	add	sp, #12
 800b14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b150:	4a25      	ldr	r2, [pc, #148]	; (800b1e8 <rint+0x110>)
 800b152:	4132      	asrs	r2, r6
 800b154:	ea01 0702 	and.w	r7, r1, r2
 800b158:	4307      	orrs	r7, r0
 800b15a:	d0f5      	beq.n	800b148 <rint+0x70>
 800b15c:	0851      	lsrs	r1, r2, #1
 800b15e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b162:	4314      	orrs	r4, r2
 800b164:	d00c      	beq.n	800b180 <rint+0xa8>
 800b166:	ea23 0201 	bic.w	r2, r3, r1
 800b16a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b16e:	2e13      	cmp	r6, #19
 800b170:	fa43 f606 	asr.w	r6, r3, r6
 800b174:	bf0c      	ite	eq
 800b176:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b17a:	2400      	movne	r4, #0
 800b17c:	ea42 0306 	orr.w	r3, r2, r6
 800b180:	4918      	ldr	r1, [pc, #96]	; (800b1e4 <rint+0x10c>)
 800b182:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b186:	4622      	mov	r2, r4
 800b188:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 f874 	bl	800027c <__adddf3>
 800b194:	e9cd 0100 	strd	r0, r1, [sp]
 800b198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b19c:	4622      	mov	r2, r4
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f7f5 f86a 	bl	8000278 <__aeabi_dsub>
 800b1a4:	e7d0      	b.n	800b148 <rint+0x70>
 800b1a6:	2e33      	cmp	r6, #51	; 0x33
 800b1a8:	dd07      	ble.n	800b1ba <rint+0xe2>
 800b1aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b1ae:	d1cb      	bne.n	800b148 <rint+0x70>
 800b1b0:	ee10 2a10 	vmov	r2, s0
 800b1b4:	f7f5 f862 	bl	800027c <__adddf3>
 800b1b8:	e7c6      	b.n	800b148 <rint+0x70>
 800b1ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b1be:	f04f 36ff 	mov.w	r6, #4294967295
 800b1c2:	40d6      	lsrs	r6, r2
 800b1c4:	4230      	tst	r0, r6
 800b1c6:	d0bf      	beq.n	800b148 <rint+0x70>
 800b1c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b1cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b1d0:	bf1f      	itttt	ne
 800b1d2:	ea24 0101 	bicne.w	r1, r4, r1
 800b1d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b1da:	fa44 f202 	asrne.w	r2, r4, r2
 800b1de:	ea41 0402 	orrne.w	r4, r1, r2
 800b1e2:	e7cd      	b.n	800b180 <rint+0xa8>
 800b1e4:	0800b470 	.word	0x0800b470
 800b1e8:	000fffff 	.word	0x000fffff
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <scalbn>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	ec55 4b10 	vmov	r4, r5, d0
 800b1f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	b99a      	cbnz	r2, 800b228 <scalbn+0x38>
 800b200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b204:	4323      	orrs	r3, r4
 800b206:	d036      	beq.n	800b276 <scalbn+0x86>
 800b208:	4b39      	ldr	r3, [pc, #228]	; (800b2f0 <scalbn+0x100>)
 800b20a:	4629      	mov	r1, r5
 800b20c:	ee10 0a10 	vmov	r0, s0
 800b210:	2200      	movs	r2, #0
 800b212:	f7f5 f9e9 	bl	80005e8 <__aeabi_dmul>
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <scalbn+0x104>)
 800b218:	429e      	cmp	r6, r3
 800b21a:	4604      	mov	r4, r0
 800b21c:	460d      	mov	r5, r1
 800b21e:	da10      	bge.n	800b242 <scalbn+0x52>
 800b220:	a32b      	add	r3, pc, #172	; (adr r3, 800b2d0 <scalbn+0xe0>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	e03a      	b.n	800b29e <scalbn+0xae>
 800b228:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b22c:	428a      	cmp	r2, r1
 800b22e:	d10c      	bne.n	800b24a <scalbn+0x5a>
 800b230:	ee10 2a10 	vmov	r2, s0
 800b234:	4620      	mov	r0, r4
 800b236:	4629      	mov	r1, r5
 800b238:	f7f5 f820 	bl	800027c <__adddf3>
 800b23c:	4604      	mov	r4, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	e019      	b.n	800b276 <scalbn+0x86>
 800b242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b246:	460b      	mov	r3, r1
 800b248:	3a36      	subs	r2, #54	; 0x36
 800b24a:	4432      	add	r2, r6
 800b24c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b250:	428a      	cmp	r2, r1
 800b252:	dd08      	ble.n	800b266 <scalbn+0x76>
 800b254:	2d00      	cmp	r5, #0
 800b256:	a120      	add	r1, pc, #128	; (adr r1, 800b2d8 <scalbn+0xe8>)
 800b258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b25c:	da1c      	bge.n	800b298 <scalbn+0xa8>
 800b25e:	a120      	add	r1, pc, #128	; (adr r1, 800b2e0 <scalbn+0xf0>)
 800b260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b264:	e018      	b.n	800b298 <scalbn+0xa8>
 800b266:	2a00      	cmp	r2, #0
 800b268:	dd08      	ble.n	800b27c <scalbn+0x8c>
 800b26a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b26e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b272:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b276:	ec45 4b10 	vmov	d0, r4, r5
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b280:	da19      	bge.n	800b2b6 <scalbn+0xc6>
 800b282:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b286:	429e      	cmp	r6, r3
 800b288:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b28c:	dd0a      	ble.n	800b2a4 <scalbn+0xb4>
 800b28e:	a112      	add	r1, pc, #72	; (adr r1, 800b2d8 <scalbn+0xe8>)
 800b290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e2      	bne.n	800b25e <scalbn+0x6e>
 800b298:	a30f      	add	r3, pc, #60	; (adr r3, 800b2d8 <scalbn+0xe8>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7f5 f9a3 	bl	80005e8 <__aeabi_dmul>
 800b2a2:	e7cb      	b.n	800b23c <scalbn+0x4c>
 800b2a4:	a10a      	add	r1, pc, #40	; (adr r1, 800b2d0 <scalbn+0xe0>)
 800b2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0b8      	beq.n	800b220 <scalbn+0x30>
 800b2ae:	a10e      	add	r1, pc, #56	; (adr r1, 800b2e8 <scalbn+0xf8>)
 800b2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b4:	e7b4      	b.n	800b220 <scalbn+0x30>
 800b2b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ba:	3236      	adds	r2, #54	; 0x36
 800b2bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <scalbn+0x108>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	e7e8      	b.n	800b29e <scalbn+0xae>
 800b2cc:	f3af 8000 	nop.w
 800b2d0:	c2f8f359 	.word	0xc2f8f359
 800b2d4:	01a56e1f 	.word	0x01a56e1f
 800b2d8:	8800759c 	.word	0x8800759c
 800b2dc:	7e37e43c 	.word	0x7e37e43c
 800b2e0:	8800759c 	.word	0x8800759c
 800b2e4:	fe37e43c 	.word	0xfe37e43c
 800b2e8:	c2f8f359 	.word	0xc2f8f359
 800b2ec:	81a56e1f 	.word	0x81a56e1f
 800b2f0:	43500000 	.word	0x43500000
 800b2f4:	ffff3cb0 	.word	0xffff3cb0
 800b2f8:	3c900000 	.word	0x3c900000

0800b2fc <_init>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr

0800b308 <_fini>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr
